// Copyright 2025 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// EVM bytecode configuration

use serde::{Deserialize, Serialize};

// Include the auto-generated bytecode
include!(concat!(env!("OUT_DIR"), "/contract_bytecode.rs"));

#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct EvmConfig {
    pub bytecode: Vec<u8>,
    pub function_signature: String,
    pub input: i64,
}

impl Default for EvmConfig {
    fn default() -> Self {
        Self {
            // Bytecode compiled from Contract.sol at build time
            bytecode: hex::decode(CONTRACT_BYTECODE).unwrap(),
            function_signature: "isSolved(int256)".to_string(),
            input: 42,
        }
    }
}

impl EvmConfig {
    /// Create a new EVM config with custom bytecode
    pub fn new(bytecode_hex: &str, function_signature: &str, input: i64) -> Result<Self, hex::FromHexError> {
        let bytecode = hex::decode(bytecode_hex)?;
        Ok(Self { bytecode, function_signature: function_signature.to_string(), input: input as i64 })
    }
    
    /// Get the bytecode as a reference
    pub fn get_bytecode(&self) -> &[u8] {
        &self.bytecode
    }
    
    /// Get the bytecode as owned Vec
    pub fn get_bytecode_owned(&self) -> Vec<u8> {
        self.bytecode.clone()
    }

    /// Get the function signature
    pub fn get_function_signature(&self) -> &str {
        &self.function_signature
    }

    /// Get the input value
    pub fn get_input(&self) -> i64 {
        self.input
    }
}
