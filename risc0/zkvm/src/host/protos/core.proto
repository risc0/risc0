syntax = "proto3";

import "base.proto";

package core;

message ProveInfo {
  Receipt receipt = 1;
  SessionStats stats = 2;
  InnerReceipt work_receipt = 3;
}

message SessionStats {
  uint64 segments = 1;
  uint64 total_cycles = 2;
  uint64 user_cycles = 3;
  uint64 paging_cycles = 4;
  uint64 reserved_cycles = 5;
}

message Receipt {
  base.CompatVersion version = 1;
  InnerReceipt inner = 2;
  bytes journal = 3;
  ReceiptMetadata metadata = 4;
}

message ReceiptMetadata {
  base.Digest verifier_parameters = 1;
}

// NOTE: InnerReceipt and InnerAssumptionReceipt are the same type in protobuf.
// In Rust, they are distinct types because Rust needs to size everything on the
// stack and e.g. SuccinctReceipt<ReceiptClaim> and SuccinctReceipt<Unknown>
// have different sizes. Protobuf handles this without issue. GenericReceipt also
// uses this message type for similar reasons, but the composite kind is unused.
message InnerReceipt {
  oneof kind {
    CompositeReceipt composite = 1;
    SuccinctReceipt succinct = 2;
    FakeReceipt fake = 3;
    Groth16Receipt groth16 = 4;
  }
}

message CompositeReceipt {
  repeated SegmentReceipt segments = 1;
  repeated InnerReceipt assumption_receipts = 2;
  base.Digest verifier_parameters = 3;
}

message SegmentReceipt {
  base.CompatVersion version = 1;
  bytes seal = 2;
  uint32 index = 3;
  string hashfn = 4;
  ReceiptClaim claim = 5;
  base.Digest verifier_parameters = 6;
}

message SuccinctReceipt {
  base.CompatVersion version = 1;
  bytes seal = 2;
  base.Digest control_id = 3;
  MaybePruned claim = 4; // MaybePruned<Claim>
  MerkleProof control_inclusion_proof = 5;
  string hashfn = 6;
  base.Digest verifier_parameters = 7;
}

message MerkleProof {
  uint32 index = 1;
  repeated base.Digest digests = 2;
}

message Groth16Receipt {
  base.CompatVersion version = 1;
  bytes seal = 2;
  MaybePruned claim = 3; // MaybePruned<Claim>
  base.Digest verifier_parameters = 4;
}

message ReceiptClaim {
  MaybePruned pre = 1;  // MaybePruned<SystemState>
  MaybePruned post = 2; // MaybePruned<SystemState>
  base.ExitCode exit_code = 3;
  MaybePruned input = 4;  // Option<MaybePruned<Input>>
  MaybePruned output = 5; // Option<MaybePruned<Output>>
}

message Work {
  bytes nonce_min = 1;
  bytes nonce_max = 2;
  uint64 value = 3;
}

message WorkClaim {
  MaybePruned claim = 1; // MaybePruned<Claim>
  MaybePruned work = 2; // MaybePruned<Work>
}

message UnionClaim {
  base.Digest left = 1;
  base.Digest right = 2;
}

message MaybePruned {
  oneof kind {
    // Protobuf encoded bytes of the inner value.
    bytes value = 1;
    base.Digest pruned = 2;
  }
}

message SystemState {
  uint32 pc = 1;
  base.Digest merkle_root = 2;
}

message Input {}

message Output {
  MaybePruned journal = 1;     // MaybePruned<bytes>
  MaybePruned assumptions = 2; // MaybePruned<Assumptions>
}

message Assumption {
  base.Digest claim = 1;
  base.Digest control_root = 2;
}

message Assumptions {
  repeated MaybePruned inner = 1; // MaybePruned<Assumption>
}

message FakeReceipt {
  MaybePruned claim = 1; // MaybePruned<Claim>
}
