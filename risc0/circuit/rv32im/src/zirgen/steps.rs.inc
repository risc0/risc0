pub fn back_nondet_reg<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<NondetRegStruct> {
    let x2: NondetRegStruct = NondetRegStruct {
        _super: (layout1.map(|c| c._super)).load(ctx, distance0),
    };
    return Ok(x2);
}
pub fn exec_nondet_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<NondetRegStruct> {
    let x2: BoundLayout<Reg, _> = (layout1.map(|c| c._super));
    x2.store(ctx, arg0);
    return Ok(NondetRegStruct {
        _super: x2.load(ctx, 0),
    });
}
pub fn back_nondet_ext_reg<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, NondetExtRegLayout, Val>,
) -> Result<NondetExtRegStruct> {
    let x2: NondetExtRegStruct = NondetExtRegStruct {
        _super: (layout1.map(|c| c._super)).load_ext::<ExtVal>(ctx, distance0),
    };
    return Ok(x2);
}
pub fn exec_nondet_ext_reg<'a>(
    ctx: &'a ExecContext,
    arg0: ExtVal,
    layout1: BoundLayout<'a, NondetExtRegLayout, Val>,
) -> Result<NondetExtRegStruct> {
    let x2: BoundLayout<Reg, _> = (layout1.map(|c| c._super));
    x2.store_ext(ctx, arg0);
    return Ok(NondetExtRegStruct {
        _super: x2.load_ext::<ExtVal>(ctx, 0),
    });
}
pub fn back_reg<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<RegStruct> {
    // Reg(<preamble>:4)
    let x2: NondetRegStruct = back_nondet_reg(ctx, distance0, layout1)?;
    return Ok(RegStruct { _super: x2 });
}
pub fn exec_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<RegStruct> {
    let x2: NondetRegStruct = exec_nondet_reg(ctx, arg0, layout1)?;
    // Reg(<preamble>:5)
    eqz!((arg0 - x2._super), "Reg(<preamble>:5)");
    return Ok(RegStruct { _super: x2 });
}
pub fn back_ext_reg<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, NondetExtRegLayout, Val>,
) -> Result<NondetExtRegStruct> {
    // ExtReg(<preamble>:10)
    let x2: NondetExtRegStruct = back_nondet_ext_reg(ctx, distance0, layout1)?;
    return Ok(x2);
}
pub fn exec_ext_reg<'a>(
    ctx: &'a ExecContext,
    arg0: ExtVal,
    layout1: BoundLayout<'a, NondetExtRegLayout, Val>,
) -> Result<NondetExtRegStruct> {
    let x2: NondetExtRegStruct = exec_nondet_ext_reg(ctx, arg0, layout1)?;
    // ExtReg(<preamble>:11)
    eqz!(
        (x2._super - arg0),
        "loc(callsite(unknown at  ExtReg ( <preamble> :11:11)))"
    );
    return Ok(x2);
}
pub fn exec_nondet_bit_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<NondetRegStruct> {
    // NondetBitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:11)
    let x2: NondetRegStruct = exec_nondet_reg(ctx, arg0, layout1)?;
    let x3: Val = x2._super;
    // AssertBit(zirgen/circuit/rv32im/v2/dsl/bits.zir:6)
    // NondetBitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:12)
    eqz!((x3 * (Val::new(1) - x3)), "loc(callsite( AssertBit ( zirgen/circuit/rv32im/v2/dsl/bits.zir :6:20) at  NondetBitReg ( zirgen/circuit/rv32im/v2/dsl/bits.zir :12:13)))");
    return Ok(x2);
}
pub fn exec_bit_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<BitRegStruct> {
    // BitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:17)
    let x2: NondetRegStruct = exec_nondet_bit_reg(ctx, arg0, layout1)?;
    // BitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:18)
    eqz!(
        (arg0 - x2._super),
        "BitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:18)"
    );
    return Ok(BitRegStruct {});
}
pub fn exec_nondet_twit_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetRegLayout, Val>,
) -> Result<NondetRegStruct> {
    // NondetTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:48)
    let x2: NondetRegStruct = exec_nondet_reg(ctx, arg0, layout1)?;
    let x3: Val = x2._super;
    // AssertTwit(zirgen/circuit/rv32im/v2/dsl/bits.zir:35)
    // NondetTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:49)
    let x4: Val = ((x3 * (Val::new(1) - x3)) * (Val::new(2) - x3));
    eqz!((x4 * (Val::new(3) - x3)), "loc(callsite( AssertTwit ( zirgen/circuit/rv32im/v2/dsl/bits.zir :35:44) at  NondetTwitReg ( zirgen/circuit/rv32im/v2/dsl/bits.zir :49:14)))");
    return Ok(x2);
}
pub fn exec_nondet_fake_twit_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetFakeTwitRegLayout, Val>,
) -> Result<NondetFakeTwitRegStruct> {
    // NondetFakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:55)
    let x2: NondetRegStruct =
        exec_nondet_bit_reg(ctx, bit_and(arg0, Val::new(1))?, (layout1.map(|c| c.reg0)))?;
    // NondetFakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:56)
    let x3: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(arg0, Val::new(2))? * Val::new(1006632961)),
        (layout1.map(|c| c.reg1)),
    )?;
    // NondetFakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:57)
    let x4: Val = ((x3._super * Val::new(2)) + x2._super);
    return Ok(NondetFakeTwitRegStruct { _super: x4 });
}
pub fn exec_fake_twit_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetFakeTwitRegLayout, Val>,
) -> Result<FakeTwitRegStruct> {
    // FakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:67)
    let x2: NondetFakeTwitRegStruct = exec_nondet_fake_twit_reg(ctx, arg0, layout1)?;
    // FakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:68)
    eqz!(
        (arg0 - x2._super),
        "FakeTwitReg(zirgen/circuit/rv32im/v2/dsl/bits.zir:68)"
    );
    return Ok(FakeTwitRegStruct {});
}
pub fn exec_is_zero<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, IsZeroLayout, Val>,
) -> Result<NondetRegStruct> {
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:8)
    let x2: NondetRegStruct = exec_nondet_reg(ctx, isz(arg0)?, (layout1.map(|c| c._super)))?;
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:11)
    let x3: NondetRegStruct = exec_nondet_reg(ctx, inv_0(arg0)?, (layout1.map(|c| c.inv)))?;
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:8)
    let x4: Val = x2._super;
    // AssertBit(zirgen/circuit/rv32im/v2/dsl/bits.zir:6)
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:14)
    let x5: Val = (Val::new(1) - x4);
    eqz!((x4 * x5), "loc(callsite( AssertBit ( zirgen/circuit/rv32im/v2/dsl/bits.zir :6:20) at  IsZero ( zirgen/circuit/rv32im/v2/dsl/is_zero.zir :14:13)))");
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:11)
    let x6: Val = x3._super;
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:16)
    eqz!(
        ((arg0 * x6) - x5),
        "IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:16)"
    );
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:18)
    eqz!(
        (x4 * arg0),
        "IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:18)"
    );
    // IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:20)
    eqz!(
        (x4 * x6),
        "IsZero(zirgen/circuit/rv32im/v2/dsl/is_zero.zir:20)"
    );
    return Ok(x2);
}
pub fn exec_arg_u8<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    layout2: BoundLayout<'a, ArgU8Layout, Val>,
) -> Result<ArgU8Struct> {
    // ArgU8(zirgen/circuit/rv32im/v2/dsl/lookups.zir:8)
    let x3: NondetRegStruct = exec_nondet_reg(ctx, arg0, (layout2.map(|c| c.count)))?;
    // ArgU8(zirgen/circuit/rv32im/v2/dsl/lookups.zir:9)
    let x4: NondetRegStruct = exec_nondet_reg(ctx, arg1, (layout2.map(|c| c.val)))?;
    // LookupDelta(zirgen/circuit/rv32im/v2/dsl/lookups.zir:4)
    // ArgU8(zirgen/circuit/rv32im/v2/dsl/lookups.zir:10)
    invoke_extern!(ctx, lookup_delta, Val::new(8), x4._super, x3._super);
    return Ok(ArgU8Struct { count: x3, val: x4 });
}
pub fn exec_nondet_u8_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetU8RegLayout, Val>,
) -> Result<NondetRegStruct> {
    // NondetU8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:15)
    let x2: ArgU8Struct = exec_arg_u8(ctx, Val::new(1), arg0, (layout1.map(|c| c.arg)))?;
    // NondetU8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:16)
    let x3: Val = (x2.count._super - Val::new(1));
    eqz!(
        x3,
        "NondetU8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:16)"
    );
    return Ok(x2.val);
}
pub fn exec_u8_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, U8RegLayout, Val>,
) -> Result<U8RegStruct> {
    // U8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:22)
    let x2: NondetRegStruct = exec_nondet_u8_reg(ctx, arg0, (layout1.map(|c| c.ret)))?;
    // U8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:23)
    eqz!(
        (x2._super - arg0),
        "U8Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:23)"
    );
    return Ok(U8RegStruct {});
}
pub fn exec_arg_u16<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    layout2: BoundLayout<'a, ArgU16Layout, Val>,
) -> Result<ArgU16Struct> {
    // ArgU16(zirgen/circuit/rv32im/v2/dsl/lookups.zir:28)
    let x3: NondetRegStruct = exec_nondet_reg(ctx, arg0, (layout2.map(|c| c.count)))?;
    // ArgU16(zirgen/circuit/rv32im/v2/dsl/lookups.zir:29)
    let x4: NondetRegStruct = exec_nondet_reg(ctx, arg1, (layout2.map(|c| c.val)))?;
    // LookupDelta(zirgen/circuit/rv32im/v2/dsl/lookups.zir:4)
    // ArgU16(zirgen/circuit/rv32im/v2/dsl/lookups.zir:30)
    invoke_extern!(ctx, lookup_delta, Val::new(16), x4._super, x3._super);
    return Ok(ArgU16Struct { count: x3, val: x4 });
}
pub fn exec_nondet_u16_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, NondetU16RegLayout, Val>,
) -> Result<NondetRegStruct> {
    // NondetU16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:35)
    let x2: ArgU16Struct = exec_arg_u16(ctx, Val::new(1), arg0, (layout1.map(|c| c.arg)))?;
    // NondetU16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:36)
    let x3: Val = (x2.count._super - Val::new(1));
    eqz!(
        x3,
        "NondetU16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:36)"
    );
    return Ok(x2.val);
}
pub fn exec_u16_reg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, U16RegLayout, Val>,
) -> Result<U16RegStruct> {
    // U16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:42)
    let x2: NondetRegStruct = exec_nondet_u16_reg(ctx, arg0, (layout1.map(|c| c.ret)))?;
    // U16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:43)
    eqz!(
        (x2._super - arg0),
        "U16Reg(zirgen/circuit/rv32im/v2/dsl/lookups.zir:43)"
    );
    return Ok(U16RegStruct { _super: arg0 });
}
pub fn exec_to_bits_5_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, ToBits_5_Layout, Val>,
) -> Result<ToBits_5_Struct> {
    // ToBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:31)
    let x2: NondetRegStruct5Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
        ],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            // Div(<preamble>:16)
            let x5: Val = inv_0(
                [
                    Val::new(1),
                    Val::new(2),
                    Val::new(4),
                    Val::new(8),
                    Val::new(16),
                    Val::new(32),
                    Val::new(64),
                    Val::new(128),
                    Val::new(256),
                    Val::new(512),
                    Val::new(1024),
                    Val::new(2048),
                    Val::new(4096),
                    Val::new(8192),
                    Val::new(16384),
                    Val::new(32768),
                ][to_usize(x3)],
            )?;
            // Div(<preamble>:17)
            eqz!(((x5 * [Val::new(1), Val::new(2), Val::new(4), Val::new(8), Val::new(16), Val::new(32), Val::new(64), Val::new(128), Val::new(256), Val::new(512), Val::new(1024), Val::new(2048), Val::new(4096), Val::new(8192), Val::new(16384), Val::new(32768)][to_usize(x3)]) - Val::new(1)), "loc(callsite( Div ( <preamble> :17:22) at  ToBits ( zirgen/circuit/rv32im/v2/dsl/po2.zir :31:43)))");
            let x6: NondetRegStruct = exec_nondet_bit_reg(
                ctx,
                (x5 * bit_and(
                    arg0,
                    [
                        Val::new(1),
                        Val::new(2),
                        Val::new(4),
                        Val::new(8),
                        Val::new(16),
                        Val::new(32),
                        Val::new(64),
                        Val::new(128),
                        Val::new(256),
                        Val::new(512),
                        Val::new(1024),
                        Val::new(2048),
                        Val::new(4096),
                        Val::new(8192),
                        Val::new(16384),
                        Val::new(32768),
                    ][to_usize(x3)],
                )?),
                x4,
            )?;
            return Ok(x6);
        },
    )?;
    return Ok(ToBits_5_Struct { _super: x2 });
}
pub fn exec_dyn_po2<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, DynPo2Layout, Val>,
) -> Result<ValU32Struct> {
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:44)
    let x2: ToBits_5_Struct = exec_to_bits_5_(ctx, arg0, (layout1.map(|c| c.low5)))?;
    let x3: NondetRegStruct5Array = x2._super;
    let x4: Val = x3[to_usize(Val::new(0))]._super;
    let x5: Val = x3[to_usize(Val::new(1))]._super;
    let x6: Val = x3[to_usize(Val::new(2))]._super;
    let x7: Val = x3[to_usize(Val::new(3))]._super;
    let x8: Val = x3[to_usize(Val::new(4))]._super;
    // FromBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:35)
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:45)
    let x9: Val = (((x4 + (x5 * Val::new(2))) + (x6 * Val::new(4))) + (x7 * Val::new(8)));
    let x10: Val = (x9 + (x8 * Val::new(16)));
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:46)
    let x11: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        ((arg0 - x10) * Val::new(1950351361)),
        (layout1.map(|c| c.check_u16)),
    )?;
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:47)
    let x12: Val = ((x11._super * Val::new(32)) + x10);
    eqz!(
        (x12 - arg0),
        "DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:47)"
    );
    // CondMul(zirgen/circuit/rv32im/v2/dsl/po2.zir:39)
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:48)
    let x13: Val = ((x4 * Val::new(2)) + (Val::new(1) - x4));
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:49)
    let x14: Val = ((Val::new(1) - x5) * x13);
    let x15: Val = (((x5 * x13) * Val::new(4)) + x14);
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:50)
    let x16: Val = ((Val::new(1) - x6) * x15);
    let x17: Val = (((x6 * x15) * Val::new(16)) + x16);
    let x18: RegStruct = exec_reg(ctx, x17, (layout1.map(|c| c.b3)))?;
    let x19: Val = x18._super._super;
    // CondMul(zirgen/circuit/rv32im/v2/dsl/po2.zir:39)
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:51)
    let x20: Val = ((Val::new(1) - x7) * x19);
    let x21: Val = (((x7 * x19) * Val::new(256)) + x20);
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:52)
    let x22: Val = ((Val::new(1) - x8) * x21);
    let x23: RegStruct = exec_reg(ctx, x22, (layout1.map(|c| c.low)))?;
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:53)
    let x24: RegStruct = exec_reg(ctx, (x8 * x21), (layout1.map(|c| c.high)))?;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // DynPo2(zirgen/circuit/rv32im/v2/dsl/po2.zir:54)
    let x25: ValU32Struct = ValU32Struct {
        low: x23._super._super,
        high: x24._super._super,
    };
    return Ok(x25);
}
pub fn exec_normalize_u32<'a>(
    ctx: &'a ExecContext,
    arg0: &DenormedValU32Struct,
    layout1: BoundLayout<'a, NormalizeU32Layout, Val>,
) -> Result<NormalizeU32Struct> {
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:42)
    let x2: Val = arg0.low;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:44)
    let x3: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        bit_and(x2, Val::new(65535))?,
        (layout1.map(|c| c.low16)),
    )?;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:45)
    let x4: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x2, Val::new(65536))? * Val::new(2013235201)),
        (layout1.map(|c| c.low_carry)),
    )?;
    let x5: Val = x4._super;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:44)
    let x6: Val = x3._super;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:46)
    eqz!(
        (x2 - ((x5 * Val::new(65536)) + x6)),
        "NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:46)"
    );
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:48)
    let x7: Val = (arg0.high + x5);
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:50)
    let x8: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        bit_and(x7, Val::new(65535))?,
        (layout1.map(|c| c.high16)),
    )?;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:51)
    let x9: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x7, Val::new(65536))? * Val::new(2013235201)),
        (layout1.map(|c| c.high_carry)),
    )?;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:50)
    let x10: Val = x8._super;
    // NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:52)
    let x11: Val = ((x9._super * Val::new(65536)) + x10);
    eqz!(
        (x7 - x11),
        "NormalizeU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:52)"
    );
    return Ok(NormalizeU32Struct {
        _super: ValU32Struct { low: x6, high: x10 },
        carry: x9,
    });
}
pub fn exec_addr_decompose<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: Val,
    layout2: BoundLayout<'a, AddrDecomposeLayout, Val>,
) -> Result<AddrDecomposeStruct> {
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:61)
    let x3: Val = arg0.low;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:63)
    let x4: NondetRegStruct =
        exec_nondet_twit_reg(ctx, bit_and(x3, Val::new(3))?, (layout2.map(|c| c.low2)))?;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:65)
    let x5: Val = ((Val::new(1) - arg1) * Val::new(49151));
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:61)
    let x6: Val = arg0.high;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:65)
    let x7: Val = (((arg1 * Val::new(65535)) + x5) - x6);
    let x8: U16RegStruct = exec_u16_reg(ctx, x7, (layout2.map(|c| c.upper_diff)))?;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:67)
    let x9: NondetRegStruct = exec_is_zero(ctx, x6, (layout2.map(|c| c._0)))?;
    eqz!(
        x9._super,
        "AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:67)"
    );
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:63)
    let x10: Val = x4._super;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:69)
    let x11: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        ((x3 - x10) * Val::new(1509949441)),
        (layout2.map(|c| c.med14)),
    )?;
    let x12: Val = x11._super;
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:71)
    let x13: Val = (((x12 * Val::new(4)) + x10) - x3);
    eqz!(
        x13,
        "AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:71)"
    );
    // AddrDecompose(zirgen/circuit/rv32im/v2/dsl/u32.zir:61)
    let x14: AddrDecomposeStruct = AddrDecomposeStruct {
        _super: ((x6 * Val::new(16384)) + x12),
        low2: x4,
    };
    return Ok(x14);
}
pub fn exec_addr_decompose_bits<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: Val,
    layout2: BoundLayout<'a, AddrDecomposeBitsLayout, Val>,
) -> Result<AddrDecomposeBitsStruct> {
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:79)
    let x3: Val = arg0.low;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:81)
    let x4: NondetRegStruct =
        exec_nondet_bit_reg(ctx, bit_and(x3, Val::new(1))?, (layout2.map(|c| c.low0)))?;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:82)
    let x5: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x3, Val::new(2))? * Val::new(1006632961)),
        (layout2.map(|c| c.low1)),
    )?;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:83)
    let x6: Val = ((x5._super * Val::new(2)) + x4._super);
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:85)
    let x7: Val = ((Val::new(1) - arg1) * Val::new(49151));
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:79)
    let x8: Val = arg0.high;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:85)
    let x9: Val = (((arg1 * Val::new(65535)) + x7) - x8);
    let x10: U16RegStruct = exec_u16_reg(ctx, x9, (layout2.map(|c| c.upper_diff)))?;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:87)
    let x11: NondetRegStruct = exec_is_zero(ctx, x8, (layout2.map(|c| c._0)))?;
    eqz!(
        x11._super,
        "AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:87)"
    );
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:89)
    let x12: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        ((x3 - x6) * Val::new(1509949441)),
        (layout2.map(|c| c.med14)),
    )?;
    let x13: Val = x12._super;
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:91)
    let x14: Val = (((x13 * Val::new(4)) + x6) - x3);
    eqz!(
        x14,
        "AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:91)"
    );
    // AddrDecomposeBits(zirgen/circuit/rv32im/v2/dsl/u32.zir:93)
    let x15: Val = ((x8 * Val::new(16384)) + x13);
    return Ok(AddrDecomposeBitsStruct {
        _super: x15,
        low0: x4,
        low1: x5,
        low2: x6,
        addr: x15,
    });
}
pub fn exec_cmp_equal<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, CmpEqualLayout, Val>,
) -> Result<CmpEqualStruct> {
    // CmpEqual(zirgen/circuit/rv32im/v2/dsl/u32.zir:112)
    let x3: NondetRegStruct =
        exec_is_zero(ctx, (arg0.low - arg1.low), (layout2.map(|c| c.low_same)))?;
    // CmpEqual(zirgen/circuit/rv32im/v2/dsl/u32.zir:113)
    let x4: NondetRegStruct =
        exec_is_zero(ctx, (arg0.high - arg1.high), (layout2.map(|c| c.high_same)))?;
    // CmpEqual(zirgen/circuit/rv32im/v2/dsl/u32.zir:114)
    let x5: RegStruct = exec_reg(ctx, (x3._super * x4._super), (layout2.map(|c| c.is_equal)))?;
    return Ok(CmpEqualStruct { is_equal: x5 });
}
pub fn exec_cmp_less_than_unsigned<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, CmpLessThanUnsignedLayout, Val>,
) -> Result<CmpLessThanUnsignedStruct> {
    // SubU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:33)
    // CmpLessThanUnsigned(zirgen/circuit/rv32im/v2/dsl/u32.zir:119)
    let x3: Val = ((arg0.low + Val::new(65536)) - arg1.low);
    let x4: Val = ((arg0.high + Val::new(65535)) - arg1.high);
    let x5: NormalizeU32Struct = exec_normalize_u32(
        ctx,
        &DenormedValU32Struct { low: x3, high: x4 },
        (layout2.map(|c| c.diff)),
    )?;
    // CmpLessThanUnsigned(zirgen/circuit/rv32im/v2/dsl/u32.zir:120)
    let x6: Val = (Val::new(1) - x5.carry._super);
    return Ok(CmpLessThanUnsignedStruct { is_less_than: x6 });
}
pub fn exec_get_sign_u32<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    layout1: BoundLayout<'a, GetSignU32Layout, Val>,
) -> Result<NondetRegStruct> {
    // GetSignU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:124)
    let x2: Val = arg0.high;
    // GetSignU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:125)
    let x3: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x2, Val::new(32768))? * Val::new(2013204481)),
        (layout1.map(|c| c._super)),
    )?;
    // GetSignU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:126)
    let x4: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        (bit_and(x2, Val::new(32767))? * Val::new(2)),
        (layout1.map(|c| c.rest_times_two)),
    )?;
    // GetSignU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:127)
    let x5: Val = ((x3._super * Val::new(32768)) + (x4._super * Val::new(1006632961)));
    eqz!(
        (x2 - x5),
        "GetSignU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:127)"
    );
    return Ok(x3);
}
pub fn exec_cmp_less_than<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, CmpLessThanLayout, Val>,
) -> Result<CmpLessThanStruct> {
    // SubU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:33)
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:133)
    let x3: Val = ((arg0.low + Val::new(65536)) - arg1.low);
    let x4: Val = ((arg0.high + Val::new(65535)) - arg1.high);
    let x5: NormalizeU32Struct = exec_normalize_u32(
        ctx,
        &DenormedValU32Struct { low: x3, high: x4 },
        (layout2.map(|c| c.diff)),
    )?;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:134)
    let x6: NondetRegStruct = exec_get_sign_u32(ctx, arg0, (layout2.map(|c| c.s1)))?;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:135)
    let x7: NondetRegStruct = exec_get_sign_u32(ctx, arg1, (layout2.map(|c| c.s2)))?;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:136)
    let x8: NondetRegStruct = exec_get_sign_u32(ctx, &x5._super, (layout2.map(|c| c.s3)))?;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:135)
    let x9: Val = x7._super;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:134)
    let x10: Val = x6._super;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:136)
    let x11: Val = x8._super;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:138)
    let x12: Val = ((x10 * (Val::new(1) - x9)) * (Val::new(1) - x11));
    let x13: Val = ((Val::new(1) - x10) * x9);
    let x14: RegStruct = exec_reg(ctx, (x12 + (x13 * x11)), (layout2.map(|c| c.overflow)))?;
    let x15: Val = x14._super._super;
    // CmpLessThan(zirgen/circuit/rv32im/v2/dsl/u32.zir:140)
    let x16: Val = ((x15 + x11) - ((x15 * Val::new(2)) * x11));
    let x17: RegStruct = exec_reg(ctx, x16, (layout2.map(|c| c.is_less_than)))?;
    return Ok(CmpLessThanStruct { is_less_than: x17 });
}
pub fn exec_to_bits_16_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, ToBits_16_Layout, Val>,
) -> Result<ToBits_16_Struct> {
    // ToBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:31)
    let x2: NondetRegStruct16Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
            Val::new(8),
            Val::new(9),
            Val::new(10),
            Val::new(11),
            Val::new(12),
            Val::new(13),
            Val::new(14),
            Val::new(15),
        ],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            // Div(<preamble>:16)
            let x5: Val = inv_0(
                [
                    Val::new(1),
                    Val::new(2),
                    Val::new(4),
                    Val::new(8),
                    Val::new(16),
                    Val::new(32),
                    Val::new(64),
                    Val::new(128),
                    Val::new(256),
                    Val::new(512),
                    Val::new(1024),
                    Val::new(2048),
                    Val::new(4096),
                    Val::new(8192),
                    Val::new(16384),
                    Val::new(32768),
                ][to_usize(x3)],
            )?;
            // Div(<preamble>:17)
            eqz!(((x5 * [Val::new(1), Val::new(2), Val::new(4), Val::new(8), Val::new(16), Val::new(32), Val::new(64), Val::new(128), Val::new(256), Val::new(512), Val::new(1024), Val::new(2048), Val::new(4096), Val::new(8192), Val::new(16384), Val::new(32768)][to_usize(x3)]) - Val::new(1)), "loc(callsite( Div ( <preamble> :17:22) at  ToBits ( zirgen/circuit/rv32im/v2/dsl/po2.zir :31:43)))");
            let x6: NondetRegStruct = exec_nondet_bit_reg(
                ctx,
                (x5 * bit_and(
                    arg0,
                    [
                        Val::new(1),
                        Val::new(2),
                        Val::new(4),
                        Val::new(8),
                        Val::new(16),
                        Val::new(32),
                        Val::new(64),
                        Val::new(128),
                        Val::new(256),
                        Val::new(512),
                        Val::new(1024),
                        Val::new(2048),
                        Val::new(4096),
                        Val::new(8192),
                        Val::new(16384),
                        Val::new(32768),
                    ][to_usize(x3)],
                )?),
                x4,
            )?;
            return Ok(x6);
        },
    )?;
    return Ok(ToBits_16_Struct { _super: x2 });
}
pub fn exec_bitwise_and_u16<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    layout2: BoundLayout<'a, BitwiseAndU16Layout, Val>,
) -> Result<FromBits_16_Struct> {
    // BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:144)
    let x3: ToBits_16_Struct = exec_to_bits_16_(ctx, arg0, (layout2.map(|c| c.bits_x)))?;
    let x4: NondetRegStruct16Array = x3._super;
    let x5: Val = x4[to_usize(Val::new(0))]._super;
    let x6: Val = x4[to_usize(Val::new(1))]._super;
    let x7: Val = x4[to_usize(Val::new(2))]._super;
    let x8: Val = x4[to_usize(Val::new(3))]._super;
    let x9: Val = x4[to_usize(Val::new(4))]._super;
    let x10: Val = x4[to_usize(Val::new(5))]._super;
    let x11: Val = x4[to_usize(Val::new(6))]._super;
    let x12: Val = x4[to_usize(Val::new(7))]._super;
    let x13: Val = x4[to_usize(Val::new(8))]._super;
    let x14: Val = x4[to_usize(Val::new(9))]._super;
    let x15: Val = x4[to_usize(Val::new(10))]._super;
    let x16: Val = x4[to_usize(Val::new(11))]._super;
    let x17: Val = x4[to_usize(Val::new(12))]._super;
    let x18: Val = x4[to_usize(Val::new(13))]._super;
    let x19: Val = x4[to_usize(Val::new(14))]._super;
    let x20: Val = x4[to_usize(Val::new(15))]._super;
    // FromBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:35)
    // BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:145)
    let x21: Val = (((x5 + (x6 * Val::new(2))) + (x7 * Val::new(4))) + (x8 * Val::new(8)));
    let x22: Val = (((x21 + (x9 * Val::new(16))) + (x10 * Val::new(32))) + (x11 * Val::new(64)));
    let x23: Val =
        (((x22 + (x12 * Val::new(128))) + (x13 * Val::new(256))) + (x14 * Val::new(512)));
    let x24: Val =
        (((x23 + (x15 * Val::new(1024))) + (x16 * Val::new(2048))) + (x17 * Val::new(4096)));
    let x25: Val =
        (((x24 + (x18 * Val::new(8192))) + (x19 * Val::new(16384))) + (x20 * Val::new(32768)));
    eqz!(
        (arg0 - x25),
        "BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:145)"
    );
    // BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:146)
    let x26: ToBits_16_Struct = exec_to_bits_16_(ctx, arg1, (layout2.map(|c| c.bits_y)))?;
    let x27: NondetRegStruct16Array = x26._super;
    let x28: Val = x27[to_usize(Val::new(0))]._super;
    let x29: Val = x27[to_usize(Val::new(1))]._super;
    let x30: Val = x27[to_usize(Val::new(2))]._super;
    let x31: Val = x27[to_usize(Val::new(3))]._super;
    let x32: Val = x27[to_usize(Val::new(4))]._super;
    let x33: Val = x27[to_usize(Val::new(5))]._super;
    let x34: Val = x27[to_usize(Val::new(6))]._super;
    let x35: Val = x27[to_usize(Val::new(7))]._super;
    let x36: Val = x27[to_usize(Val::new(8))]._super;
    let x37: Val = x27[to_usize(Val::new(9))]._super;
    let x38: Val = x27[to_usize(Val::new(10))]._super;
    let x39: Val = x27[to_usize(Val::new(11))]._super;
    let x40: Val = x27[to_usize(Val::new(12))]._super;
    let x41: Val = x27[to_usize(Val::new(13))]._super;
    let x42: Val = x27[to_usize(Val::new(14))]._super;
    let x43: Val = x27[to_usize(Val::new(15))]._super;
    // FromBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:35)
    // BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:147)
    let x44: Val = (((x28 + (x29 * Val::new(2))) + (x30 * Val::new(4))) + (x31 * Val::new(8)));
    let x45: Val = (((x44 + (x32 * Val::new(16))) + (x33 * Val::new(32))) + (x34 * Val::new(64)));
    let x46: Val =
        (((x45 + (x35 * Val::new(128))) + (x36 * Val::new(256))) + (x37 * Val::new(512)));
    let x47: Val =
        (((x46 + (x38 * Val::new(1024))) + (x39 * Val::new(2048))) + (x40 * Val::new(4096)));
    let x48: Val =
        (((x47 + (x41 * Val::new(8192))) + (x42 * Val::new(16384))) + (x43 * Val::new(32768)));
    eqz!(
        (arg1 - x48),
        "BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:147)"
    );
    // FromBits(zirgen/circuit/rv32im/v2/dsl/po2.zir:35)
    // BitwiseAndU16(zirgen/circuit/rv32im/v2/dsl/u32.zir:149)
    let x49: Val = ((x5 * x28) + ((x6 * x29) * Val::new(2)));
    let x50: Val = ((x49 + ((x7 * x30) * Val::new(4))) + ((x8 * x31) * Val::new(8)));
    let x51: Val = ((x50 + ((x9 * x32) * Val::new(16))) + ((x10 * x33) * Val::new(32)));
    let x52: Val = ((x51 + ((x11 * x34) * Val::new(64))) + ((x12 * x35) * Val::new(128)));
    let x53: Val = ((x52 + ((x13 * x36) * Val::new(256))) + ((x14 * x37) * Val::new(512)));
    let x54: Val = ((x53 + ((x15 * x38) * Val::new(1024))) + ((x16 * x39) * Val::new(2048)));
    let x55: Val = ((x54 + ((x17 * x40) * Val::new(4096))) + ((x18 * x41) * Val::new(8192)));
    let x56: Val = ((x55 + ((x19 * x42) * Val::new(16384))) + ((x20 * x43) * Val::new(32768)));
    return Ok(FromBits_16_Struct { _super: x56 });
}
pub fn exec_bitwise_and<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, BitwiseAndLayout, Val>,
) -> Result<ValU32Struct> {
    // BitwiseAnd(zirgen/circuit/rv32im/v2/dsl/u32.zir:155)
    let x3: FromBits_16_Struct =
        exec_bitwise_and_u16(ctx, arg0.low, arg1.low, (layout2.map(|c| c._0)))?;
    let x4: FromBits_16_Struct =
        exec_bitwise_and_u16(ctx, arg0.high, arg1.high, (layout2.map(|c| c._1)))?;
    return Ok(ValU32Struct {
        low: x3._super,
        high: x4._super,
    });
}
pub fn exec_bitwise_or<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, BitwiseOrLayout, Val>,
) -> Result<ValU32Struct> {
    // BitwiseOr(zirgen/circuit/rv32im/v2/dsl/u32.zir:159)
    let x3: ValU32Struct = exec_bitwise_and(ctx, arg0, arg1, (layout2.map(|c| c.and_xy)))?;
    // BitwiseOr(zirgen/circuit/rv32im/v2/dsl/u32.zir:160)
    let x4: Val = ((arg0.low + arg1.low) - x3.low);
    let x5: Val = ((arg0.high + arg1.high) - x3.high);
    return Ok(ValU32Struct { low: x4, high: x5 });
}
pub fn exec_bitwise_xor<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    layout2: BoundLayout<'a, BitwiseXorLayout, Val>,
) -> Result<ValU32Struct> {
    // BitwiseXor(zirgen/circuit/rv32im/v2/dsl/u32.zir:164)
    let x3: ValU32Struct = exec_bitwise_and(ctx, arg0, arg1, (layout2.map(|c| c.and_xy)))?;
    // BitwiseXor(zirgen/circuit/rv32im/v2/dsl/u32.zir:165)
    let x4: Val = ((arg0.low + arg1.low) - (x3.low * Val::new(2)));
    let x5: Val = ((arg0.high + arg1.high) - (x3.high * Val::new(2)));
    return Ok(ValU32Struct { low: x4, high: x5 });
}
pub fn exec_decoder<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    layout1: BoundLayout<'a, DecoderLayout, Val>,
) -> Result<DecoderStruct> {
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:9)
    let x2: Val = arg0.high;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:15)
    let x3: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x2, Val::new(32768))? * Val::new(2013204481)),
        (layout1.map(|c| c._f7_6)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:16)
    let x4: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(24576))? * Val::new(2013020161)),
        (layout1.map(|c| c._f7_45)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:17)
    let x5: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(6144))? * Val::new(2012282881)),
        (layout1.map(|c| c._f7_23)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:18)
    let x6: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(1536))? * Val::new(2009333761)),
        (layout1.map(|c| c._f7_01)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:19)
    let x7: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(384))? * Val::new(1997537281)),
        (layout1.map(|c| c._rs2_34)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:20)
    let x8: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(96))? * Val::new(1950351361)),
        (layout1.map(|c| c._rs2_12)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:21)
    let x9: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x2, Val::new(16))? * Val::new(1887436801)),
        (layout1.map(|c| c._rs2_0)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:22)
    let x10: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x2, Val::new(12))? * Val::new(1509949441)),
        (layout1.map(|c| c._rs1_34)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:23)
    let x11: NondetRegStruct =
        exec_nondet_twit_reg(ctx, bit_and(x2, Val::new(3))?, (layout1.map(|c| c._rs1_12)))?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:9)
    let x12: Val = arg0.low;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:24)
    let x13: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x12, Val::new(32768))? * Val::new(2013204481)),
        (layout1.map(|c| c._rs1_0)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:25)
    let x14: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x12, Val::new(16384))? * Val::new(2013143041)),
        (layout1.map(|c| c._f3_2)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:26)
    let x15: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x12, Val::new(12288))? * Val::new(2012774401)),
        (layout1.map(|c| c._f3_01)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:27)
    let x16: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x12, Val::new(3072))? * Val::new(2011299841)),
        (layout1.map(|c| c._rd_34)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:28)
    let x17: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x12, Val::new(768))? * Val::new(2005401601)),
        (layout1.map(|c| c._rd_12)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:29)
    let x18: NondetRegStruct = exec_nondet_twit_reg(
        ctx,
        (bit_and(x12, Val::new(128))? * Val::new(1997537281)),
        (layout1.map(|c| c._rd_0)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:34)
    let x19: NondetRegStruct = exec_nondet_reg(
        ctx,
        bit_and(x12, Val::new(127))?,
        (layout1.map(|c| c.opcode)),
    )?;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:15)
    let x20: Val = x3._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:16)
    let x21: Val = x4._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:17)
    let x22: Val = x5._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:38)
    let x23: Val = (((x20 * Val::new(32768)) + (x21 * Val::new(8192))) + (x22 * Val::new(2048)));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:18)
    let x24: Val = x6._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:19)
    let x25: Val = x7._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:20)
    let x26: Val = x8._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:41)
    let x27: Val = (((x23 + (x24 * Val::new(512))) + (x25 * Val::new(128))) + (x26 * Val::new(32)));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:21)
    let x28: Val = x9._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:22)
    let x29: Val = x10._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:44)
    let x30: Val = (x29 * Val::new(4));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:23)
    let x31: Val = x11._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:44)
    let x32: Val = (((x27 + (x28 * Val::new(16))) + x30) + x31);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:37)
    eqz!(
        (x2 - x32),
        "Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:37)"
    );
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:24)
    let x33: Val = x13._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:46)
    let x34: Val = (x33 * Val::new(32768));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:25)
    let x35: Val = x14._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:26)
    let x36: Val = x15._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:47)
    let x37: Val = ((x34 + (x35 * Val::new(16384))) + (x36 * Val::new(4096)));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:27)
    let x38: Val = x16._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:28)
    let x39: Val = x17._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:29)
    let x40: Val = x18._super;
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:50)
    let x41: Val =
        (((x37 + (x38 * Val::new(1024))) + (x39 * Val::new(256))) + (x40 * Val::new(128)));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:46)
    eqz!(
        (x12 - (x41 + x19._super)),
        "Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:46)"
    );
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:55)
    let x42: Val = (((x29 * Val::new(8)) + (x31 * Val::new(2))) + x33);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:56)
    let x43: Val = (x25 * Val::new(8));
    let x44: Val = (x26 * Val::new(2));
    let x45: Val = ((x43 + x44) + x28);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:57)
    let x46: Val = (x38 * Val::new(8));
    let x47: Val = (x39 * Val::new(2));
    let x48: Val = ((x46 + x47) + x40);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:58)
    let x49: Val = (((x21 * Val::new(16)) + (x22 * Val::new(4))) + x24);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:59)
    let x50: Val = ((x20 * Val::new(64)) + x49);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:60)
    let x51: Val = ((x35 * Val::new(4)) + x36);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:66)
    let x52: Val = (x20 * Val::new(61440));
    let x53: Val = (x52 + (x50 * Val::new(32)));
    let x54: Val = (x20 * Val::new(65535));
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:68)
    let x55: Val = (x49 * Val::new(32));
    let x56: Val = (((x52 + (x40 * Val::new(2048))) + x55) + x46);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:71)
    let x57: Val = (((x34 + (x51 * Val::new(4096))) + (x28 * Val::new(2048))) + x55);
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:72)
    let x58: Val = (((x20 * Val::new(65520)) + x30) + x31);
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // Decoder(zirgen/circuit/rv32im/v2/dsl/decode.zir:70)
    let x59: ValU32Struct = ValU32Struct {
        low: ((x57 + x43) + x44),
        high: x58,
    };
    return Ok(DecoderStruct {
        opcode: x19,
        rs1: x42,
        rs2: x45,
        rd: x48,
        func7: x50,
        func3: x51,
        imm_i: ValU32Struct {
            low: (x53 + x45),
            high: x54,
        },
        imm_s: ValU32Struct {
            low: (x53 + x48),
            high: x54,
        },
        imm_b: ValU32Struct {
            low: (x56 + x47),
            high: x54,
        },
        imm_u: ValU32Struct { low: x37, high: x2 },
        imm_j: x59,
    });
}
pub fn exec_memory_arg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    arg2: Val,
    arg3: &ValU32Struct,
    layout4: BoundLayout<'a, MemoryArgLayout, Val>,
) -> Result<MemoryArgStruct> {
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:25)
    let x5: NondetRegStruct = exec_nondet_reg(ctx, arg0, (layout4.map(|c| c.count)))?;
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:26)
    let x6: NondetRegStruct = exec_nondet_reg(ctx, arg1, (layout4.map(|c| c.addr)))?;
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:27)
    let x7: NondetRegStruct = exec_nondet_reg(ctx, arg2, (layout4.map(|c| c.cycle)))?;
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:28)
    let x8: NondetRegStruct = exec_nondet_reg(ctx, arg3.low, (layout4.map(|c| c.data_low)))?;
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:29)
    let x9: NondetRegStruct = exec_nondet_reg(ctx, arg3.high, (layout4.map(|c| c.data_high)))?;
    // MemoryDelta(zirgen/circuit/rv32im/v2/dsl/mem.zir:21)
    // MemoryArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:30)
    invoke_extern!(
        ctx,
        memory_delta,
        x6._super,
        x7._super,
        x8._super,
        x9._super,
        x5._super
    );
    return Ok(MemoryArgStruct {
        count: x5,
        addr: x6,
        cycle: x7,
        data_low: x8,
        data_high: x9,
    });
}
pub fn exec_cycle_arg<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    layout2: BoundLayout<'a, CycleArgLayout, Val>,
) -> Result<CycleArgStruct> {
    // CycleArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:54)
    let x3: NondetRegStruct = exec_nondet_reg(ctx, arg0, (layout2.map(|c| c.count)))?;
    // CycleArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:55)
    let x4: NondetRegStruct = exec_nondet_reg(ctx, arg1, (layout2.map(|c| c.cycle)))?;
    // LookupDelta(zirgen/circuit/rv32im/v2/dsl/lookups.zir:4)
    // CycleArg(zirgen/circuit/rv32im/v2/dsl/mem.zir:56)
    invoke_extern!(ctx, lookup_delta, Val::new(0), x4._super, x3._super);
    return Ok(CycleArgStruct {
        count: x3,
        cycle: x4,
    });
}
pub fn exec_is_cycle<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, IsCycleLayout, Val>,
) -> Result<IsCycleStruct> {
    // IsCycle(zirgen/circuit/rv32im/v2/dsl/mem.zir:60)
    let x2: CycleArgStruct = exec_cycle_arg(ctx, Val::new(1), arg0, (layout1.map(|c| c.arg)))?;
    // IsCycle(zirgen/circuit/rv32im/v2/dsl/mem.zir:61)
    let x3: Val = (x2.count._super - Val::new(1));
    eqz!(x3, "IsCycle(zirgen/circuit/rv32im/v2/dsl/mem.zir:61)");
    // IsCycle(zirgen/circuit/rv32im/v2/dsl/mem.zir:62)
    let x4: Val = (x2.cycle._super - arg0);
    eqz!(x4, "IsCycle(zirgen/circuit/rv32im/v2/dsl/mem.zir:62)");
    return Ok(IsCycleStruct {});
}
pub fn exec_memory_io<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, MemoryIOLayout, Val>,
) -> Result<MemoryIOStruct> {
    // GetMemoryTxn(zirgen/circuit/rv32im/v2/dsl/mem.zir:51)
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:66)
    let (x3, x4, x5, x6, x7) = invoke_extern!(ctx, get_memory_txn, arg1);
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:67)
    let x8: MemoryArgStruct = exec_memory_arg(
        ctx,
        Val::new(2013265920),
        arg1,
        x3,
        &ValU32Struct { low: x4, high: x5 },
        (layout2.map(|c| c.old_txn)),
    )?;
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:65)
    let x9: Val = arg0._super._super;
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:68)
    let x10: MemoryArgStruct = exec_memory_arg(
        ctx,
        Val::new(1),
        arg1,
        x9,
        &ValU32Struct { low: x6, high: x7 },
        (layout2.map(|c| c.new_txn)),
    )?;
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:69)
    let x11: Val = (x8.count._super - Val::new(2013265920));
    eqz!(x11, "MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:69)");
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:70)
    let x12: Val = (x10.count._super - Val::new(1));
    eqz!(x12, "MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:70)");
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:72)
    let x13: Val = (x10.cycle._super - x9);
    eqz!(x13, "MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:72)");
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:68)
    let x14: Val = x10.addr._super;
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:74)
    let x15: Val = (x8.addr._super - x14);
    eqz!(x15, "MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:74)");
    // MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:75)
    eqz!(
        (x14 - arg1),
        "MemoryIO(zirgen/circuit/rv32im/v2/dsl/mem.zir:75)"
    );
    return Ok(MemoryIOStruct {
        old_txn: x8,
        new_txn: x10,
    });
}
pub fn exec_is_forward<'a>(
    ctx: &'a ExecContext,
    arg0: &MemoryIOStruct,
    layout1: BoundLayout<'a, IsForwardLayout, Val>,
) -> Result<IsForwardStruct> {
    // IsForward(zirgen/circuit/rv32im/v2/dsl/mem.zir:83)
    let x2: Val = arg0.new_txn.cycle._super;
    let x3: Val = arg0.old_txn.cycle._super;
    // IsForward(zirgen/circuit/rv32im/v2/dsl/mem.zir:84)
    let x4: IsCycleStruct = exec_is_cycle(ctx, (x2 - x3), (layout1.map(|c| c._0)))?;
    return Ok(IsForwardStruct {});
}
pub fn exec_memory_read<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, MemoryReadLayout, Val>,
) -> Result<GetDataStruct> {
    // MemoryRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:89)
    let x3: MemoryIOStruct = exec_memory_io(ctx, arg0, arg1, (layout2.map(|c| c.io)))?;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:78)
    // MemoryRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:90)
    let x4: MemoryArgStruct = x3.old_txn;
    let x5: MemoryArgStruct = x3.new_txn;
    let x6: Val = x5.data_low._super;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:79)
    let x7: Val = (x4.data_low._super - x6);
    eqz!(x7, "loc(callsite( IsRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :79:22) at  MemoryRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :90:10)))");
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:78)
    let x8: Val = x5.data_high._super;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:80)
    let x9: Val = (x4.data_high._super - x8);
    eqz!(x9, "loc(callsite( IsRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :80:23) at  MemoryRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :90:10)))");
    // MemoryRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:91)
    let x10: IsForwardStruct = exec_is_forward(ctx, &x3, (layout2.map(|c| c._0)))?;
    return Ok(GetDataStruct {
        _super: ValU32Struct { low: x6, high: x8 },
        diff_low: Val::new(0),
        diff_high: Val::new(1),
    });
}
pub fn exec_memory_write<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    arg2: &ValU32Struct,
    layout3: BoundLayout<'a, MemoryWriteLayout, Val>,
) -> Result<MemoryWriteStruct> {
    // MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:97)
    let x4: MemoryIOStruct = exec_memory_io(ctx, arg0, arg1, (layout3.map(|c| c.io)))?;
    // MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:98)
    let x5: IsForwardStruct = exec_is_forward(ctx, &x4, (layout3.map(|c| c._0)))?;
    // MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:97)
    let x6: MemoryArgStruct = x4.new_txn;
    // MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:99)
    let x7: Val = (x6.data_low._super - arg2.low);
    eqz!(x7, "MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:99)");
    // MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:100)
    let x8: Val = (x6.data_high._super - arg2.high);
    eqz!(x8, "MemoryWrite(zirgen/circuit/rv32im/v2/dsl/mem.zir:100)");
    return Ok(MemoryWriteStruct {});
}
pub fn exec_memory_write_unconstrained<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, MemoryWriteUnconstrainedLayout, Val>,
) -> Result<MemoryWriteUnconstrainedStruct> {
    // MemoryWriteUnconstrained(zirgen/circuit/rv32im/v2/dsl/mem.zir:105)
    let x3: MemoryIOStruct = exec_memory_io(ctx, arg0, arg1, (layout2.map(|c| c.io)))?;
    // MemoryWriteUnconstrained(zirgen/circuit/rv32im/v2/dsl/mem.zir:106)
    let x4: IsForwardStruct = exec_is_forward(ctx, &x3, (layout2.map(|c| c._0)))?;
    return Ok(MemoryWriteUnconstrainedStruct {});
}
pub fn exec_memory_page_in<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, MemoryPageInLayout, Val>,
) -> Result<GetDataStruct> {
    // MemoryPageIn(zirgen/circuit/rv32im/v2/dsl/mem.zir:112)
    let x3: MemoryIOStruct = exec_memory_io(ctx, arg0, arg1, (layout2.map(|c| c.io)))?;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:78)
    // MemoryPageIn(zirgen/circuit/rv32im/v2/dsl/mem.zir:113)
    let x4: MemoryArgStruct = x3.old_txn;
    let x5: MemoryArgStruct = x3.new_txn;
    let x6: Val = x5.data_low._super;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:79)
    let x7: Val = (x4.data_low._super - x6);
    eqz!(x7, "loc(callsite( IsRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :79:22) at  MemoryPageIn ( zirgen/circuit/rv32im/v2/dsl/mem.zir :113:10)))");
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:78)
    let x8: Val = x5.data_high._super;
    // IsRead(zirgen/circuit/rv32im/v2/dsl/mem.zir:80)
    let x9: Val = (x4.data_high._super - x8);
    eqz!(x9, "loc(callsite( IsRead ( zirgen/circuit/rv32im/v2/dsl/mem.zir :80:23) at  MemoryPageIn ( zirgen/circuit/rv32im/v2/dsl/mem.zir :113:10)))");
    // MemoryPageIn(zirgen/circuit/rv32im/v2/dsl/mem.zir:114)
    let x10: Val = (x5.cycle._super - x4.cycle._super);
    return Ok(GetDataStruct {
        _super: ValU32Struct { low: x6, high: x8 },
        diff_low: Val::new(0),
        diff_high: x10,
    });
}
pub fn exec_memory_page_out<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, MemoryPageOutLayout, Val>,
) -> Result<GetDataStruct> {
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:120)
    let x3: MemoryIOStruct = exec_memory_io(ctx, arg0, arg1, (layout2.map(|c| c.io)))?;
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:121)
    let x4: IsForwardStruct = exec_is_forward(ctx, &x3, (layout2.map(|c| c._0)))?;
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:120)
    let x5: MemoryArgStruct = x3.old_txn;
    let x6: MemoryArgStruct = x3.new_txn;
    let x7: Val = x5.data_low._super;
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:122)
    let x8: Val = (x6.data_low._super - x7);
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:120)
    let x9: Val = x5.data_high._super;
    // MemoryPageOut(zirgen/circuit/rv32im/v2/dsl/mem.zir:123)
    let x10: Val = (x6.data_high._super - x9);
    return Ok(GetDataStruct {
        _super: ValU32Struct { low: x7, high: x9 },
        diff_low: x8,
        diff_high: x10,
    });
}
pub fn exec_one_hot_3_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, OneHot_3_Layout, Val>,
) -> Result<OneHot_3_Struct> {
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:7)
    let x2: NondetRegStruct3Array = map_layout(
        [Val::new(0), Val::new(1), Val::new(2)],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            let x5: NondetRegStruct = exec_nondet_bit_reg(ctx, isz((x3 - arg0))?, x4)?;
            return Ok(x5);
        },
    )?;
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)
    let x6: Val = x2[to_usize(Val::new(1))]._super;
    let x7: Val = (x2[to_usize(Val::new(0))]._super + x6);
    let x8: Val = x2[to_usize(Val::new(2))]._super;
    eqz!(
        ((x7 + x8) - Val::new(1)),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)"
    );
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)
    eqz!(
        ((x6 + (x8 * Val::new(2))) - arg0),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)"
    );
    return Ok(OneHot_3_Struct { _super: x2 });
}
pub fn exec_memory_get<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    arg2: &OneHot_3_Struct,
    layout3: BoundLayout<'a, MemoryGetLayout, Val>,
) -> Result<GetDataStruct> {
    // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:128)
    let x4: BoundLayout<MemoryGet_SuperLayout, _> = (layout3.map(|c| c._super));
    // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:127)
    let x5: NondetRegStruct3Array = arg2._super;
    // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:128)
    let x6: BoundLayout<MemoryGet_SuperArm1Layout, _> = (x4.map(|c| c.arm1));
    let x7: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x8: GetDataStruct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:129)
        let x9: GetDataStruct = exec_memory_read(ctx, arg0, arg1, (x4.map(|c| c.arm0)))?;
        x8 = x9;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:130)
        let x10: GetDataStruct = exec_memory_page_in(ctx, arg0, arg1, (x6.map(|c| c._super)))?;
        // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:128)
        x7.store(ctx, Val::new(0));
        eqz!(
            x7.load(ctx, 0),
            "MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:128)"
        );
        x8 = x10;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // MemoryGet(zirgen/circuit/rv32im/v2/dsl/mem.zir:131)
        let x11: GetDataStruct = exec_memory_page_out(ctx, arg0, arg1, (x4.map(|c| c.arm2)))?;
        x8 = x11;
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x8);
}
pub fn exec_one_hot_8_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, OneHot_8_Layout, Val>,
) -> Result<OneHot_8_Struct> {
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:7)
    let x2: NondetRegStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            let x5: NondetRegStruct = exec_nondet_bit_reg(ctx, isz((x3 - arg0))?, x4)?;
            return Ok(x5);
        },
    )?;
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)
    let x6: Val = x2[to_usize(Val::new(1))]._super;
    let x7: Val = (x2[to_usize(Val::new(0))]._super + x6);
    let x8: Val = x2[to_usize(Val::new(2))]._super;
    let x9: Val = x2[to_usize(Val::new(3))]._super;
    let x10: Val = x2[to_usize(Val::new(4))]._super;
    let x11: Val = (((x7 + x8) + x9) + x10);
    let x12: Val = x2[to_usize(Val::new(5))]._super;
    let x13: Val = x2[to_usize(Val::new(6))]._super;
    let x14: Val = x2[to_usize(Val::new(7))]._super;
    let x15: Val = (((x11 + x12) + x13) + x14);
    eqz!(
        (x15 - Val::new(1)),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)"
    );
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)
    let x16: Val = (((x6 + (x8 * Val::new(2))) + (x9 * Val::new(3))) + (x10 * Val::new(4)));
    let x17: Val = (((x16 + (x12 * Val::new(5))) + (x13 * Val::new(6))) + (x14 * Val::new(7)));
    eqz!(
        (x17 - arg0),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)"
    );
    return Ok(OneHot_8_Struct {
        _super: x2.clone(),
        bits: x2,
    });
}
pub fn exec_inst_input<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    arg1: Val,
    arg2: Val,
    arg3: &ValU32Struct,
    arg4: Val,
    arg5: Val,
    layout6: BoundLayout<'a, InstInputLayout, Val>,
) -> Result<InstInputStruct> {
    // InstInput(zirgen/circuit/rv32im/v2/dsl/inst.zir:15)
    let x7: OneHot_8_Struct = exec_one_hot_8_(ctx, arg2, (layout6.map(|c| c.minor_onehot)))?;
    return Ok(InstInputStruct {
        pc_u32: arg3.clone(),
        state: arg4,
        mode: arg5,
        minor_onehot: x7,
    });
}
pub fn exec_decode_inst<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, DecodeInstLayout, Val>,
) -> Result<DecoderStruct> {
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:18)
    let x3: Val = arg0._super._super;
    // GetDiffCount(zirgen/circuit/rv32im/v2/dsl/mem.zir:22)
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:20)
    let x4: Val = invoke_extern!(ctx, get_diff_count, x3);
    let x5: CycleArgStruct = exec_cycle_arg(ctx, neg_0(x4)?, x3, (layout2.map(|c| c.arg)))?;
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:22)
    let x6: Val = (x5.cycle._super - x3);
    eqz!(x6, "DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:22)");
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:24)
    let x7: AddrDecomposeStruct =
        exec_addr_decompose(ctx, &arg1.pc_u32, arg1.mode, (layout2.map(|c| c.pc_addr)))?;
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:26)
    eqz!(
        x7.low2._super,
        "DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:26)"
    );
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:28)
    let x8: GetDataStruct = exec_memory_read(ctx, arg0, x7._super, (layout2.map(|c| c.load_inst)))?;
    // DecodeInst(zirgen/circuit/rv32im/v2/dsl/inst.zir:30)
    let x9: DecoderStruct = exec_decoder(ctx, &x8._super, (layout2.map(|c| c._super)))?;
    return Ok(x9);
}
pub fn exec_read_reg<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    arg2: Val,
    layout3: BoundLayout<'a, ReadRegLayout, Val>,
) -> Result<GetDataStruct> {
    // ReadReg(zirgen/circuit/rv32im/v2/dsl/inst.zir:33)
    let x4: Val = arg1.mode;
    // ReadReg(zirgen/circuit/rv32im/v2/dsl/inst.zir:34)
    let x5: Val = ((Val::new(1) - x4) * Val::new(1073725472));
    let x6: Val = (((x4 * Val::new(1073725440)) + x5) + arg2);
    let x7: RegStruct = exec_reg(ctx, x6, (layout3.map(|c| c.addr)))?;
    // ReadReg(zirgen/circuit/rv32im/v2/dsl/inst.zir:35)
    let x8: GetDataStruct =
        exec_memory_read(ctx, arg0, x7._super._super, (layout3.map(|c| c._super)))?;
    return Ok(x8);
}
pub fn exec_write_rd<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    arg2: &DecoderStruct,
    arg3: Val,
    arg4: &ValU32Struct,
    layout5: BoundLayout<'a, WriteRdLayout, Val>,
) -> Result<WriteRdStruct> {
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:38)
    let x6: Val = arg2.rd;
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:39)
    let x7: NondetRegStruct = exec_is_zero(ctx, x6, (layout5.map(|c| c.is_rd0)))?;
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:40)
    let x8: Val = ((Val::new(1) - x7._super) * arg3);
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:38)
    let x9: Val = arg1.mode;
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:42)
    let x10: Val = ((Val::new(1) - x9) * Val::new(1073725472));
    let x11: Val = ((Val::new(1) - x8) * Val::new(64));
    let x12: Val = (((x9 * Val::new(1073725440)) + x10) + x11);
    let x13: RegStruct = exec_reg(ctx, (x12 + (x8 * x6)), (layout5.map(|c| c.write_addr)))?;
    // WriteRd(zirgen/circuit/rv32im/v2/dsl/inst.zir:43)
    let x14: MemoryWriteStruct =
        exec_memory_write(ctx, arg0, x13._super._super, arg4, (layout5.map(|c| c._0)))?;
    return Ok(WriteRdStruct {});
}
pub fn exec_expand_u32<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: Val,
    layout2: BoundLayout<'a, ExpandU32Layout, Val>,
) -> Result<ExpandU32Struct> {
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:49)
    let x3: Val = arg0.low;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:50)
    let x4: NondetRegStruct =
        exec_nondet_u8_reg(ctx, bit_and(x3, Val::new(255))?, (layout2.map(|c| c.b0)))?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:51)
    let x5: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(x3, Val::new(65280))? * Val::new(2005401601)),
        (layout2.map(|c| c.b1)),
    )?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:49)
    let x6: Val = arg0.high;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:52)
    let x7: NondetRegStruct =
        exec_nondet_u8_reg(ctx, bit_and(x6, Val::new(255))?, (layout2.map(|c| c.b2)))?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:53)
    let x8: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(x6, Val::new(65280))? * Val::new(2005401601)),
        (layout2.map(|c| c.b3)),
    )?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:59)
    let x9: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(x6, Val::new(32512))? * Val::new(1997537281)),
        (layout2.map(|c| c.b3_top7times2)),
    )?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:60)
    let x10: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x6, Val::new(32768))? * Val::new(2013204481)),
        (layout2.map(|c| c.top_bit)),
    )?;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:62)
    let x11: Val = (x4._super + (x5._super * Val::new(256)));
    eqz!(
        (x3 - x11),
        "ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:62)"
    );
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:59)
    let x12: Val = x9._super;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:60)
    let x13: Val = x10._super;
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:63)
    let x14: Val = ((x7._super + (x12 * Val::new(128))) + (x13 * Val::new(32768)));
    eqz!(
        (x6 - x14),
        "ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:63)"
    );
    // ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:67)
    let x15: Val = (x8._super - ((x12 * Val::new(1006632961)) + (x13 * Val::new(128))));
    eqz!(x15, "ExpandU32(zirgen/circuit/rv32im/v2/dsl/mult.zir:67)");
    return Ok(ExpandU32Struct {
        b0: x4,
        b1: x5,
        b2: x7,
        b3: x8,
        neg: (x13 * arg1),
    });
}
pub fn exec_split_total<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, SplitTotalLayout, Val>,
) -> Result<SplitTotalStruct> {
    // SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:97)
    let x2: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        bit_and(arg0, Val::new(65535))?,
        (layout1.map(|c| c.out)),
    )?;
    // SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:98)
    let x3: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(arg0, Val::new(16711680))? * Val::new(2013235201)),
        (layout1.map(|c| c.carry_byte)),
    )?;
    // SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:99)
    let x4: NondetFakeTwitRegStruct = exec_nondet_fake_twit_reg(
        ctx,
        (bit_and(arg0, Val::new(251658240))? * Val::new(2013265801)),
        (layout1.map(|c| c.carry_extra)),
    )?;
    let x5: Val = x4._super;
    // SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:98)
    let x6: Val = x3._super;
    // SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:100)
    let x7: Val = (((x5 * Val::new(16777216)) + (x6 * Val::new(65536))) + x2._super);
    eqz!(
        (arg0 - x7),
        "SplitTotal(zirgen/circuit/rv32im/v2/dsl/mult.zir:100)"
    );
    return Ok(SplitTotalStruct {
        out: x2,
        carry: ((x5 * Val::new(256)) + x6),
    });
}
pub fn exec_multiply_accumulate<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    arg2: &ValU32Struct,
    arg3: &MultiplySettingsStruct,
    layout4: BoundLayout<'a, MultiplyAccumulateLayout, Val>,
) -> Result<MultiplyAccumulateStruct> {
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x5: ExpandU32Struct = exec_expand_u32(ctx, arg0, arg3.a_signed, (layout4.map(|c| c.ax)))?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:116)
    let x6: ExpandU32Struct = exec_expand_u32(ctx, arg1, arg3.b_signed, (layout4.map(|c| c.bx)))?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:113)
    let x7: Val = arg2.high;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:118)
    let x8: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x7, Val::new(32768))? * Val::new(2013204481)),
        (layout4.map(|c| c.c_sign)),
    )?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:119)
    let x9: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        (bit_and(x7, Val::new(32767))? * Val::new(2)),
        (layout4.map(|c| c.c_rest_times2)),
    )?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:118)
    let x10: Val = x8._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:120)
    let x11: Val = ((x10 * Val::new(32768)) + (x9._super * Val::new(1006632961)));
    eqz!(
        (x7 - x11),
        "MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:120)"
    );
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x12: Val = x5.b0._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:116)
    let x13: Val = x6.b0._super;
    let x14: Val = x6.b1._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x15: Val = x5.b1._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:125)
    let x16: Val = (((x12 * x14) + (x15 * x13)) * Val::new(256));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:124)
    let x17: Val = ((arg2.low + (x12 * x13)) + x16);
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:122)
    let x18: SplitTotalStruct = exec_split_total(ctx, x17, (layout4.map(|c| c.s0)))?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:116)
    let x19: Val = x6.b2._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:131)
    let x20: Val = (((x7 + x18.carry) + (x12 * x19)) + (x15 * x14));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x21: Val = x5.b2._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:116)
    let x22: Val = x6.b3._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:132)
    let x23: Val = (((x12 * x22) + (x15 * x19)) + (x21 * x14));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x24: Val = x5.b3._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:131)
    let x25: Val = ((x20 + (x21 * x13)) + ((x23 + (x24 * x13)) * Val::new(256)));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:128)
    let x26: SplitTotalStruct = exec_split_total(ctx, x25, (layout4.map(|c| c.s1)))?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:138)
    let x27: Val = ((x10 * Val::new(65535)) * arg3.c_signed);
    let x28: Val = ((x26.carry + x27) + Val::new(131072));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:116)
    let x29: Val = x6.neg;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:115)
    let x30: Val = x5.neg;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:139)
    let x31: Val =
        ((x28 - ((x12 + (x15 * Val::new(256))) * x29)) - ((x13 + (x14 * Val::new(256))) * x30));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:140)
    let x32: Val = (((x31 + (x15 * x22)) + (x21 * x19)) + (x24 * x14));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:141)
    let x33: Val = (((x21 * x22) + (x24 * x19)) * Val::new(256));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:136)
    let x34: SplitTotalStruct = exec_split_total(ctx, (x32 + x33), (layout4.map(|c| c.s2)))?;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:147)
    let x35: Val = ((x34.carry + x27) + Val::new(131070));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:148)
    let x36: Val =
        ((x35 - ((x21 + (x24 * Val::new(256))) * x29)) - ((x19 + (x22 * Val::new(256))) * x30));
    let x37: Val = (x36 + (x24 * x22));
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:150)
    let x38: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        bit_and(x37, Val::new(65535))?,
        (layout4.map(|c| c.s3_out)),
    )?;
    let x39: Val = x38._super;
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:151)
    let x40: FakeTwitRegStruct = exec_fake_twit_reg(
        ctx,
        ((x37 - x39) * Val::new(2013235201)),
        (layout4.map(|c| c.s3_carry)),
    )?;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:152)
    let x41: ValU32Struct = ValU32Struct {
        low: x18.out._super,
        high: x26.out._super,
    };
    // MultiplyAccumulate(zirgen/circuit/rv32im/v2/dsl/mult.zir:153)
    let x42: ValU32Struct = ValU32Struct {
        low: x34.out._super,
        high: x39,
    };
    return Ok(MultiplyAccumulateStruct {
        out_low: x41,
        out_high: x42,
    });
}
pub fn exec_div_input<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, DivInputLayout, Val>,
) -> Result<DivInputStruct> {
    // DivInput(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:8)
    eqz!(
        (arg1.state - Val::new(32)),
        "DivInput(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:8)"
    );
    // DivInput(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:10)
    let x3: DecoderStruct = exec_decode_inst(ctx, arg0, arg1, (layout2.map(|c| c.decoded)))?;
    // DivInput(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:11)
    let x4: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs1, (layout2.map(|c| c.rs1)))?;
    // DivInput(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:12)
    let x5: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs2, (layout2.map(|c| c.rs2)))?;
    return Ok(DivInputStruct {
        _super: arg1.clone(),
        ii: arg1.clone(),
        decoded: x3,
        rs1: x4,
        rs2: x5,
    });
}
pub fn exec_do_div<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    arg2: Val,
    arg3: Val,
    layout4: BoundLayout<'a, DoDivLayout, Val>,
) -> Result<DoDivStruct> {
    // Divide(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:43)
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:47)
    let x5: Val = arg0.low;
    let x6: Val = arg0.high;
    let (x7, x8, x9, x10) = invoke_extern!(
        ctx,
        divide,
        x5,
        x6,
        arg1.low,
        arg1.high,
        (arg2 + (arg3 * Val::new(2)))
    );
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:50)
    let x11: NondetRegStruct = exec_nondet_reg(ctx, x7, (layout4.map(|c| c.quot_low)))?;
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:51)
    let x12: NondetRegStruct = exec_nondet_reg(ctx, x8, (layout4.map(|c| c.quot_high)))?;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:52)
    let x13: ValU32Struct = ValU32Struct {
        low: x11._super,
        high: x12._super,
    };
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:54)
    let x14: NondetRegStruct = exec_nondet_u16_reg(ctx, x9, (layout4.map(|c| c.rem_low)))?;
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:55)
    let x15: NondetRegStruct = exec_nondet_u16_reg(ctx, x10, (layout4.map(|c| c.rem_high)))?;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:56)
    let x16: ValU32Struct = ValU32Struct {
        low: x14._super,
        high: x15._super,
    };
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:60)
    let x17: MultiplyAccumulateStruct = exec_multiply_accumulate(
        ctx,
        &x13,
        arg1,
        &x16,
        &MultiplySettingsStruct {
            a_signed: arg2,
            b_signed: arg2,
            c_signed: arg2,
        },
        (layout4.map(|c| c.mul)),
    )?;
    let x18: ValU32Struct = x17.out_low;
    // AssertEqU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:106)
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:62)
    eqz!((x18.low - x5), "loc(callsite( AssertEqU32 ( zirgen/circuit/rv32im/v2/dsl/u32.zir :106:10) at  DoDiv ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :62:15)))");
    // AssertEqU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:107)
    eqz!((x18.high - x6), "loc(callsite( AssertEqU32 ( zirgen/circuit/rv32im/v2/dsl/u32.zir :107:11) at  DoDiv ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :62:15)))");
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:60)
    let x19: ValU32Struct = x17.out_high;
    let x20: Val = x19.low;
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:64)
    let x21: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (Val::new(1) - isz(x20)?),
        (layout4.map(|c| c.top_bit_type)),
    )?;
    // DoDiv(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:65)
    let x22: Val = (x21._super * Val::new(65535));
    // AssertEqU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:106)
    eqz!((x20 - x22), "loc(callsite( AssertEqU32 ( zirgen/circuit/rv32im/v2/dsl/u32.zir :106:10) at  DoDiv ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :65:15)))");
    // AssertEqU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:107)
    eqz!((x19.high - x22), "loc(callsite( AssertEqU32 ( zirgen/circuit/rv32im/v2/dsl/u32.zir :107:11) at  DoDiv ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :65:15)))");
    return Ok(DoDivStruct {
        quot: x13,
        rem: x16,
    });
}
pub fn exec_op_srl<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpSRLLayout, Val>,
) -> Result<ValU32Struct> {
    // OpSRL(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:84)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSRL(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:85)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSRL ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :85:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSRL ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :85:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSRL ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :85:20)))");
    // OpSRL(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:84)
    let x4: Val = arg0.rs2._super.low;
    // OpSRL(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:86)
    let x5: ValU32Struct = exec_dyn_po2(ctx, x4, (layout1.map(|c| c.shift_mul)))?;
    // OpSRL(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:87)
    let x6: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &x5,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x6.quot);
}
pub fn exec_top_bit<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    layout1: BoundLayout<'a, TopBitLayout, Val>,
) -> Result<NondetRegStruct> {
    // TopBit(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:69)
    let x2: Val = arg0.high;
    // TopBit(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:70)
    let x3: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x2, Val::new(32768))? * Val::new(2013204481)),
        (layout1.map(|c| c._super)),
    )?;
    // TopBit(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:71)
    let x4: Val = (x3._super * Val::new(32768));
    let x5: NondetRegStruct =
        exec_nondet_u16_reg(ctx, ((x2 - x4) * Val::new(2)), (layout1.map(|c| c.rest)))?;
    // TopBit(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:72)
    let x6: Val = ((x5._super * Val::new(1006632961)) + x4);
    eqz!(
        (x2 - x6),
        "TopBit(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:72)"
    );
    return Ok(x3);
}
pub fn exec_op_sra<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpSRALayout, Val>,
) -> Result<ValU32Struct> {
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:90)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:91)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSRA ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :91:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSRA ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :91:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(32)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSRA ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :91:20)))");
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:90)
    let x4: Val = arg0.rs2._super.low;
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:92)
    let x5: ValU32Struct = exec_dyn_po2(ctx, x4, (layout1.map(|c| c.shift_mul)))?;
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:90)
    let x6: ValU32Struct = arg0.rs1._super;
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:93)
    let x7: NondetRegStruct = exec_top_bit(ctx, &x6, (layout1.map(|c| c.flip)))?;
    let x8: Val = x7._super;
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:94)
    let x9: Val = x6.low;
    // FlipU16(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:77)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x10: Val = (Val::new(1) - x8);
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    let x11: Val = x6.high;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x12: ValU32Struct = ValU32Struct {
        low: ((x8 * (Val::new(65535) - x9)) + (x10 * x9)),
        high: ((x8 * (Val::new(65535) - x11)) + (x10 * x11)),
    };
    let x13: DoDivStruct = exec_do_div(
        ctx,
        &x12,
        &x5,
        Val::new(0),
        Val::new(1),
        (layout1.map(|c| c._0)),
    )?;
    let x14: ValU32Struct = x13.quot;
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    // OpSRA(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:95)
    let x15: Val = x14.low;
    let x16: Val = x14.high;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x17: ValU32Struct = ValU32Struct {
        low: ((x8 * (Val::new(65535) - x15)) + (x10 * x15)),
        high: ((x8 * (Val::new(65535) - x16)) + (x10 * x16)),
    };
    return Ok(x17);
}
pub fn exec_op_srli<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpSRLILayout, Val>,
) -> Result<ValU32Struct> {
    // OpSRLI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:98)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSRLI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:99)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSRLI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :99:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSRLI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :99:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSRLI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :99:20)))");
    // OpSRLI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:100)
    let x4: ValU32Struct = exec_dyn_po2(ctx, x2.rs2, (layout1.map(|c| c.shift_mul)))?;
    // OpSRLI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:101)
    let x5: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &x4,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x5.quot);
}
pub fn exec_op_srai<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpSRAILayout, Val>,
) -> Result<ValU32Struct> {
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:104)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:105)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSRAI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :105:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSRAI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :105:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(32)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSRAI ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :105:20)))");
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:106)
    let x4: ValU32Struct = exec_dyn_po2(ctx, x2.rs2, (layout1.map(|c| c.shift_mul)))?;
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:104)
    let x5: ValU32Struct = arg0.rs1._super;
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:107)
    let x6: NondetRegStruct = exec_top_bit(ctx, &x5, (layout1.map(|c| c.flip)))?;
    let x7: Val = x6._super;
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:108)
    let x8: Val = x5.low;
    // FlipU16(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:77)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x9: Val = (Val::new(1) - x7);
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    let x10: Val = x5.high;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x11: ValU32Struct = ValU32Struct {
        low: ((x7 * (Val::new(65535) - x8)) + (x9 * x8)),
        high: ((x7 * (Val::new(65535) - x10)) + (x9 * x10)),
    };
    let x12: DoDivStruct = exec_do_div(
        ctx,
        &x11,
        &x4,
        Val::new(0),
        Val::new(1),
        (layout1.map(|c| c._0)),
    )?;
    let x13: ValU32Struct = x12.quot;
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:80)
    // OpSRAI(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:109)
    let x14: Val = x13.low;
    let x15: Val = x13.high;
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // FlipU32(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:81)
    let x16: ValU32Struct = ValU32Struct {
        low: ((x7 * (Val::new(65535) - x14)) + (x9 * x14)),
        high: ((x7 * (Val::new(65535) - x15)) + (x9 * x15)),
    };
    return Ok(x16);
}
pub fn exec_op_div<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpDIVLayout, Val>,
) -> Result<ValU32Struct> {
    // OpDIV(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:112)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpDIV(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:113)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpDIV ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :113:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(4)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpDIV ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :113:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpDIV ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :113:20)))");
    // OpDIV(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:114)
    let x4: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(1),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.quot);
}
pub fn exec_op_divu<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpDIVULayout, Val>,
) -> Result<ValU32Struct> {
    // OpDIVU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:117)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpDIVU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:118)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpDIVU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :118:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpDIVU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :118:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpDIVU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :118:20)))");
    // OpDIVU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:119)
    let x4: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.quot);
}
pub fn exec_op_rem<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpREMLayout, Val>,
) -> Result<ValU32Struct> {
    // OpREM(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:122)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpREM(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:123)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpREM ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :123:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(6)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpREM ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :123:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpREM ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :123:20)))");
    // OpREM(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:124)
    let x4: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(1),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.rem);
}
pub fn exec_op_remu<'a>(
    ctx: &'a ExecContext,
    arg0: &DivInputStruct,
    layout1: BoundLayout<'a, OpREMULayout, Val>,
) -> Result<ValU32Struct> {
    // OpREMU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:127)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpREMU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:128)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpREMU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :128:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(7)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpREMU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :128:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpREMU ( zirgen/circuit/rv32im/v2/dsl/inst_div.zir :128:20)))");
    // OpREMU(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:129)
    let x4: DoDivStruct = exec_do_div(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.rem);
}
pub fn exec_div0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Div0Layout, Val>,
) -> Result<InstOutputStruct> {
    // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
    let x3: BoundLayout<Div0MulOutputLayout, _> = (layout2.map(|c| c.mul_output));
    // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:22)
    let x4: DivInputStruct = exec_div_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    let x5: NondetRegStruct8Array = x4._super.minor_onehot._super;
    // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
    let x6: BoundLayout<Div0MulOutputArm0Layout, _> = (x3.map(|c| c.arm0));
    let x7: BoundLayout<Div0MulOutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x8: BoundLayout<Div0MulOutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x9: BoundLayout<Div0MulOutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x10: BoundLayout<Div0MulOutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x11: BoundLayout<Div0MulOutputArm7Layout, _> = (x3.map(|c| c.arm7));
    let x12: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x22: ValU32Struct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:24)
        let x23: ValU32Struct = exec_op_srl(ctx, &x4, (x6.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x23;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:25)
        let x24: ValU32Struct = exec_op_sra(ctx, &x4, (x3.map(|c| c.arm1)))?;
        x22 = x24;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:26)
        let x25: ValU32Struct = exec_op_srli(ctx, &x4, (x7.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x25;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:27)
        let x26: ValU32Struct = exec_op_srai(ctx, &x4, (x3.map(|c| c.arm3)))?;
        x22 = x26;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:28)
        let x27: ValU32Struct = exec_op_div(ctx, &x4, (x8.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x27;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:29)
        let x28: ValU32Struct = exec_op_divu(ctx, &x4, (x9.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x28;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:30)
        let x29: ValU32Struct = exec_op_rem(ctx, &x4, (x10.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x29;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:31)
        let x30: ValU32Struct = exec_op_remu(ctx, &x4, (x11.map(|c| c._super)))?;
        // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:23)"
        );
        x22 = x30;
    } else {
        bail!("Reached unreachable mux arm")
    } // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:33)
    let x31: WriteRdStruct = exec_write_rd(
        ctx,
        arg0,
        &x4.ii,
        &x4.decoded,
        Val::new(1),
        &x22,
        (layout2.map(|c| c._0)),
    )?;
    // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:21)
    let x32: ValU32Struct = arg1.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // Div0(zirgen/circuit/rv32im/v2/dsl/inst_div.zir:34)
    let x33: DenormedValU32Struct = DenormedValU32Struct {
        low: (x32.low + Val::new(4)),
        high: x32.high,
    };
    let x34: NormalizeU32Struct = exec_normalize_u32(ctx, &x33, (layout2.map(|c| c.pc_add)))?;
    return Ok(InstOutputStruct {
        new_pc: x34._super,
        new_state: Val::new(32),
        new_mode: arg1.mode,
    });
}
pub fn exec_misc_input<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, MiscInputLayout, Val>,
) -> Result<MiscInputStruct> {
    // MiscInput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:7)
    eqz!(
        (arg1.state - Val::new(32)),
        "MiscInput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:7)"
    );
    // MiscInput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:9)
    let x3: DecoderStruct = exec_decode_inst(ctx, arg0, arg1, (layout2.map(|c| c.decoded)))?;
    // MiscInput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:10)
    let x4: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs1, (layout2.map(|c| c.rs1)))?;
    // MiscInput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:11)
    let x5: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs2, (layout2.map(|c| c.rs2)))?;
    return Ok(MiscInputStruct {
        _super: arg1.clone(),
        ii: arg1.clone(),
        decoded: x3,
        rs1: x4,
        rs2: x5,
    });
}
pub fn exec_finalize_misc<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &MiscInputStruct,
    arg2: &MiscOutputStruct,
    layout3: BoundLayout<'a, FinalizeMiscLayout, Val>,
) -> Result<InstOutputStruct> {
    // FinalizeMisc(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:22)
    let x4: NormalizeU32Struct =
        exec_normalize_u32(ctx, &arg2.to_write, (layout3.map(|c| c.write_data)))?;
    // FinalizeMisc(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:23)
    let x5: NormalizeU32Struct =
        exec_normalize_u32(ctx, &arg2.new_pc, (layout3.map(|c| c.pc_norm)))?;
    // FinalizeMisc(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:21)
    let x6: InstInputStruct = arg1.ii;
    // FinalizeMisc(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:24)
    let x7: WriteRdStruct = exec_write_rd(
        ctx,
        arg0,
        &x6,
        &arg1.decoded,
        arg2.do_write,
        &x4._super,
        (layout3.map(|c| c._0)),
    )?;
    return Ok(InstOutputStruct {
        new_pc: x5._super,
        new_state: Val::new(32),
        new_mode: x6.mode,
    });
}
pub fn exec_op_xor<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpXORLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpXOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:95)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpXOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:96)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpXOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :96:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(4)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpXOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :96:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpXOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :96:20)))");
    // OpXOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:97)
    let x4: ValU32Struct = exec_bitwise_xor(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c._0)),
    )?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_or<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpORLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:100)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:101)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :101:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(6)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :101:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpOR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :101:20)))");
    // OpOR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:102)
    let x4: ValU32Struct = exec_bitwise_or(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c._0)),
    )?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_and<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpANDLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpAND(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:105)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpAND(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:106)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpAND ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :106:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(7)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpAND ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :106:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpAND ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :106:20)))");
    // OpAND(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:107)
    let x4: ValU32Struct = exec_bitwise_and(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c._0)),
    )?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_slt<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpSLTLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpSLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:110)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:111)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSLT ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :111:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(2)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSLT ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :111:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSLT ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :111:20)))");
    // OpSLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:112)
    let x4: CmpLessThanStruct = exec_cmp_less_than(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_less_than._super._super;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    // OpSLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:113)
    let x6: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x7: DenormedValU32Struct = DenormedValU32Struct {
        low: (x6.low + Val::new(4)),
        high: x6.high,
    };
    return Ok(MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x5,
            high: Val::new(0),
        },
        new_pc: x7,
    });
}
pub fn exec_op_sltu<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpSLTULayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpSLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:116)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:117)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSLTU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :117:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(3)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSLTU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :117:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSLTU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :117:20)))");
    // OpSLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:118)
    let x4: CmpLessThanUnsignedStruct = exec_cmp_less_than_unsigned(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    // OpSLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:119)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.is_less_than,
            high: Val::new(0),
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_misc0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Misc0Layout, Val>,
) -> Result<InstOutputStruct> {
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
    let x3: BoundLayout<Misc0MiscOutputLayout, _> = (layout2.map(|c| c.misc_output));
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:29)
    let x4: MiscInputStruct = exec_misc_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    let x5: InstInputStruct = x4._super;
    let x6: NondetRegStruct8Array = x5.minor_onehot._super;
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
    let x7: BoundLayout<Misc0MiscOutputArm0Layout, _> = (x3.map(|c| c.arm0));
    let x8: BoundLayout<Misc0MiscOutputArm1Layout, _> = (x3.map(|c| c.arm1));
    let x9: BoundLayout<Misc0MiscOutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x10: BoundLayout<Misc0MiscOutputArm3Layout, _> = (x3.map(|c| c.arm3));
    let x11: BoundLayout<Misc0MiscOutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x12: BoundLayout<Misc0MiscOutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x13: BoundLayout<Misc0MiscOutputArm7Layout, _> = (x3.map(|c| c.arm7));
    // OpADD(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:85)
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:31)
    let x14: DecoderStruct = x4.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:61)
    // OpADD(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:86)
    let x15: Val = x14.opcode._super;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    let x16: Val = (x15 - Val::new(51));
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:61)
    let x17: Val = x14.func3;
    let x18: Val = x14.func7;
    // OpADD(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:85)
    let x19: ValU32Struct = x4.rs1._super;
    let x20: ValU32Struct = x4.rs2._super;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // OpADD(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:87)
    let x21: Val = x19.low;
    let x22: Val = x20.low;
    let x23: Val = x19.high;
    let x24: Val = x20.high;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x25: ValU32Struct = x5.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x26: DenormedValU32Struct = DenormedValU32Struct {
        low: (x25.low + Val::new(4)),
        high: x25.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x27: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: (x21 + x22),
            high: (x23 + x24),
        },
        new_pc: x26.clone(),
    };
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
    let x28: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x7.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x7.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // SubU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:33)
    // OpSUB(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:92)
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:32)
    let x33: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x21 + Val::new(65536)) - x22),
        high: ((x23 + Val::new(65535)) - x24),
    };
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
    let x34: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x8.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x8.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x9.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x49: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x55: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x56: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    // OpADDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:122)
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:38)
    let x57: ValU32Struct = x14.imm_i;
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    // OpADDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:124)
    let x58: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: (x21 + x57.low),
            high: (x23 + x57.high),
        },
        new_pc: x26.clone(),
    };
    // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
    let x59: BoundLayout<Reg, _> = (((x13.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x60: BoundLayout<Reg, _> = (((x13.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x61: BoundLayout<Reg, _> = (((x13.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x62: BoundLayout<Reg, _> = (((x13.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x63: BoundLayout<Reg, _> = (((x13.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x64: MiscOutputStruct;
    if is_true(x6[to_usize(Val::new(0))]._super) {
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
        // OpADD(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:86)
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:31)
        eqz!(x16, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at callsite( OpADD ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :86:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :31:11))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
        eqz!(x17, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at callsite( OpADD ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :86:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :31:11))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
        eqz!(x18, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at callsite( OpADD ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :86:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :31:11))))");
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x27;
    } else if is_true(x6[to_usize(Val::new(1))]._super) {
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
        // OpSUB(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:91)
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:32)
        eqz!(x16, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at callsite( OpSUB ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :91:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :32:11))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
        eqz!(x17, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at callsite( OpSUB ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :91:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :32:11))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
        eqz!((x18 - Val::new(32)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at callsite( OpSUB ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :91:20) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :32:11))))");
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = MiscOutputStruct {
            do_write: Val::new(1),
            to_write: x33,
            new_pc: x26,
        };
    } else if is_true(x6[to_usize(Val::new(2))]._super) {
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:33)
        let x65: MiscOutputStruct = exec_op_xor(ctx, &x4, (x9.map(|c| c._super)))?;
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x65;
    } else if is_true(x6[to_usize(Val::new(3))]._super) {
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:34)
        let x66: MiscOutputStruct = exec_op_or(ctx, &x4, (x10.map(|c| c._super)))?;
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x66;
    } else if is_true(x6[to_usize(Val::new(4))]._super) {
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:35)
        let x67: MiscOutputStruct = exec_op_and(ctx, &x4, (x11.map(|c| c._super)))?;
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x67;
    } else if is_true(x6[to_usize(Val::new(5))]._super) {
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:36)
        let x68: MiscOutputStruct = exec_op_slt(ctx, &x4, (x3.map(|c| c.arm5)))?;
        x64 = x68;
    } else if is_true(x6[to_usize(Val::new(6))]._super) {
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:37)
        let x69: MiscOutputStruct = exec_op_sltu(ctx, &x4, (x12.map(|c| c._super)))?;
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x55.store(ctx, Val::new(0));
        eqz!(
            x55.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x56.store(ctx, Val::new(0));
        eqz!(
            x56.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x69;
    } else if is_true(x6[to_usize(Val::new(7))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpADDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:123)
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:38)
        eqz!((x15 - Val::new(19)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpADDI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :123:18) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :38:12))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!(x17, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpADDI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :123:18) at  Misc0 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :38:12))))");
        // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)
        x59.store(ctx, Val::new(0));
        eqz!(
            x59.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x60.store(ctx, Val::new(0));
        eqz!(
            x60.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x61.store(ctx, Val::new(0));
        eqz!(
            x61.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x62.store(ctx, Val::new(0));
        eqz!(
            x62.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x63.store(ctx, Val::new(0));
        eqz!(
            x63.load(ctx, 0),
            "Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:30)"
        );
        x64 = x58;
    } else {
        bail!("Reached unreachable mux arm")
    } // Misc0(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:40)
    let x70: InstOutputStruct =
        exec_finalize_misc(ctx, arg0, &x4, &x64, (layout2.map(|c| c._super)))?;
    return Ok(x70);
}
pub fn exec_op_xori<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpXORILayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpXORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:127)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpXORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:128)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpXORI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :128:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(4)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpXORI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :128:18)))");
    // OpXORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:129)
    let x4: ValU32Struct =
        exec_bitwise_xor(ctx, &arg0.rs1._super, &x2.imm_i, (layout1.map(|c| c._0)))?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_ori<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpORILayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:132)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:133)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpORI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :133:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(6)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpORI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :133:18)))");
    // OpORI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:134)
    let x4: ValU32Struct =
        exec_bitwise_or(ctx, &arg0.rs1._super, &x2.imm_i, (layout1.map(|c| c._0)))?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_andi<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpANDILayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpANDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:137)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpANDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:138)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpANDI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :138:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(7)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpANDI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :138:18)))");
    // OpANDI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:139)
    let x4: ValU32Struct =
        exec_bitwise_and(ctx, &arg0.rs1._super, &x2.imm_i, (layout1.map(|c| c._0)))?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.low,
            high: x4.high,
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_slti<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpSLTILayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpSLTI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:142)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpSLTI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:143)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpSLTI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :143:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(2)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpSLTI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :143:18)))");
    // OpSLTI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:144)
    let x4: CmpLessThanStruct =
        exec_cmp_less_than(ctx, &arg0.rs1._super, &x2.imm_i, (layout1.map(|c| c.cmp)))?;
    let x5: Val = x4.is_less_than._super._super;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    // OpSLTI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:145)
    let x6: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x7: DenormedValU32Struct = DenormedValU32Struct {
        low: (x6.low + Val::new(4)),
        high: x6.high,
    };
    return Ok(MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x5,
            high: Val::new(0),
        },
        new_pc: x7,
    });
}
pub fn exec_op_sltiu<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpSLTIULayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpSLTIU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:148)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpSLTIU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:149)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpSLTIU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :149:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(3)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpSLTIU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :149:18)))");
    // OpSLTIU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:150)
    let x4: CmpLessThanUnsignedStruct =
        exec_cmp_less_than_unsigned(ctx, &arg0.rs1._super, &x2.imm_i, (layout1.map(|c| c.cmp)))?;
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:73)
    // OpSLTIU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:151)
    let x5: ValU32Struct = arg0._super.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:74)
    let x6: DenormedValU32Struct = DenormedValU32Struct {
        low: (x5.low + Val::new(4)),
        high: x5.high,
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    let x7: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: x4.is_less_than,
            high: Val::new(0),
        },
        new_pc: x6,
    };
    return Ok(x7);
}
pub fn exec_op_beq<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBEQLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBEQ(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:154)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBEQ(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:155)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBEQ ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :155:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!(x2.func3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBEQ ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :155:18)))");
    // OpBEQ(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:156)
    let x4: CmpEqualStruct = exec_cmp_equal(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_equal._super._super;
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    // OpBEQ(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:157)
    let x6: ValU32Struct = arg0._super.pc_u32;
    let x7: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x8: Val = x6.low;
    let x9: Val = x6.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x10: Val = (Val::new(1) - x5);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x11: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x5 * (x8 + x7.low)) + (x10 * (x8 + Val::new(4)))),
        high: ((x5 * (x9 + x7.high)) + (x10 * x9)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x12: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x11,
    };
    return Ok(x12);
}
pub fn exec_op_bne<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBNELayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBNE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:160)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBNE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:161)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBNE ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :161:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(1)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBNE ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :161:18)))");
    // OpBNE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:162)
    let x4: CmpEqualStruct = exec_cmp_equal(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_equal._super._super;
    // OpBNE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:163)
    let x6: Val = (Val::new(1) - x5);
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    let x7: ValU32Struct = arg0._super.pc_u32;
    let x8: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x9: Val = x7.low;
    let x10: Val = x7.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x11: Val = (Val::new(1) - x6);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x12: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x6 * (x9 + x8.low)) + (x11 * (x9 + Val::new(4)))),
        high: ((x6 * (x10 + x8.high)) + (x11 * x10)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x13: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x12,
    };
    return Ok(x13);
}
pub fn exec_op_blt<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBLTLayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:166)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:167)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBLT ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :167:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(4)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBLT ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :167:18)))");
    // OpBLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:168)
    let x4: CmpLessThanStruct = exec_cmp_less_than(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_less_than._super._super;
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    // OpBLT(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:169)
    let x6: ValU32Struct = arg0._super.pc_u32;
    let x7: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x8: Val = x6.low;
    let x9: Val = x6.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x10: Val = (Val::new(1) - x5);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x11: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x5 * (x8 + x7.low)) + (x10 * (x8 + Val::new(4)))),
        high: ((x5 * (x9 + x7.high)) + (x10 * x9)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x12: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x11,
    };
    return Ok(x12);
}
pub fn exec_misc1<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Misc1Layout, Val>,
) -> Result<InstOutputStruct> {
    // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
    let x3: BoundLayout<Misc1MiscOutputLayout, _> = (layout2.map(|c| c.misc_output));
    // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:44)
    let x4: MiscInputStruct = exec_misc_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    let x5: NondetRegStruct8Array = x4._super.minor_onehot._super;
    // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
    let x6: BoundLayout<Misc1MiscOutputArm0Layout, _> = (x3.map(|c| c.arm0));
    let x7: BoundLayout<Misc1MiscOutputArm1Layout, _> = (x3.map(|c| c.arm1));
    let x8: BoundLayout<Misc1MiscOutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x9: BoundLayout<Misc1MiscOutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x10: BoundLayout<Misc1MiscOutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x11: BoundLayout<Misc1MiscOutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x12: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x6.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x6.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x6.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x6.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x7.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x7.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x8.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x8.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x40: MiscOutputStruct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:46)
        let x41: MiscOutputStruct = exec_op_xori(ctx, &x4, (x6.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x41;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:47)
        let x42: MiscOutputStruct = exec_op_ori(ctx, &x4, (x7.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x42;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:48)
        let x43: MiscOutputStruct = exec_op_andi(ctx, &x4, (x8.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x43;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:49)
        let x44: MiscOutputStruct = exec_op_slti(ctx, &x4, (x3.map(|c| c.arm3)))?;
        x40 = x44;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:50)
        let x45: MiscOutputStruct = exec_op_sltiu(ctx, &x4, (x9.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x45;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:51)
        let x46: MiscOutputStruct = exec_op_beq(ctx, &x4, (x10.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x46;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:52)
        let x47: MiscOutputStruct = exec_op_bne(ctx, &x4, (x11.map(|c| c._super)))?;
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:45)"
        );
        x40 = x47;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:53)
        let x48: MiscOutputStruct = exec_op_blt(ctx, &x4, (x3.map(|c| c.arm7)))?;
        x40 = x48;
    } else {
        bail!("Reached unreachable mux arm")
    } // Misc1(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:55)
    let x49: InstOutputStruct =
        exec_finalize_misc(ctx, arg0, &x4, &x40, (layout2.map(|c| c._super)))?;
    return Ok(x49);
}
pub fn exec_op_bge<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBGELayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBGE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:172)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBGE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:173)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBGE ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :173:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(5)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBGE ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :173:18)))");
    // OpBGE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:174)
    let x4: CmpLessThanStruct = exec_cmp_less_than(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_less_than._super._super;
    // OpBGE(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:175)
    let x6: Val = (Val::new(1) - x5);
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    let x7: ValU32Struct = arg0._super.pc_u32;
    let x8: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x9: Val = x7.low;
    let x10: Val = x7.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x11: Val = (Val::new(1) - x6);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x12: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x6 * (x9 + x8.low)) + (x11 * (x9 + Val::new(4)))),
        high: ((x6 * (x10 + x8.high)) + (x11 * x10)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x13: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x12,
    };
    return Ok(x13);
}
pub fn exec_op_bltu<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBLTULayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:178)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:179)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBLTU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :179:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(6)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBLTU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :179:18)))");
    // OpBLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:180)
    let x4: CmpLessThanUnsignedStruct = exec_cmp_less_than_unsigned(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    let x5: Val = x4.is_less_than;
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    // OpBLTU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:181)
    let x6: ValU32Struct = arg0._super.pc_u32;
    let x7: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x8: Val = x6.low;
    let x9: Val = x6.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x10: Val = (Val::new(1) - x5);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x11: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x5 * (x8 + x7.low)) + (x10 * (x8 + Val::new(4)))),
        high: ((x5 * (x9 + x7.high)) + (x10 * x9)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x12: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x11,
    };
    return Ok(x12);
}
pub fn exec_op_bgeu<'a>(
    ctx: &'a ExecContext,
    arg0: &MiscInputStruct,
    layout1: BoundLayout<'a, OpBGEULayout, Val>,
) -> Result<MiscOutputStruct> {
    // OpBGEU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:184)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpBGEU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:185)
    let x3: Val = (x2.opcode._super - Val::new(99));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpBGEU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :185:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(7)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpBGEU ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :185:18)))");
    // OpBGEU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:186)
    let x4: CmpLessThanUnsignedStruct = exec_cmp_less_than_unsigned(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        (layout1.map(|c| c.cmp)),
    )?;
    // OpBGEU(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:187)
    let x5: Val = (Val::new(1) - x4.is_less_than);
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:78)
    let x6: ValU32Struct = arg0._super.pc_u32;
    let x7: ValU32Struct = x2.imm_b;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:80)
    let x8: Val = x6.low;
    let x9: Val = x6.high;
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:101)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:79)
    let x10: Val = (Val::new(1) - x5);
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // CondDenormed(zirgen/circuit/rv32im/v2/dsl/u32.zir:100)
    let x11: DenormedValU32Struct = DenormedValU32Struct {
        low: ((x5 * (x8 + x7.low)) + (x10 * (x8 + Val::new(4)))),
        high: ((x5 * (x9 + x7.high)) + (x10 * x9)),
    };
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // CmpOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:82)
    let x12: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: x11,
    };
    return Ok(x12);
}
pub fn exec_misc2<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Misc2Layout, Val>,
) -> Result<InstOutputStruct> {
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x3: BoundLayout<Misc2MiscOutputLayout, _> = (layout2.map(|c| c.misc_output));
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:59)
    let x4: MiscInputStruct = exec_misc_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    let x5: InstInputStruct = x4._super;
    let x6: NondetRegStruct8Array = x5.minor_onehot._super;
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x7: BoundLayout<Misc2MiscOutputArm1Layout, _> = (x3.map(|c| c.arm1));
    let x8: BoundLayout<Misc2MiscOutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x9: BoundLayout<Misc2MiscOutputArm3Layout, _> = (x3.map(|c| c.arm3));
    let x10: BoundLayout<Misc2MiscOutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x11: BoundLayout<Misc2MiscOutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x12: BoundLayout<Misc2MiscOutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x13: BoundLayout<Misc2MiscOutputArm7Layout, _> = (x3.map(|c| c.arm7));
    let x14: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:190)
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:64)
    let x20: DecoderStruct = x4.decoded;
    // VerifyOpcode(zirgen/circuit/rv32im/v2/dsl/inst.zir:52)
    // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:191)
    let x21: Val = x20.opcode._super;
    // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:190)
    let x22: ValU32Struct = x5.pc_u32;
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:26)
    // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:193)
    let x23: Val = x22.low;
    let x24: Val = x22.high;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    let x25: DenormedValU32Struct = DenormedValU32Struct {
        low: (x23 + Val::new(4)),
        high: x24,
    };
    // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:190)
    let x26: ValU32Struct = x20.imm_j;
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x27: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x9.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:56)
    // OpJALR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:198)
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:65)
    let x32: Val = x20.func3;
    // OpJALR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:197)
    let x33: ValU32Struct = x20.imm_i;
    let x34: ValU32Struct = x4.rs1._super;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // OpJALR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:201)
    let x35: DenormedValU32Struct = DenormedValU32Struct {
        low: (x34.low + x33.low),
        high: (x34.high + x33.high),
    };
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x36: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    // OpLUI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:204)
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:66)
    let x41: ValU32Struct = x20.imm_u;
    // Denorm(zirgen/circuit/rv32im/v2/dsl/u32.zir:37)
    // OpLUI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:206)
    let x42: Val = x41.low;
    let x43: Val = x41.high;
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x44: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // SimpleOp(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:75)
    // OpAUIPC(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:211)
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:67)
    let x49: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(1),
        to_write: DenormedValU32Struct {
            low: (x23 + x42),
            high: (x24 + x43),
        },
        new_pc: x25.clone(),
    };
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x50: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x12.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x12.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    // MiscOutput(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:15)
    // OpECALL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:217)
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:68)
    let x55: MiscOutputStruct = MiscOutputStruct {
        do_write: Val::new(0),
        to_write: DenormedValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_pc: DenormedValU32Struct {
            low: x23,
            high: x24,
        },
    };
    // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
    let x56: BoundLayout<Reg, _> = (((x13.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x57: BoundLayout<Reg, _> = (((x13.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x58: BoundLayout<Reg, _> = (((x13.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x59: BoundLayout<Reg, _> = (((x13.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x60: BoundLayout<Reg, _> = (((x13.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x61: MiscOutputStruct;
    if is_true(x6[to_usize(Val::new(0))]._super) {
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:61)
        let x62: MiscOutputStruct = exec_op_bge(ctx, &x4, (x3.map(|c| c.arm0)))?;
        x61 = x62;
    } else if is_true(x6[to_usize(Val::new(1))]._super) {
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:62)
        let x63: MiscOutputStruct = exec_op_bltu(ctx, &x4, (x7.map(|c| c._super)))?;
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = x63;
    } else if is_true(x6[to_usize(Val::new(2))]._super) {
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:63)
        let x64: MiscOutputStruct = exec_op_bgeu(ctx, &x4, (x8.map(|c| c._super)))?;
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = x64;
    } else if is_true(x6[to_usize(Val::new(3))]._super) {
        // VerifyOpcode(zirgen/circuit/rv32im/v2/dsl/inst.zir:53)
        // OpJAL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:191)
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:64)
        eqz!((x21 - Val::new(111)), "loc(callsite( VerifyOpcode ( zirgen/circuit/rv32im/v2/dsl/inst.zir :53:19) at callsite( OpJAL ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :191:16) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :64:11))))");
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = MiscOutputStruct {
            do_write: Val::new(1),
            to_write: x25.clone(),
            new_pc: DenormedValU32Struct {
                low: (x23 + x26.low),
                high: (x24 + x26.high),
            },
        };
    } else if is_true(x6[to_usize(Val::new(4))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpJALR(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:198)
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:65)
        eqz!((x21 - Val::new(103)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpJALR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :198:18) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :65:12))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!(x32, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpJALR ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :198:18) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :65:12))))");
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = MiscOutputStruct {
            do_write: Val::new(1),
            to_write: x25.clone(),
            new_pc: x35,
        };
    } else if is_true(x6[to_usize(Val::new(5))]._super) {
        // VerifyOpcode(zirgen/circuit/rv32im/v2/dsl/inst.zir:53)
        // OpLUI(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:205)
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:66)
        eqz!((x21 - Val::new(55)), "loc(callsite( VerifyOpcode ( zirgen/circuit/rv32im/v2/dsl/inst.zir :53:19) at callsite( OpLUI ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :205:16) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :66:11))))");
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = MiscOutputStruct {
            do_write: Val::new(1),
            to_write: DenormedValU32Struct {
                low: x42,
                high: x43,
            },
            new_pc: x25,
        };
    } else if is_true(x6[to_usize(Val::new(6))]._super) {
        // VerifyOpcode(zirgen/circuit/rv32im/v2/dsl/inst.zir:53)
        // OpAUIPC(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:210)
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:67)
        eqz!((x21 - Val::new(23)), "loc(callsite( VerifyOpcode ( zirgen/circuit/rv32im/v2/dsl/inst.zir :53:19) at callsite( OpAUIPC ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :210:16) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :67:13))))");
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = x49;
    } else if is_true(x6[to_usize(Val::new(7))]._super) {
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
        // OpECALL(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:216)
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:68)
        eqz!((x21 - Val::new(115)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at callsite( OpECALL ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :216:20) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :68:13))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
        eqz!(x32, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at callsite( OpECALL ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :216:20) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :68:13))))");
        // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
        eqz!(x20.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at callsite( OpECALL ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :216:20) at  Misc2 ( zirgen/circuit/rv32im/v2/dsl/inst_misc.zir :68:13))))");
        // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)
        x56.store(ctx, Val::new(0));
        eqz!(
            x56.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x57.store(ctx, Val::new(0));
        eqz!(
            x57.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x58.store(ctx, Val::new(0));
        eqz!(
            x58.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x59.store(ctx, Val::new(0));
        eqz!(
            x59.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x60.store(ctx, Val::new(0));
        eqz!(
            x60.load(ctx, 0),
            "Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:60)"
        );
        x61 = x55;
    } else {
        bail!("Reached unreachable mux arm")
    } // Misc2(zirgen/circuit/rv32im/v2/dsl/inst_misc.zir:70)
    let x65: InstOutputStruct =
        exec_finalize_misc(ctx, arg0, &x4, &x61, (layout2.map(|c| c._super)))?;
    return Ok(x65);
}
pub fn exec_mul_input<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, MulInputLayout, Val>,
) -> Result<MulInputStruct> {
    // MulInput(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:8)
    eqz!(
        (arg1.state - Val::new(32)),
        "MulInput(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:8)"
    );
    // MulInput(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:10)
    let x3: DecoderStruct = exec_decode_inst(ctx, arg0, arg1, (layout2.map(|c| c.decoded)))?;
    // MulInput(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:11)
    let x4: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs1, (layout2.map(|c| c.rs1)))?;
    // MulInput(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:12)
    let x5: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs2, (layout2.map(|c| c.rs2)))?;
    return Ok(MulInputStruct {
        _super: arg1.clone(),
        ii: arg1.clone(),
        decoded: x3,
        rs1: x4,
        rs2: x5,
    });
}
pub fn exec_do_mul<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct,
    arg1: &ValU32Struct,
    arg2: Val,
    arg3: Val,
    layout4: BoundLayout<'a, DoMulLayout, Val>,
) -> Result<DoMulStruct> {
    // DoMul(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:40)
    let x5: MultiplyAccumulateStruct = exec_multiply_accumulate(
        ctx,
        arg0,
        arg1,
        &ValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        &MultiplySettingsStruct {
            a_signed: arg2,
            b_signed: arg3,
            c_signed: Val::new(0),
        },
        (layout4.map(|c| c.mul)),
    )?;
    return Ok(DoMulStruct {
        low: x5.out_low,
        high: x5.out_high,
    });
}
pub fn exec_op_sll<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpSLLLayout, Val>,
) -> Result<ValU32Struct> {
    // OpSLL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:45)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSLL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:46)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSLL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :46:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSLL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :46:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSLL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :46:20)))");
    // OpSLL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:45)
    let x4: Val = arg0.rs2._super.low;
    // OpSLL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:47)
    let x5: ValU32Struct = exec_dyn_po2(ctx, x4, (layout1.map(|c| c.shift_mul)))?;
    // OpSLL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:48)
    let x6: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &x5,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x6.low);
}
pub fn exec_op_slli<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpSLLILayout, Val>,
) -> Result<ValU32Struct> {
    // OpSLLI(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:51)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpSLLI(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:52)
    let x3: Val = (x2.opcode._super - Val::new(19));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpSLLI ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :52:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpSLLI ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :52:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!(x2.func7, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpSLLI ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :52:20)))");
    // OpSLLI(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:53)
    let x4: ValU32Struct = exec_dyn_po2(ctx, x2.rs2, (layout1.map(|c| c.shift_mul)))?;
    // OpSLLI(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:54)
    let x5: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &x4,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x5.low);
}
pub fn exec_op_mul<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpMULLayout, Val>,
) -> Result<ValU32Struct> {
    // OpMUL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:57)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpMUL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:58)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpMUL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :58:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!(x2.func3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpMUL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :58:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpMUL ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :58:20)))");
    // OpMUL(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:59)
    let x4: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.low);
}
pub fn exec_op_mulh<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpMULHLayout, Val>,
) -> Result<ValU32Struct> {
    // OpMULH(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:62)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpMULH(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:63)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpMULH ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :63:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpMULH ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :63:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpMULH ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :63:20)))");
    // OpMULH(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:64)
    let x4: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(1),
        Val::new(1),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.high);
}
pub fn exec_op_mulhsu<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpMULHSULayout, Val>,
) -> Result<ValU32Struct> {
    // OpMULHSU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:67)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpMULHSU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:68)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpMULHSU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :68:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(2)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpMULHSU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :68:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpMULHSU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :68:20)))");
    // OpMULHSU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:69)
    let x4: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(1),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.high);
}
pub fn exec_op_mulhu<'a>(
    ctx: &'a ExecContext,
    arg0: &MulInputStruct,
    layout1: BoundLayout<'a, OpMULHULayout, Val>,
) -> Result<ValU32Struct> {
    // OpMULHU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:72)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:62)
    // OpMULHU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:73)
    let x3: Val = (x2.opcode._super - Val::new(51));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :62:19) at  OpMULHU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :73:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:63)
    eqz!((x2.func3 - Val::new(3)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :63:18) at  OpMULHU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :73:20)))");
    // VerifyOpcodeF3F7(zirgen/circuit/rv32im/v2/dsl/inst.zir:64)
    eqz!((x2.func7 - Val::new(1)), "loc(callsite( VerifyOpcodeF3F7 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :64:18) at  OpMULHU ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :73:20)))");
    // OpMULHU(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:74)
    let x4: DoMulStruct = exec_do_mul(
        ctx,
        &arg0.rs1._super,
        &arg0.rs2._super,
        Val::new(0),
        Val::new(0),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(x4.high);
}
pub fn exec_mul0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Mul0Layout, Val>,
) -> Result<InstOutputStruct> {
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
    let x3: BoundLayout<Mul0MulOutputLayout, _> = (layout2.map(|c| c.mul_output));
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:22)
    let x4: MulInputStruct = exec_mul_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    let x5: NondetRegStruct8Array = x4._super.minor_onehot._super;
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
    let x6: BoundLayout<Mul0MulOutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x7: BoundLayout<Mul0MulOutputArm3Layout, _> = (x3.map(|c| c.arm3));
    let x8: BoundLayout<Mul0MulOutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x9: BoundLayout<Mul0MulOutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x10: BoundLayout<Mul0MulOutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x11: BoundLayout<Mul0MulOutputArm7Layout, _> = (x3.map(|c| c.arm7));
    let x12: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // IllegalMulOp(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:18)
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:30)
    let x16: ValU32Struct = ValU32Struct {
        low: Val::new(0),
        high: Val::new(0),
    };
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
    let x17: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x10.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x10.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x10.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x10.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x10.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x10.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x10.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x10.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x10.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x10.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x10.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x10.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x10.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x10.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x11.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x11.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x11.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x11.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x11.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x11.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x11.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x11.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x49: BoundLayout<Reg, _> = (((x11.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x11.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x11.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x11.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x11.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x11.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x55: ValU32Struct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:24)
        let x56: ValU32Struct = exec_op_sll(ctx, &x4, (x3.map(|c| c.arm0)))?;
        x55 = x56;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:25)
        let x57: ValU32Struct = exec_op_slli(ctx, &x4, (x3.map(|c| c.arm1)))?;
        x55 = x57;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:26)
        let x58: ValU32Struct = exec_op_mul(ctx, &x4, (x6.map(|c| c._super)))?;
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x58;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:27)
        let x59: ValU32Struct = exec_op_mulh(ctx, &x4, (x7.map(|c| c._super)))?;
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x59;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:28)
        let x60: ValU32Struct = exec_op_mulhsu(ctx, &x4, (x8.map(|c| c._super)))?;
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x60;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:29)
        let x61: ValU32Struct = exec_op_mulhu(ctx, &x4, (x9.map(|c| c._super)))?;
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x61;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // IllegalMulOp(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:17)
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:30)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalMulOp ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :17:6) at  Mul0 ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :30:18)))");
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x16;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // IllegalMulOp(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:17)
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:31)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalMulOp ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :17:6) at  Mul0 ( zirgen/circuit/rv32im/v2/dsl/inst_mul.zir :31:18)))");
        // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:23)"
        );
        x55 = x16;
    } else {
        bail!("Reached unreachable mux arm")
    } // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:33)
    let x62: WriteRdStruct = exec_write_rd(
        ctx,
        arg0,
        &x4.ii,
        &x4.decoded,
        Val::new(1),
        &x55,
        (layout2.map(|c| c._0)),
    )?;
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:21)
    let x63: ValU32Struct = arg1.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // Mul0(zirgen/circuit/rv32im/v2/dsl/inst_mul.zir:34)
    let x64: DenormedValU32Struct = DenormedValU32Struct {
        low: (x63.low + Val::new(4)),
        high: x63.high,
    };
    let x65: NormalizeU32Struct = exec_normalize_u32(ctx, &x64, (layout2.map(|c| c.pc_add)))?;
    return Ok(InstOutputStruct {
        new_pc: x65._super,
        new_state: Val::new(32),
        new_mode: arg1.mode,
    });
}
pub fn exec_mem_load_input<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, MemLoadInputLayout, Val>,
) -> Result<MemLoadInputStruct> {
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:8)
    eqz!(
        (arg1.state - Val::new(32)),
        "MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:8)"
    );
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:10)
    let x3: DecoderStruct = exec_decode_inst(ctx, arg0, arg1, (layout2.map(|c| c.decoded)))?;
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:11)
    let x4: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs1, (layout2.map(|c| c.rs1)))?;
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:10)
    let x5: ValU32Struct = x3.imm_i;
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:11)
    let x6: ValU32Struct = x4._super;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:12)
    let x7: DenormedValU32Struct = DenormedValU32Struct {
        low: (x6.low + x5.low),
        high: (x6.high + x5.high),
    };
    let x8: NormalizeU32Struct = exec_normalize_u32(ctx, &x7, (layout2.map(|c| c.addr_u32)))?;
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:13)
    let x9: AddrDecomposeBitsStruct =
        exec_addr_decompose_bits(ctx, &x8._super, arg1.mode, (layout2.map(|c| c.addr)))?;
    // MemLoadInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:14)
    let x10: GetDataStruct = exec_memory_read(ctx, arg0, x9.addr, (layout2.map(|c| c.data_0)))?;
    return Ok(MemLoadInputStruct {
        ii: arg1.clone(),
        decoded: x3,
        addr: x9,
        data_0: x10,
    });
}
pub fn exec_mem_store_input<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, MemStoreInputLayout, Val>,
) -> Result<MemStoreInputStruct> {
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:18)
    eqz!(
        (arg1.state - Val::new(32)),
        "MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:18)"
    );
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:20)
    let x3: DecoderStruct = exec_decode_inst(ctx, arg0, arg1, (layout2.map(|c| c.decoded)))?;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:21)
    let x4: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs1, (layout2.map(|c| c.rs1)))?;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:22)
    let x5: GetDataStruct = exec_read_reg(ctx, arg0, arg1, x3.rs2, (layout2.map(|c| c.rs2)))?;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:20)
    let x6: ValU32Struct = x3.imm_s;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:21)
    let x7: ValU32Struct = x4._super;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:23)
    let x8: DenormedValU32Struct = DenormedValU32Struct {
        low: (x7.low + x6.low),
        high: (x7.high + x6.high),
    };
    let x9: NormalizeU32Struct = exec_normalize_u32(ctx, &x8, (layout2.map(|c| c.addr_u32)))?;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:24)
    let x10: AddrDecomposeBitsStruct =
        exec_addr_decompose_bits(ctx, &x9._super, arg1.mode, (layout2.map(|c| c.addr)))?;
    // MemStoreInput(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:25)
    let x11: GetDataStruct = exec_memory_read(ctx, arg0, x10.addr, (layout2.map(|c| c.data_0)))?;
    return Ok(MemStoreInputStruct {
        decoded: x3,
        rs2: x5,
        addr: x10,
        data_0: x11,
    });
}
pub fn exec_mem_store_finalize<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &MemStoreInputStruct,
    arg2: &ValU32Struct,
    layout3: BoundLayout<'a, MemStoreFinalizeLayout, Val>,
) -> Result<MemStoreFinalizeStruct> {
    // MemStoreFinalize(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:29)
    let x4: MemoryWriteStruct =
        exec_memory_write(ctx, arg0, arg1.addr.addr, arg2, (layout3.map(|c| c._0)))?;
    return Ok(MemStoreFinalizeStruct {});
}
pub fn exec_split_word<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, SplitWordLayout, Val>,
) -> Result<SplitWordStruct> {
    // SplitWord(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:33)
    let x2: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        bit_and(arg0, Val::new(255))?,
        (layout1.map(|c| c.byte0)),
    )?;
    // SplitWord(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:34)
    let x3: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(arg0, Val::new(65280))? * Val::new(2005401601)),
        (layout1.map(|c| c.byte1)),
    )?;
    // SplitWord(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:35)
    let x4: Val = ((x3._super * Val::new(256)) + x2._super);
    eqz!(
        (arg0 - x4),
        "SplitWord(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:35)"
    );
    return Ok(SplitWordStruct {
        byte0: x2,
        byte1: x3,
    });
}
pub fn exec_op_lb<'a>(
    ctx: &'a ExecContext,
    arg0: &MemLoadInputStruct,
    layout1: BoundLayout<'a, OpLBLayout, Val>,
) -> Result<ValU32Struct> {
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:82)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:83)
    let x3: Val = (x2.opcode._super - Val::new(3));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpLB ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :83:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!(x2.func3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpLB ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :83:18)))");
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:82)
    let x4: AddrDecomposeBitsStruct = arg0.addr;
    let x5: ValU32Struct = arg0.data_0._super;
    let x6: Val = x4.low1._super;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:84)
    let x7: Val = ((Val::new(1) - x6) * x5.low);
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:85)
    let x8: SplitWordStruct =
        exec_split_word(ctx, ((x6 * x5.high) + x7), (layout1.map(|c| c.bytes)))?;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:82)
    let x9: Val = x4.low0._super;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:86)
    let x10: Val = ((Val::new(1) - x9) * x8.byte0._super);
    let x11: Val = ((x9 * x8.byte1._super) + x10);
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:87)
    let x12: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x11, Val::new(128))? * Val::new(1997537281)),
        (layout1.map(|c| c.high_bit)),
    )?;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:88)
    let x13: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(x11, Val::new(127))? * Val::new(2)),
        (layout1.map(|c| c.low7x2)),
    )?;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:87)
    let x14: Val = x12._super;
    // OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:89)
    let x15: Val = ((x14 * Val::new(128)) + (x13._super * Val::new(1006632961)));
    eqz!(
        (x11 - x15),
        "OpLB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:89)"
    );
    return Ok(ValU32Struct {
        low: (x11 + (x14 * Val::new(65280))),
        high: (x14 * Val::new(65535)),
    });
}
pub fn exec_op_lh<'a>(
    ctx: &'a ExecContext,
    arg0: &MemLoadInputStruct,
    layout1: BoundLayout<'a, OpLHLayout, Val>,
) -> Result<ValU32Struct> {
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:93)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:94)
    let x3: Val = (x2.opcode._super - Val::new(3));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpLH ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :94:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(1)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpLH ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :94:18)))");
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:93)
    let x4: AddrDecomposeBitsStruct = arg0.addr;
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:95)
    eqz!(
        x4.low0._super,
        "OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:95)"
    );
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:93)
    let x5: ValU32Struct = arg0.data_0._super;
    let x6: Val = x4.low1._super;
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:96)
    let x7: Val = ((Val::new(1) - x6) * x5.low);
    let x8: Val = ((x6 * x5.high) + x7);
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:97)
    let x9: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x8, Val::new(32768))? * Val::new(2013204481)),
        (layout1.map(|c| c.high_bit)),
    )?;
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:98)
    let x10: NondetRegStruct = exec_nondet_u8_reg(
        ctx,
        (bit_and(x8, Val::new(32767))? * Val::new(2)),
        (layout1.map(|c| c.low15x2)),
    )?;
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:97)
    let x11: Val = x9._super;
    // OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:99)
    let x12: Val = ((x11 * Val::new(32768)) + (x10._super * Val::new(1006632961)));
    eqz!(
        (x8 - x12),
        "OpLH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:99)"
    );
    return Ok(ValU32Struct {
        low: x8,
        high: (x11 * Val::new(65535)),
    });
}
pub fn exec_op_lbu<'a>(
    ctx: &'a ExecContext,
    arg0: &MemLoadInputStruct,
    layout1: BoundLayout<'a, OpLBULayout, Val>,
) -> Result<ValU32Struct> {
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:110)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:111)
    let x3: Val = (x2.opcode._super - Val::new(3));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpLBU ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :111:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!((x2.func3 - Val::new(4)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpLBU ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :111:18)))");
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:110)
    let x4: AddrDecomposeBitsStruct = arg0.addr;
    let x5: ValU32Struct = arg0.data_0._super;
    let x6: Val = x4.low1._super;
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:112)
    let x7: Val = ((Val::new(1) - x6) * x5.low);
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:113)
    let x8: SplitWordStruct =
        exec_split_word(ctx, ((x6 * x5.high) + x7), (layout1.map(|c| c.bytes)))?;
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:110)
    let x9: Val = x4.low0._super;
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:114)
    let x10: Val = ((Val::new(1) - x9) * x8.byte0._super);
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // OpLBU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:115)
    let x11: ValU32Struct = ValU32Struct {
        low: ((x9 * x8.byte1._super) + x10),
        high: Val::new(0),
    };
    return Ok(x11);
}
pub fn exec_mem0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Mem0Layout, Val>,
) -> Result<InstOutputStruct> {
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
    let x3: BoundLayout<Mem0OutputLayout, _> = (layout2.map(|c| c.output));
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:49)
    let x4: MemLoadInputStruct = exec_mem_load_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:48)
    let x5: NondetRegStruct8Array = arg1.minor_onehot._super;
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
    let x6: BoundLayout<Mem0OutputArm1Layout, _> = (x3.map(|c| c.arm1));
    let x7: BoundLayout<Mem0OutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x8: BoundLayout<Mem0OutputArm3Layout, _> = (x3.map(|c| c.arm3));
    let x9: BoundLayout<Mem0OutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x10: BoundLayout<Mem0OutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x11: BoundLayout<Mem0OutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x12: BoundLayout<Mem0OutputArm7Layout, _> = (x3.map(|c| c.arm7));
    let x13: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x6.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:103)
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:53)
    let x15: DecoderStruct = x4.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:104)
    let x16: Val = (x15.opcode._super - Val::new(3));
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:56)
    let x17: Val = x15.func3;
    // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:103)
    let x18: AddrDecomposeBitsStruct = x4.addr;
    let x19: Val = x18.low0._super;
    let x20: Val = x18.low1._super;
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
    let x21: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x24: ValU32Struct = x4.data_0._super;
    let x25: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    // OpLHU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:121)
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:55)
    let x26: Val = ((Val::new(1) - x20) * x24.low);
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // OpLHU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:122)
    let x27: ValU32Struct = ValU32Struct {
        low: ((x20 * x24.high) + x26),
        high: Val::new(0),
    };
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
    let x28: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // IllegalLoadOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:40)
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:56)
    let x31: ValU32Struct = ValU32Struct {
        low: Val::new(0),
        high: Val::new(0),
    };
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
    let x32: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x41: ValU32Struct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:51)
        let x42: ValU32Struct = exec_op_lb(ctx, &x4, (x3.map(|c| c.arm0)))?;
        x41 = x42;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:52)
        let x43: ValU32Struct = exec_op_lh(ctx, &x4, (x6.map(|c| c._super)))?;
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x43;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:104)
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:53)
        eqz!(x16, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpLW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :104:18) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :53:10))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!((x17 - Val::new(2)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpLW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :104:18) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :53:10))))");
        // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:105)
        eqz!(x19, "loc(callsite( OpLW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :105:20) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :53:10)))");
        // OpLW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:106)
        eqz!(x20, "loc(callsite( OpLW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :106:20) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :53:10)))");
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x24;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:54)
        let x44: ValU32Struct = exec_op_lbu(ctx, &x4, (x8.map(|c| c._super)))?;
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x44;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpLHU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:119)
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:55)
        eqz!(x16, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpLHU ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :119:18) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :55:11))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!((x17 - Val::new(5)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpLHU ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :119:18) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :55:11))))");
        // OpLHU(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:120)
        eqz!(x19, "loc(callsite( OpLHU ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :120:20) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :55:11)))");
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x27;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // IllegalLoadOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:39)
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:56)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalLoadOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :39:6) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :56:19)))");
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x31;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // IllegalLoadOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:39)
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:57)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalLoadOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :39:6) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :57:19)))");
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x31;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // IllegalLoadOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:39)
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:58)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalLoadOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :39:6) at  Mem0 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :58:19)))");
        // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:50)"
        );
        x41 = x31;
    } else {
        bail!("Reached unreachable mux arm")
    } // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:60)
    let x45: WriteRdStruct = exec_write_rd(
        ctx,
        arg0,
        &x4.ii,
        &x15,
        Val::new(1),
        &x41,
        (layout2.map(|c| c._0)),
    )?;
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:48)
    let x46: ValU32Struct = arg1.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // Mem0(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:61)
    let x47: DenormedValU32Struct = DenormedValU32Struct {
        low: (x46.low + Val::new(4)),
        high: x46.high,
    };
    let x48: NormalizeU32Struct = exec_normalize_u32(ctx, &x47, (layout2.map(|c| c.pc_add)))?;
    return Ok(InstOutputStruct {
        new_pc: x48._super,
        new_state: Val::new(32),
        new_mode: arg1.mode,
    });
}
pub fn exec_op_sb<'a>(
    ctx: &'a ExecContext,
    arg0: &MemStoreInputStruct,
    layout1: BoundLayout<'a, OpSBLayout, Val>,
) -> Result<ValU32Struct> {
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:125)
    let x2: DecoderStruct = arg0.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:126)
    let x3: Val = (x2.opcode._super - Val::new(35));
    eqz!(x3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at  OpSB ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :126:18)))");
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
    eqz!(x2.func3, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at  OpSB ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :126:18)))");
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:125)
    let x4: AddrDecomposeBitsStruct = arg0.addr;
    let x5: ValU32Struct = arg0.data_0._super;
    let x6: Val = x5.high;
    let x7: Val = x4.low1._super;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:127)
    let x8: Val = (Val::new(1) - x7);
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:125)
    let x9: Val = x5.low;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:128)
    let x10: SplitWordStruct = exec_split_word(
        ctx,
        ((x7 * x6) + (x8 * x9)),
        (layout1.map(|c| c.orig_bytes)),
    )?;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:125)
    let x11: Val = arg0.rs2._super.low;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:129)
    let x12: SplitWordStruct = exec_split_word(ctx, x11, (layout1.map(|c| c.new_bytes)))?;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:125)
    let x13: Val = x4.low0._super;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:134)
    let x14: Val = (Val::new(1) - x13);
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:129)
    let x15: Val = x12.byte0._super;
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:135)
    let x16: Val = (((x14 * x10.byte1._super) + (x13 * x15)) * Val::new(256));
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:134)
    let x17: Val = (((x13 * x10.byte0._super) + (x14 * x15)) + x16);
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // OpSB(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:137)
    let x18: ValU32Struct = ValU32Struct {
        low: ((x7 * x9) + (x8 * x17)),
        high: ((x8 * x6) + (x7 * x17)),
    };
    return Ok(x18);
}
pub fn exec_mem1<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Mem1Layout, Val>,
) -> Result<InstOutputStruct> {
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
    let x3: BoundLayout<Mem1OutputLayout, _> = (layout2.map(|c| c.output));
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:66)
    let x4: MemStoreInputStruct =
        exec_mem_store_input(ctx, arg0, arg1, (layout2.map(|c| c.input)))?;
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:65)
    let x5: NondetRegStruct8Array = arg1.minor_onehot._super;
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
    let x6: BoundLayout<Mem1OutputArm1Layout, _> = (x3.map(|c| c.arm1));
    let x7: BoundLayout<Mem1OutputArm2Layout, _> = (x3.map(|c| c.arm2));
    let x8: BoundLayout<Mem1OutputArm3Layout, _> = (x3.map(|c| c.arm3));
    let x9: BoundLayout<Mem1OutputArm4Layout, _> = (x3.map(|c| c.arm4));
    let x10: BoundLayout<Mem1OutputArm5Layout, _> = (x3.map(|c| c.arm5));
    let x11: BoundLayout<Mem1OutputArm6Layout, _> = (x3.map(|c| c.arm6));
    let x12: BoundLayout<Mem1OutputArm7Layout, _> = (x3.map(|c| c.arm7));
    // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:143)
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:69)
    let x13: DecoderStruct = x4.decoded;
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
    // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:144)
    let x14: Val = (x13.opcode._super - Val::new(35));
    // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:56)
    let x15: Val = x13.func3;
    // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:143)
    let x16: AddrDecomposeBitsStruct = x4.addr;
    let x17: Val = x16.low0._super;
    let x18: ValU32Struct = x4.rs2._super;
    let x19: Val = x18.low;
    let x20: ValU32Struct = x4.data_0._super;
    let x21: Val = x16.low1._super;
    // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:150)
    let x22: Val = (Val::new(1) - x21);
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:149)
    let x23: ValU32Struct = ValU32Struct {
        low: ((x21 * x20.low) + (x22 * x19)),
        high: ((x22 * x20.high) + (x21 * x19)),
    };
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
    let x24: BoundLayout<Reg, _> = (((x6.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x6.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x6.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x6.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x7.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:45)
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:71)
    let x32: ValU32Struct = ValU32Struct {
        low: Val::new(0),
        high: Val::new(0),
    };
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
    let x33: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x8.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x49: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x12.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x53: ValU32Struct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:68)
        let x54: ValU32Struct = exec_op_sb(ctx, &x4, (x3.map(|c| c.arm0)))?;
        x53 = x54;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:144)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:69)
        eqz!(x14, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpSH ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :144:18) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :69:10))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!((x15 - Val::new(1)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpSH ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :144:18) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :69:10))))");
        // OpSH(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:145)
        eqz!(x17, "loc(callsite( OpSH ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :145:20) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :69:10)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x23;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:57)
        // OpSW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:156)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:70)
        eqz!(x14, "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :57:19) at callsite( OpSW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :156:18) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :70:10))))");
        // VerifyOpcodeF3(zirgen/circuit/rv32im/v2/dsl/inst.zir:58)
        eqz!((x15 - Val::new(2)), "loc(callsite( VerifyOpcodeF3 ( zirgen/circuit/rv32im/v2/dsl/inst.zir :58:18) at callsite( OpSW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :156:18) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :70:10))))");
        // OpSW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:157)
        eqz!(x17, "loc(callsite( OpSW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :157:20) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :70:10)))");
        // OpSW(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:158)
        eqz!(x21, "loc(callsite( OpSW ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :158:20) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :70:10)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x18;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:44)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:71)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalStoreOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :44:6) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :71:20)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x32;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:44)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:72)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalStoreOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :44:6) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :72:20)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x32;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:44)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:73)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalStoreOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :44:6) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :73:20)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x32;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:44)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:74)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalStoreOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :44:6) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :74:20)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x32;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // IllegalStoreOp(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:44)
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:75)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalStoreOp ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :44:6) at  Mem1 ( zirgen/circuit/rv32im/v2/dsl/inst_mem.zir :75:20)))");
        // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:67)"
        );
        x53 = x32;
    } else {
        bail!("Reached unreachable mux arm")
    } // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:77)
    let x55: MemStoreFinalizeStruct =
        exec_mem_store_finalize(ctx, arg0, &x4, &x53, (layout2.map(|c| c._0)))?;
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:65)
    let x56: ValU32Struct = arg1.pc_u32;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // Mem1(zirgen/circuit/rv32im/v2/dsl/inst_mem.zir:78)
    let x57: DenormedValU32Struct = DenormedValU32Struct {
        low: (x56.low + Val::new(4)),
        high: x56.high,
    };
    let x58: NormalizeU32Struct = exec_normalize_u32(ctx, &x57, (layout2.map(|c| c.pc_add)))?;
    return Ok(InstOutputStruct {
        new_pc: x58._super,
        new_state: Val::new(32),
        new_mode: arg1.mode,
    });
}
pub fn back_digest_reg<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, DigestRegLayout, Val>,
) -> Result<DigestRegStruct> {
    // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:7)
    let x2: DigestRegValues_SuperStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout1.map(|c| c.values)),
        |x3, x4| {
            // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:8)
            let x5: RegStruct = back_reg(ctx, distance0, (x4.map(|c| c.low)))?;
            // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:9)
            let x6: RegStruct = back_reg(ctx, distance0, (x4.map(|c| c.high)))?;
            return Ok(DigestRegValues_SuperStruct { low: x5, high: x6 });
        },
    )?;
    return Ok(DigestRegStruct { values: x2 });
}
pub fn exec_digest_reg<'a>(
    ctx: &'a ExecContext,
    arg0: &ValU32Struct8Array,
    layout1: BoundLayout<'a, DigestRegLayout, Val>,
) -> Result<DigestRegStruct> {
    // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:7)
    let x2: DigestRegValues_SuperStruct8Array =
        map_layout(*arg0, (layout1.map(|c| c.values)), |x3, x4| {
            // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:8)
            let x5: RegStruct = exec_reg(ctx, x3.low, (x4.map(|c| c.low)))?;
            // DigestReg(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:9)
            let x6: RegStruct = exec_reg(ctx, x3.high, (x4.map(|c| c.high)))?;
            return Ok(DigestRegValues_SuperStruct { low: x5, high: x6 });
        })?;
    return Ok(DigestRegStruct { values: x2 });
}
pub fn exec_control_load_root<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlLoadRootLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:18)
    let x4: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:19)
    let x5: BoundLayout<DigestRegLayout, _> = (x4.map(|c| c.state_in));
    // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:20)
    eqz!(
        arg1.state,
        "ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:20)"
    );
    // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:22)
    let x6: ControlLoadRoot__0Struct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c._1)),
        |x7, x8| {
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:23)
            let x9: GetDataStruct =
                exec_memory_page_in(ctx, arg0, (x7 + Val::new(1140850680)), (x8.map(|c| c.mem)))?;
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:19)
            let x10: DigestRegStruct = back_digest_reg(ctx, 0, x5)?;
            let x11: RegStruct = x10.values[to_usize(x7)].low;
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:23)
            let x12: ValU32Struct = x9._super;
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:24)
            let x13: Val = (x11._super._super - x12.low);
            eqz!(
                x13,
                "ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:24)"
            );
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:19)
            let x14: DigestRegStruct = back_digest_reg(ctx, 0, x5)?;
            let x15: RegStruct = x14.values[to_usize(x7)].high;
            // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:25)
            let x16: Val = (x15._super._super - x12.high);
            eqz!(
                x16,
                "ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:25)"
            );
            return Ok(ControlLoadRoot__0Struct {});
        },
    )?;
    // InstOutput(zirgen/circuit/rv32im/v2/dsl/inst.zir:46)
    // ControlLoadRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:27)
    let x17: InstOutputStruct = InstOutputStruct {
        new_pc: ValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_state: Val::new(16),
        new_mode: Val::new(0),
    };
    return Ok(x17);
}
pub fn exec_control_resume<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlResumeLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:30)
    let x4: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)
    let x5: BoundLayout<ControlResume_SuperLayout, _> = (layout2.map(|c| c._super));
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:31)
    eqz!(
        (arg1.state - Val::new(1)),
        "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:31)"
    );
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:30)
    let x6: ValU32Struct = arg1.pc_u32;
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:33)
    let x7: NondetRegStruct = exec_is_zero(ctx, (x6.low + x6.high), (layout2.map(|c| c.pc_zero)))?;
    let x8: Val = x7._super;
    // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)
    let x9: BoundLayout<ControlResume_SuperArm0Layout, _> = (x5.map(|c| c.arm0));
    let x10: BoundLayout<ControlResume_SuperArm0_SuperLayout, _> = (x9.map(|c| c._super));
    let x11: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x12: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x9.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x9.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x9.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x9.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x9.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x9.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x9.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x9.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x9.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x9.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x9.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x9.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x9.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x9.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x29: InstOutputStruct;
    if is_true(x8) {
        // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:36)
        let x30: GetDataStruct =
            exec_memory_read(ctx, arg0, Val::new(1073725572), (x10.map(|c| c.pc)))?;
        // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:37)
        let x31: GetDataStruct =
            exec_memory_read(ctx, arg0, Val::new(1073725573), (x10.map(|c| c.mode)))?;
        // InstOutput(zirgen/circuit/rv32im/v2/dsl/inst.zir:46)
        // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:38)
        let x32: InstOutputStruct = InstOutputStruct {
            new_pc: x30._super,
            new_state: Val::new(1),
            new_mode: x31._super.low,
        };
        // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)
        x11.store(ctx, Val::new(0));
        eqz!(
            x11.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:34)"
        );
        x29 = x32;
    } else if is_true((Val::new(1) - x8)) {
        // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:41)
        let x33: ControlResume_SuperArm1_Super__0Struct8Array = map_layout(
            [
                Val::new(0),
                Val::new(1),
                Val::new(2),
                Val::new(3),
                Val::new(4),
                Val::new(5),
                Val::new(6),
                Val::new(7),
            ],
            ((x5.map(|c| c.arm1)).map(|c| c._1)),
            |x34, x35| {
                // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:40)
                let x36: DigestRegStruct = back_digest_reg(ctx, 0, (x4.map(|c| c.input)))?;
                let x37: RegStruct = x36.values[to_usize(x34)].low;
                let x38: RegStruct = x36.values[to_usize(x34)].high;
                // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
                // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:43)
                let x39: ValU32Struct = ValU32Struct {
                    low: x37._super._super,
                    high: x38._super._super,
                };
                // ControlResume(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:42)
                let x40: MemoryWriteStruct = exec_memory_write(
                    ctx,
                    arg0,
                    (x34 + Val::new(1073725592)),
                    &x39,
                    (x35.map(|c| c._0)),
                )?;
                return Ok(ControlResume_SuperArm1_Super__0Struct {});
            },
        )?;
        x29 = InstOutputStruct {
            new_pc: x6,
            new_state: Val::new(32),
            new_mode: arg1.mode,
        };
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x29);
}
pub fn exec_control_user_ecall<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlUserECALLLayout, Val>,
) -> Result<InstOutputStruct> {
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:49)
    let x3: Val = arg1.mode;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:50)
    let x4: RegStruct = exec_reg(ctx, x3, (layout2.map(|c| c.safe_mode)))?;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:49)
    let x5: ValU32Struct = arg1.pc_u32;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:51)
    let x6: AddrDecomposeBitsStruct =
        exec_addr_decompose_bits(ctx, &x5, x4._super._super, (layout2.map(|c| c.pc_addr)))?;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:52)
    eqz!(
        x6.low2,
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:52)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:53)
    let x7: GetDataStruct = exec_memory_read(ctx, arg0, x6._super, (layout2.map(|c| c.load_inst)))?;
    let x8: ValU32Struct = x7._super;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:54)
    eqz!(
        x8.high,
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:54)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:55)
    eqz!(
        (x8.low - Val::new(115)),
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:55)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:56)
    eqz!(
        (arg1.state - Val::new(32)),
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:56)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:57)
    eqz!(
        x3,
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:57)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:58)
    let x9: GetDataStruct = exec_memory_read(
        ctx,
        arg0,
        Val::new(1073725489),
        (layout2.map(|c| c.dispatch_idx)),
    )?;
    let x10: ValU32Struct = x9._super;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:59)
    eqz!(
        x10.high,
        "ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:59)"
    );
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:58)
    let x11: Val = x10.low;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:60)
    let x12: U16RegStruct = exec_u16_reg(ctx, (x11 * Val::new(128)), (layout2.map(|c| c._0)))?;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:61)
    let x13: GetDataStruct = exec_memory_read(
        ctx,
        arg0,
        (x11 + Val::new(1073726464)),
        (layout2.map(|c| c.new_pc_addr)),
    )?;
    // ControlUserECALL(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:62)
    let x14: MemoryWriteStruct = exec_memory_write(
        ctx,
        arg0,
        Val::new(1073725568),
        &x5,
        (layout2.map(|c| c._1)),
    )?;
    return Ok(InstOutputStruct {
        new_pc: x13._super,
        new_state: Val::new(32),
        new_mode: Val::new(1),
    });
}
pub fn exec_control_mret<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlMRETLayout, Val>,
) -> Result<InstOutputStruct> {
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:66)
    let x3: Val = arg1.mode;
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:67)
    let x4: RegStruct = exec_reg(ctx, x3, (layout2.map(|c| c.safe_mode)))?;
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:68)
    let x5: AddrDecomposeBitsStruct = exec_addr_decompose_bits(
        ctx,
        &arg1.pc_u32,
        x4._super._super,
        (layout2.map(|c| c.pc_addr)),
    )?;
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:69)
    eqz!(
        x5.low2,
        "ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:69)"
    );
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:70)
    let x6: GetDataStruct = exec_memory_read(ctx, arg0, x5._super, (layout2.map(|c| c.load_inst)))?;
    let x7: ValU32Struct = x6._super;
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:71)
    eqz!(
        (x7.high - Val::new(12320)),
        "ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:71)"
    );
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:72)
    eqz!(
        (x7.low - Val::new(115)),
        "ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:72)"
    );
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:73)
    eqz!(
        (arg1.state - Val::new(32)),
        "ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:73)"
    );
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:74)
    eqz!(
        (x3 - Val::new(1)),
        "ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:74)"
    );
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:75)
    let x8: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725568), (layout2.map(|c| c.pc)))?;
    let x9: ValU32Struct = x8._super;
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    // ControlMRET(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:76)
    let x10: DenormedValU32Struct = DenormedValU32Struct {
        low: (x9.low + Val::new(4)),
        high: x9.high,
    };
    let x11: NormalizeU32Struct = exec_normalize_u32(ctx, &x10, (layout2.map(|c| c.pc_add)))?;
    return Ok(InstOutputStruct {
        new_pc: x11._super,
        new_state: Val::new(32),
        new_mode: Val::new(0),
    });
}
pub fn exec_control_suspend<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlSuspendLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:80)
    let x4: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)
    let x5: BoundLayout<ControlSuspend_SuperLayout, _> = (layout2.map(|c| c._super));
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:80)
    let x6: Val = arg1.state;
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:81)
    eqz!(
        (x6 - Val::new(4)),
        "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:81)"
    );
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:80)
    let x7: ValU32Struct = arg1.pc_u32;
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:83)
    let x8: NondetRegStruct = exec_is_zero(ctx, (x7.low + x7.high), (layout2.map(|c| c.pc_zero)))?;
    let x9: Val = x8._super;
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)
    let x10: BoundLayout<ControlSuspend_SuperArm1Layout, _> = (x5.map(|c| c.arm1));
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:86)
    let x11: BoundLayout<NondetRegLayout, _> = (x4.map(|c| c.is_terminate));
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:91)
    let x12: ComponentStruct = ComponentStruct {};
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:103)
    let x13: ValU32Struct = ValU32Struct {
        low: Val::new(0),
        high: Val::new(0),
    };
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:104)
    let x14: BoundLayout<ControlSuspend_SuperArm1_SuperLayout, _> = (x10.map(|c| c._super));
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:80)
    let x15: Val = arg1.mode;
    // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)
    let x16: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x10.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x10.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x10.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x10.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x10.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x10.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x10.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x10.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x10.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x10.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x10.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x10.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x10.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x34: InstOutputStruct;
    if is_true(x9) {
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:89)
        let x35: GetDataStruct8Array = map_layout(
            [
                Val::new(0),
                Val::new(1),
                Val::new(2),
                Val::new(3),
                Val::new(4),
                Val::new(5),
                Val::new(6),
                Val::new(7),
            ],
            ((x5.map(|c| c.arm0)).map(|c| c._1)),
            |x36, x37| {
                let x38: GetDataStruct =
                    exec_memory_read(ctx, arg0, (x36 + Val::new(1073725584)), x37)?;
                return Ok(x38);
            },
        )?;
        let x39: ValU32Struct8Array = [
            x35[to_usize(Val::new(0))]._super,
            x35[to_usize(Val::new(1))]._super,
            x35[to_usize(Val::new(2))]._super,
            x35[to_usize(Val::new(3))]._super,
            x35[to_usize(Val::new(4))]._super,
            x35[to_usize(Val::new(5))]._super,
            x35[to_usize(Val::new(6))]._super,
            x35[to_usize(Val::new(7))]._super,
        ];
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:88)
        let x40: DigestRegStruct = exec_digest_reg(ctx, &x39, (x4.map(|c| c.output)))?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:86)
        let x41: RegStruct = back_reg(ctx, 0, x11)?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:91)
        let x42: Val = (Val::new(1) - x41._super._super);
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:86)
        let x43: RegStruct = back_reg(ctx, 0, x11)?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:91)
        let x44: Val = (Val::new(1) - x43._super._super);
        let x45: ComponentStruct;
        if is_true(x42) {
            // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:92)
            let x46: RegStruct = exec_reg(ctx, Val::new(0), (x4.map(|c| c.term_a0low)))?;
            // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:93)
            let x47: RegStruct = exec_reg(ctx, Val::new(0), (x4.map(|c| c.term_a0high)))?;
            // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:94)
            let x48: RegStruct = exec_reg(ctx, Val::new(0), (x4.map(|c| c.term_a1low)))?;
            // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:95)
            let x49: RegStruct = exec_reg(ctx, Val::new(0), (x4.map(|c| c.term_a1high)))?;
            x45 = x12;
        } else if is_true((Val::new(1) - x44)) {
            x45 = x12;
        } else {
            bail!("Reached unreachable mux arm")
        }
        x34 = InstOutputStruct {
            new_pc: x13.clone(),
            new_state: Val::new(16),
            new_mode: Val::new(3),
        };
    } else if is_true((Val::new(1) - x9)) {
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:107)
        let x50: RegStruct = exec_reg(ctx, x6, (x14.map(|c| c.state)))?;
        let x51: Val = x50._super._super;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:108)
        let x52: Val = (x51 - Val::new(32));
        eqz!(
            (x52 * (x51 - Val::new(4))),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:108)"
        );
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:111)
        let x53: RegStruct = exec_reg(ctx, (x52 * Val::new(1797558858)), x11)?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:113)
        let x54: MemoryWriteStruct =
            exec_memory_write(ctx, arg0, Val::new(1073725572), &x7, (x14.map(|c| c._0)))?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:114)
        let x55: MemoryWriteStruct = exec_memory_write(
            ctx,
            arg0,
            Val::new(1073725573),
            &ValU32Struct {
                low: x15,
                high: Val::new(0),
            },
            (x14.map(|c| c._1)),
        )?;
        // ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "ControlSuspend(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:84)"
        );
        x34 = InstOutputStruct {
            new_pc: x13,
            new_state: Val::new(4),
            new_mode: x15,
        };
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x34);
}
pub fn exec_control_store_root<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlStoreRootLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:120)
    let x4: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:121)
    eqz!(
        (arg1.state - Val::new(5)),
        "ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:121)"
    );
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:123)
    let x5: GetDataStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c._1)),
        |x6, x7| {
            // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:124)
            let x8: GetDataStruct =
                exec_memory_page_out(ctx, arg0, (x6 + Val::new(1140850680)), x7)?;
            return Ok(x8);
        },
    )?;
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:123)
    let x9: ValU32Struct8Array = [
        x5[to_usize(Val::new(0))]._super,
        x5[to_usize(Val::new(1))]._super,
        x5[to_usize(Val::new(2))]._super,
        x5[to_usize(Val::new(3))]._super,
        x5[to_usize(Val::new(4))]._super,
        x5[to_usize(Val::new(5))]._super,
        x5[to_usize(Val::new(6))]._super,
        x5[to_usize(Val::new(7))]._super,
    ];
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:122)
    let x10: DigestRegStruct = exec_digest_reg(ctx, &x9, (x4.map(|c| c.state_out)))?;
    // InstOutput(zirgen/circuit/rv32im/v2/dsl/inst.zir:46)
    // ControlStoreRoot(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:127)
    let x11: InstOutputStruct = InstOutputStruct {
        new_pc: ValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_state: Val::new(6),
        new_mode: Val::new(0),
    };
    return Ok(x11);
}
pub fn exec_control_table<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ControlTableLayout, Val>,
) -> Result<InstOutputStruct> {
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
    let x3: BoundLayout<ControlTable_SuperLayout, _> = (layout2.map(|c| c._super));
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:131)
    eqz!(
        (arg1.state - Val::new(6)),
        "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:131)"
    );
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:132)
    let x4: RegStruct = exec_reg(ctx, arg1.pc_u32.low, (layout2.map(|c| c.entry)))?;
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:133)
    let x5: RegStruct = exec_reg(ctx, arg1.mode, (layout2.map(|c| c.mode)))?;
    let x6: Val = x5._super._super;
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:132)
    let x7: Val = x4._super._super;
    // Log(<preamble>:22)
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:134)
    invoke_extern!(ctx, log, "mode/entry = ", [x6, x7]);
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
    let x8: BoundLayout<ControlTable_SuperArm0Layout, _> = (x3.map(|c| c.arm0));
    let x9: BoundLayout<ControlTable_SuperArm1Layout, _> = (x3.map(|c| c.arm1));
    let x10: BoundLayout<ControlTable_SuperArm0_SuperLayout, _> = (x8.map(|c| c._super));
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:137)
    let x11: Val16Array = [
        Val::new(0),
        Val::new(1),
        Val::new(2),
        Val::new(3),
        Val::new(4),
        Val::new(5),
        Val::new(6),
        Val::new(7),
        Val::new(8),
        Val::new(9),
        Val::new(10),
        Val::new(11),
        Val::new(12),
        Val::new(13),
        Val::new(14),
        Val::new(15),
    ];
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:142)
    let x12: Val = (x7 + Val::new(16));
    // ValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:10)
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:145)
    let x13: ValU32Struct = ValU32Struct {
        low: Val::new(0),
        high: Val::new(0),
    };
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:147)
    let x14: ValU32Struct = ValU32Struct {
        low: x12,
        high: Val::new(0),
    };
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
    let x15: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x8.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x8.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x8.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x8.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x8.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x8.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x8.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x8.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x8.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x8.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x8.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x8.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x8.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:149)
    let x31: BoundLayout<ControlTable_SuperArm1_SuperLayout, _> = (x9.map(|c| c._super));
    // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
    let x32: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x9.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x9.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x9.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x9.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x9.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x9.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x9.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x9.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x9.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x9.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x9.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x9.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x48: InstOutputStruct;
    if is_true(x6) {
        // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:137)
        let x49: ControlTable_SuperArm0_Super__0Struct16Array =
            map_layout(x11, (x10.map(|c| c._1)), |x50, x51| {
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:138)
                let x52: Val = (x7 + x50);
                // LookupCurrent(zirgen/circuit/rv32im/v2/dsl/lookups.zir:5)
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:139)
                let x53: Val = invoke_extern!(ctx, lookup_current, Val::new(16), x52);
                let x54: ArgU16Struct = exec_arg_u16(ctx, neg_0(x53)?, x52, (x51.map(|c| c.arg)))?;
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:140)
                let x55: Val = (x54.val._super - x52);
                eqz!(
                    x55,
                    "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:140)"
                );
                return Ok(ControlTable_SuperArm0_Super__0Struct {});
            })?;
        // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:143)
        let x56: NondetRegStruct =
            exec_is_zero(ctx, (x12 - Val::new(65536)), (x10.map(|c| c.done)))?;
        let x57: Val = x56._super;
        let x58: InstOutputStruct;
        if is_true(x57) {
            x58 = InstOutputStruct {
                new_pc: x13.clone(),
                new_state: Val::new(7),
                new_mode: Val::new(0),
            };
        } else if is_true((Val::new(1) - x57)) {
            x58 = InstOutputStruct {
                new_pc: x14.clone(),
                new_state: Val::new(6),
                new_mode: Val::new(1),
            };
        } else {
            bail!("Reached unreachable mux arm")
        } // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x48 = x58;
    } else if is_true((Val::new(1) - x6)) {
        // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:151)
        let x59: ControlTable_SuperArm1_Super__0Struct16Array =
            map_layout(x11, (x31.map(|c| c._1)), |x60, x61| {
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:152)
                let x62: Val = (x7 + x60);
                // LookupCurrent(zirgen/circuit/rv32im/v2/dsl/lookups.zir:5)
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:153)
                let x63: Val = invoke_extern!(ctx, lookup_current, Val::new(8), x62);
                let x64: ArgU8Struct = exec_arg_u8(ctx, neg_0(x63)?, x62, (x61.map(|c| c.arg)))?;
                // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:154)
                let x65: Val = (x64.val._super - x62);
                eqz!(
                    x65,
                    "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:154)"
                );
                return Ok(ControlTable_SuperArm1_Super__0Struct {});
            })?;
        // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:157)
        let x66: NondetRegStruct = exec_is_zero(ctx, (x12 - Val::new(256)), (x31.map(|c| c.done)))?;
        let x67: Val = x66._super;
        let x68: InstOutputStruct;
        if is_true(x67) {
            x68 = InstOutputStruct {
                new_pc: x13,
                new_state: Val::new(6),
                new_mode: Val::new(1),
            };
        } else if is_true((Val::new(1) - x67)) {
            x68 = InstOutputStruct {
                new_pc: x14,
                new_state: Val::new(6),
                new_mode: Val::new(0),
            };
        } else {
            bail!("Reached unreachable mux arm")
        } // ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "ControlTable(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:135)"
        );
        x48 = x68;
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x48);
}
pub fn exec_control0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Control0Layout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
    let x4: BoundLayout<Control0_SuperLayout, _> = (layout2.map(|c| c._super));
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:171)
    let x5: Val = arg0._super._super;
    // GetDiffCount(zirgen/circuit/rv32im/v2/dsl/mem.zir:22)
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:173)
    let x6: Val = invoke_extern!(ctx, get_diff_count, x5);
    let x7: CycleArgStruct = exec_cycle_arg(ctx, neg_0(x6)?, x5, (layout2.map(|c| c.arg)))?;
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:175)
    let x8: Val = (x7.cycle._super - x5);
    eqz!(
        x8,
        "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:175)"
    );
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:171)
    let x9: NondetRegStruct8Array = arg1.minor_onehot._super;
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
    let x10: BoundLayout<Control0_SuperArm0Layout, _> = (x4.map(|c| c.arm0));
    let x11: BoundLayout<Control0_SuperArm1Layout, _> = (x4.map(|c| c.arm1));
    let x12: BoundLayout<Control0_SuperArm2Layout, _> = (x4.map(|c| c.arm2));
    let x13: BoundLayout<Control0_SuperArm3Layout, _> = (x4.map(|c| c.arm3));
    let x14: BoundLayout<Control0_SuperArm4Layout, _> = (x4.map(|c| c.arm4));
    let x15: BoundLayout<Control0_SuperArm5Layout, _> = (x4.map(|c| c.arm5));
    let x16: BoundLayout<Control0_SuperArm6Layout, _> = (x4.map(|c| c.arm6));
    let x17: BoundLayout<Control0_SuperArm7Layout, _> = (x4.map(|c| c.arm7));
    let x18: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x10.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x10.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x10.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x10.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x10.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x10.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x10.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x10.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x10.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x10.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x10.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x10.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x10.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x10.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x10.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x10.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x10.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x10.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x10.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x10.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x10.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x10.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x10.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x10.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x10.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x10.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x49: BoundLayout<Reg, _> = (((x10.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x10.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x10.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x10.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x10.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x10.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x55: BoundLayout<Reg, _> = (((x10.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x56: BoundLayout<Reg, _> = (((x10.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x57: BoundLayout<Reg, _> = (((x10.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x58: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x59: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x60: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x61: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x62: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x63: BoundLayout<Reg, _> = (((x11.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x64: BoundLayout<Reg, _> = (((x11.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x65: BoundLayout<Reg, _> = (((x11.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x66: BoundLayout<Reg, _> = (((x11.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x67: BoundLayout<Reg, _> = (((x11.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x68: BoundLayout<Reg, _> = (((x11.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x69: BoundLayout<Reg, _> = (((x11.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x70: BoundLayout<Reg, _> = (((x11.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x71: BoundLayout<Reg, _> = (((x11.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x72: BoundLayout<Reg, _> = (((x11.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x73: BoundLayout<Reg, _> = (((x11.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x74: BoundLayout<Reg, _> = (((x11.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x75: BoundLayout<Reg, _> = (((x11.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x76: BoundLayout<Reg, _> = (((x11.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x77: BoundLayout<Reg, _> = (((x11.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x78: BoundLayout<Reg, _> = (((x11.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x79: BoundLayout<Reg, _> = (((x11.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x80: BoundLayout<Reg, _> = (((x11.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x81: BoundLayout<Reg, _> = (((x11.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x82: BoundLayout<Reg, _> = (((x11.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x83: BoundLayout<Reg, _> = (((x11.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x84: BoundLayout<Reg, _> = (((x11.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x85: BoundLayout<Reg, _> = (((x11.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x86: BoundLayout<Reg, _> = (((x11.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x87: BoundLayout<Reg, _> = (((x11.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x88: BoundLayout<Reg, _> = (((x11.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x89: BoundLayout<Reg, _> = (((x11.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x90: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x91: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x92: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x93: BoundLayout<Reg, _> = (((x12.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x94: BoundLayout<Reg, _> = (((x12.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x95: BoundLayout<Reg, _> = (((x12.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x96: BoundLayout<Reg, _> = (((x12.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x97: BoundLayout<Reg, _> = (((x12.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x98: BoundLayout<Reg, _> = (((x12.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x99: BoundLayout<Reg, _> = (((x12.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x100: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x101: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x102: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x103: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x104: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x105: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x106: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x107: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x108: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x109: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x110: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x111: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x112: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x113: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x114: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x115: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x116: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x117: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x118: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x119: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x120: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x121: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x122: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x123: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x124: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x125: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x126: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x127: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x128: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x129: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x130: BoundLayout<Reg, _> =
        (((x12.map(|c| c._extra40)).map(|c| c.count)).map(|c| c._super));
    let x131: BoundLayout<Reg, _> = (((x13.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x132: BoundLayout<Reg, _> = (((x13.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x133: BoundLayout<Reg, _> = (((x13.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x134: BoundLayout<Reg, _> = (((x13.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x135: BoundLayout<Reg, _> = (((x13.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x136: BoundLayout<Reg, _> = (((x13.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x137: BoundLayout<Reg, _> = (((x13.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x138: BoundLayout<Reg, _> = (((x13.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x139: BoundLayout<Reg, _> = (((x13.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x140: BoundLayout<Reg, _> = (((x13.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x141: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x142: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x143: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x144: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x145: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x146: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x147: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x148: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x149: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x150: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x151: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x152: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x153: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x154: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x155: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x156: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x157: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x158: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x159: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x160: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x161: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x162: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x163: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x164: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x165: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x166: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x167: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x168: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x169: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x170: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x171: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra40)).map(|c| c.count)).map(|c| c._super));
    let x172: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra41)).map(|c| c.count)).map(|c| c._super));
    let x173: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra42)).map(|c| c.count)).map(|c| c._super));
    let x174: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra43)).map(|c| c.count)).map(|c| c._super));
    let x175: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra44)).map(|c| c.count)).map(|c| c._super));
    let x176: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra45)).map(|c| c.count)).map(|c| c._super));
    let x177: BoundLayout<Reg, _> = (((x14.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x178: BoundLayout<Reg, _> = (((x14.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x179: BoundLayout<Reg, _> = (((x14.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x180: BoundLayout<Reg, _> = (((x14.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x181: BoundLayout<Reg, _> = (((x14.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x182: BoundLayout<Reg, _> = (((x14.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x183: BoundLayout<Reg, _> = (((x14.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x184: BoundLayout<Reg, _> = (((x14.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x185: BoundLayout<Reg, _> = (((x14.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x186: BoundLayout<Reg, _> = (((x14.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x187: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x188: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x189: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x190: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x191: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x192: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x193: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x194: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x195: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x196: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x197: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x198: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x199: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x200: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x201: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x202: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x203: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x204: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x205: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x206: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x207: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x208: BoundLayout<Reg, _> =
        (((x14.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x209: BoundLayout<Reg, _> = (((x15.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x210: BoundLayout<Reg, _> = (((x15.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x211: BoundLayout<Reg, _> = (((x15.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x212: BoundLayout<Reg, _> = (((x15.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x213: BoundLayout<Reg, _> = (((x15.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x214: BoundLayout<Reg, _> = (((x15.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x215: BoundLayout<Reg, _> = (((x15.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x216: BoundLayout<Reg, _> = (((x15.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x217: BoundLayout<Reg, _> = (((x15.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x218: BoundLayout<Reg, _> = (((x15.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x219: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x220: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x221: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x222: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x223: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x224: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x225: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x226: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x227: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x228: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x229: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x230: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x231: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x232: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x233: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x234: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x235: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x236: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x237: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x238: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x239: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x240: BoundLayout<Reg, _> =
        (((x15.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x241: BoundLayout<Reg, _> = (((x16.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x242: BoundLayout<Reg, _> = (((x16.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x243: BoundLayout<Reg, _> = (((x16.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x244: BoundLayout<Reg, _> = (((x16.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x245: BoundLayout<Reg, _> = (((x16.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x246: BoundLayout<Reg, _> = (((x16.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x247: BoundLayout<Reg, _> = (((x16.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x248: BoundLayout<Reg, _> = (((x16.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x249: BoundLayout<Reg, _> = (((x16.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x250: BoundLayout<Reg, _> = (((x16.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x251: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x252: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x253: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x254: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x255: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x256: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x257: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x258: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x259: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x260: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x261: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x262: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x263: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x264: BoundLayout<Reg, _> =
        (((x16.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    // InstOutput(zirgen/circuit/rv32im/v2/dsl/inst.zir:46)
    // ControlDone(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:168)
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:184)
    let x265: InstOutputStruct = InstOutputStruct {
        new_pc: ValU32Struct {
            low: Val::new(0),
            high: Val::new(0),
        },
        new_state: Val::new(7),
        new_mode: Val::new(0),
    };
    // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
    let x266: BoundLayout<Reg, _> = (((x17.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x267: BoundLayout<Reg, _> = (((x17.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x268: BoundLayout<Reg, _> = (((x17.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x269: BoundLayout<Reg, _> = (((x17.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x270: BoundLayout<Reg, _> = (((x17.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x271: BoundLayout<Reg, _> = (((x17.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x272: BoundLayout<Reg, _> = (((x17.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x273: BoundLayout<Reg, _> = (((x17.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x274: BoundLayout<Reg, _> = (((x17.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x275: BoundLayout<Reg, _> = (((x17.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x276: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x277: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x278: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x279: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x280: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x281: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x282: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x283: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x284: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x285: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x286: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x287: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x288: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x289: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x290: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x291: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x292: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x293: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x294: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x295: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x296: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x297: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x298: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x299: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x300: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x301: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x302: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x303: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x304: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x305: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x306: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra40)).map(|c| c.count)).map(|c| c._super));
    let x307: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra41)).map(|c| c.count)).map(|c| c._super));
    let x308: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra42)).map(|c| c.count)).map(|c| c._super));
    let x309: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra43)).map(|c| c.count)).map(|c| c._super));
    let x310: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra44)).map(|c| c.count)).map(|c| c._super));
    let x311: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra45)).map(|c| c.count)).map(|c| c._super));
    let x312: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra46)).map(|c| c.count)).map(|c| c._super));
    let x313: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra47)).map(|c| c.count)).map(|c| c._super));
    let x314: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra48)).map(|c| c.count)).map(|c| c._super));
    let x315: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra49)).map(|c| c.count)).map(|c| c._super));
    let x316: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra50)).map(|c| c.count)).map(|c| c._super));
    let x317: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra51)).map(|c| c.count)).map(|c| c._super));
    let x318: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra52)).map(|c| c.count)).map(|c| c._super));
    let x319: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra53)).map(|c| c.count)).map(|c| c._super));
    let x320: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra54)).map(|c| c.count)).map(|c| c._super));
    let x321: BoundLayout<Reg, _> =
        (((x17.map(|c| c._extra55)).map(|c| c.count)).map(|c| c._super));
    let x322: InstOutputStruct;
    if is_true(x9[to_usize(Val::new(0))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:177)
        let x323: InstOutputStruct =
            exec_control_load_root(ctx, arg0, arg1, (x10.map(|c| c._super)), global3)?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x55.store(ctx, Val::new(0));
        eqz!(
            x55.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x56.store(ctx, Val::new(0));
        eqz!(
            x56.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x57.store(ctx, Val::new(0));
        eqz!(
            x57.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x323;
    } else if is_true(x9[to_usize(Val::new(1))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:178)
        let x324: InstOutputStruct =
            exec_control_resume(ctx, arg0, arg1, (x11.map(|c| c._super)), global3)?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x58.store(ctx, Val::new(0));
        eqz!(
            x58.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x59.store(ctx, Val::new(0));
        eqz!(
            x59.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x60.store(ctx, Val::new(0));
        eqz!(
            x60.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x61.store(ctx, Val::new(0));
        eqz!(
            x61.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x62.store(ctx, Val::new(0));
        eqz!(
            x62.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x63.store(ctx, Val::new(0));
        eqz!(
            x63.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x64.store(ctx, Val::new(0));
        eqz!(
            x64.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x65.store(ctx, Val::new(0));
        eqz!(
            x65.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x66.store(ctx, Val::new(0));
        eqz!(
            x66.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x67.store(ctx, Val::new(0));
        eqz!(
            x67.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x68.store(ctx, Val::new(0));
        eqz!(
            x68.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x69.store(ctx, Val::new(0));
        eqz!(
            x69.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x70.store(ctx, Val::new(0));
        eqz!(
            x70.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x71.store(ctx, Val::new(0));
        eqz!(
            x71.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x72.store(ctx, Val::new(0));
        eqz!(
            x72.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x73.store(ctx, Val::new(0));
        eqz!(
            x73.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x74.store(ctx, Val::new(0));
        eqz!(
            x74.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x75.store(ctx, Val::new(0));
        eqz!(
            x75.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x76.store(ctx, Val::new(0));
        eqz!(
            x76.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x77.store(ctx, Val::new(0));
        eqz!(
            x77.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x78.store(ctx, Val::new(0));
        eqz!(
            x78.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x79.store(ctx, Val::new(0));
        eqz!(
            x79.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x80.store(ctx, Val::new(0));
        eqz!(
            x80.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x81.store(ctx, Val::new(0));
        eqz!(
            x81.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x82.store(ctx, Val::new(0));
        eqz!(
            x82.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x83.store(ctx, Val::new(0));
        eqz!(
            x83.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x84.store(ctx, Val::new(0));
        eqz!(
            x84.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x85.store(ctx, Val::new(0));
        eqz!(
            x85.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x86.store(ctx, Val::new(0));
        eqz!(
            x86.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x87.store(ctx, Val::new(0));
        eqz!(
            x87.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x88.store(ctx, Val::new(0));
        eqz!(
            x88.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x89.store(ctx, Val::new(0));
        eqz!(
            x89.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x324;
    } else if is_true(x9[to_usize(Val::new(2))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:179)
        let x325: InstOutputStruct =
            exec_control_user_ecall(ctx, arg0, arg1, (x12.map(|c| c._super)))?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x90.store(ctx, Val::new(0));
        eqz!(
            x90.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x91.store(ctx, Val::new(0));
        eqz!(
            x91.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x92.store(ctx, Val::new(0));
        eqz!(
            x92.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x93.store(ctx, Val::new(0));
        eqz!(
            x93.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x94.store(ctx, Val::new(0));
        eqz!(
            x94.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x95.store(ctx, Val::new(0));
        eqz!(
            x95.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x96.store(ctx, Val::new(0));
        eqz!(
            x96.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x97.store(ctx, Val::new(0));
        eqz!(
            x97.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x98.store(ctx, Val::new(0));
        eqz!(
            x98.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x99.store(ctx, Val::new(0));
        eqz!(
            x99.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x100.store(ctx, Val::new(0));
        eqz!(
            x100.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x101.store(ctx, Val::new(0));
        eqz!(
            x101.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x102.store(ctx, Val::new(0));
        eqz!(
            x102.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x103.store(ctx, Val::new(0));
        eqz!(
            x103.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x104.store(ctx, Val::new(0));
        eqz!(
            x104.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x105.store(ctx, Val::new(0));
        eqz!(
            x105.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x106.store(ctx, Val::new(0));
        eqz!(
            x106.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x107.store(ctx, Val::new(0));
        eqz!(
            x107.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x108.store(ctx, Val::new(0));
        eqz!(
            x108.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x109.store(ctx, Val::new(0));
        eqz!(
            x109.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x110.store(ctx, Val::new(0));
        eqz!(
            x110.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x111.store(ctx, Val::new(0));
        eqz!(
            x111.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x112.store(ctx, Val::new(0));
        eqz!(
            x112.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x113.store(ctx, Val::new(0));
        eqz!(
            x113.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x114.store(ctx, Val::new(0));
        eqz!(
            x114.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x115.store(ctx, Val::new(0));
        eqz!(
            x115.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x116.store(ctx, Val::new(0));
        eqz!(
            x116.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x117.store(ctx, Val::new(0));
        eqz!(
            x117.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x118.store(ctx, Val::new(0));
        eqz!(
            x118.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x119.store(ctx, Val::new(0));
        eqz!(
            x119.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x120.store(ctx, Val::new(0));
        eqz!(
            x120.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x121.store(ctx, Val::new(0));
        eqz!(
            x121.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x122.store(ctx, Val::new(0));
        eqz!(
            x122.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x123.store(ctx, Val::new(0));
        eqz!(
            x123.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x124.store(ctx, Val::new(0));
        eqz!(
            x124.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x125.store(ctx, Val::new(0));
        eqz!(
            x125.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x126.store(ctx, Val::new(0));
        eqz!(
            x126.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x127.store(ctx, Val::new(0));
        eqz!(
            x127.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x128.store(ctx, Val::new(0));
        eqz!(
            x128.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x129.store(ctx, Val::new(0));
        eqz!(
            x129.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x130.store(ctx, Val::new(0));
        eqz!(
            x130.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x325;
    } else if is_true(x9[to_usize(Val::new(3))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:180)
        let x326: InstOutputStruct = exec_control_mret(ctx, arg0, arg1, (x13.map(|c| c._super)))?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x131.store(ctx, Val::new(0));
        eqz!(
            x131.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x132.store(ctx, Val::new(0));
        eqz!(
            x132.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x133.store(ctx, Val::new(0));
        eqz!(
            x133.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x134.store(ctx, Val::new(0));
        eqz!(
            x134.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x135.store(ctx, Val::new(0));
        eqz!(
            x135.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x136.store(ctx, Val::new(0));
        eqz!(
            x136.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x137.store(ctx, Val::new(0));
        eqz!(
            x137.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x138.store(ctx, Val::new(0));
        eqz!(
            x138.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x139.store(ctx, Val::new(0));
        eqz!(
            x139.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x140.store(ctx, Val::new(0));
        eqz!(
            x140.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x141.store(ctx, Val::new(0));
        eqz!(
            x141.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x142.store(ctx, Val::new(0));
        eqz!(
            x142.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x143.store(ctx, Val::new(0));
        eqz!(
            x143.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x144.store(ctx, Val::new(0));
        eqz!(
            x144.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x145.store(ctx, Val::new(0));
        eqz!(
            x145.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x146.store(ctx, Val::new(0));
        eqz!(
            x146.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x147.store(ctx, Val::new(0));
        eqz!(
            x147.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x148.store(ctx, Val::new(0));
        eqz!(
            x148.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x149.store(ctx, Val::new(0));
        eqz!(
            x149.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x150.store(ctx, Val::new(0));
        eqz!(
            x150.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x151.store(ctx, Val::new(0));
        eqz!(
            x151.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x152.store(ctx, Val::new(0));
        eqz!(
            x152.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x153.store(ctx, Val::new(0));
        eqz!(
            x153.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x154.store(ctx, Val::new(0));
        eqz!(
            x154.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x155.store(ctx, Val::new(0));
        eqz!(
            x155.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x156.store(ctx, Val::new(0));
        eqz!(
            x156.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x157.store(ctx, Val::new(0));
        eqz!(
            x157.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x158.store(ctx, Val::new(0));
        eqz!(
            x158.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x159.store(ctx, Val::new(0));
        eqz!(
            x159.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x160.store(ctx, Val::new(0));
        eqz!(
            x160.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x161.store(ctx, Val::new(0));
        eqz!(
            x161.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x162.store(ctx, Val::new(0));
        eqz!(
            x162.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x163.store(ctx, Val::new(0));
        eqz!(
            x163.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x164.store(ctx, Val::new(0));
        eqz!(
            x164.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x165.store(ctx, Val::new(0));
        eqz!(
            x165.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x166.store(ctx, Val::new(0));
        eqz!(
            x166.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x167.store(ctx, Val::new(0));
        eqz!(
            x167.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x168.store(ctx, Val::new(0));
        eqz!(
            x168.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x169.store(ctx, Val::new(0));
        eqz!(
            x169.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x170.store(ctx, Val::new(0));
        eqz!(
            x170.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x171.store(ctx, Val::new(0));
        eqz!(
            x171.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x172.store(ctx, Val::new(0));
        eqz!(
            x172.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x173.store(ctx, Val::new(0));
        eqz!(
            x173.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x174.store(ctx, Val::new(0));
        eqz!(
            x174.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x175.store(ctx, Val::new(0));
        eqz!(
            x175.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x176.store(ctx, Val::new(0));
        eqz!(
            x176.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x326;
    } else if is_true(x9[to_usize(Val::new(4))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:181)
        let x327: InstOutputStruct =
            exec_control_suspend(ctx, arg0, arg1, (x14.map(|c| c._super)), global3)?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x177.store(ctx, Val::new(0));
        eqz!(
            x177.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x178.store(ctx, Val::new(0));
        eqz!(
            x178.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x179.store(ctx, Val::new(0));
        eqz!(
            x179.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x180.store(ctx, Val::new(0));
        eqz!(
            x180.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x181.store(ctx, Val::new(0));
        eqz!(
            x181.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x182.store(ctx, Val::new(0));
        eqz!(
            x182.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x183.store(ctx, Val::new(0));
        eqz!(
            x183.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x184.store(ctx, Val::new(0));
        eqz!(
            x184.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x185.store(ctx, Val::new(0));
        eqz!(
            x185.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x186.store(ctx, Val::new(0));
        eqz!(
            x186.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x187.store(ctx, Val::new(0));
        eqz!(
            x187.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x188.store(ctx, Val::new(0));
        eqz!(
            x188.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x189.store(ctx, Val::new(0));
        eqz!(
            x189.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x190.store(ctx, Val::new(0));
        eqz!(
            x190.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x191.store(ctx, Val::new(0));
        eqz!(
            x191.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x192.store(ctx, Val::new(0));
        eqz!(
            x192.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x193.store(ctx, Val::new(0));
        eqz!(
            x193.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x194.store(ctx, Val::new(0));
        eqz!(
            x194.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x195.store(ctx, Val::new(0));
        eqz!(
            x195.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x196.store(ctx, Val::new(0));
        eqz!(
            x196.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x197.store(ctx, Val::new(0));
        eqz!(
            x197.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x198.store(ctx, Val::new(0));
        eqz!(
            x198.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x199.store(ctx, Val::new(0));
        eqz!(
            x199.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x200.store(ctx, Val::new(0));
        eqz!(
            x200.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x201.store(ctx, Val::new(0));
        eqz!(
            x201.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x202.store(ctx, Val::new(0));
        eqz!(
            x202.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x203.store(ctx, Val::new(0));
        eqz!(
            x203.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x204.store(ctx, Val::new(0));
        eqz!(
            x204.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x205.store(ctx, Val::new(0));
        eqz!(
            x205.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x206.store(ctx, Val::new(0));
        eqz!(
            x206.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x207.store(ctx, Val::new(0));
        eqz!(
            x207.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x208.store(ctx, Val::new(0));
        eqz!(
            x208.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x327;
    } else if is_true(x9[to_usize(Val::new(5))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:182)
        let x328: InstOutputStruct =
            exec_control_store_root(ctx, arg0, arg1, (x15.map(|c| c._super)), global3)?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x209.store(ctx, Val::new(0));
        eqz!(
            x209.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x210.store(ctx, Val::new(0));
        eqz!(
            x210.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x211.store(ctx, Val::new(0));
        eqz!(
            x211.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x212.store(ctx, Val::new(0));
        eqz!(
            x212.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x213.store(ctx, Val::new(0));
        eqz!(
            x213.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x214.store(ctx, Val::new(0));
        eqz!(
            x214.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x215.store(ctx, Val::new(0));
        eqz!(
            x215.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x216.store(ctx, Val::new(0));
        eqz!(
            x216.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x217.store(ctx, Val::new(0));
        eqz!(
            x217.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x218.store(ctx, Val::new(0));
        eqz!(
            x218.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x219.store(ctx, Val::new(0));
        eqz!(
            x219.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x220.store(ctx, Val::new(0));
        eqz!(
            x220.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x221.store(ctx, Val::new(0));
        eqz!(
            x221.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x222.store(ctx, Val::new(0));
        eqz!(
            x222.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x223.store(ctx, Val::new(0));
        eqz!(
            x223.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x224.store(ctx, Val::new(0));
        eqz!(
            x224.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x225.store(ctx, Val::new(0));
        eqz!(
            x225.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x226.store(ctx, Val::new(0));
        eqz!(
            x226.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x227.store(ctx, Val::new(0));
        eqz!(
            x227.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x228.store(ctx, Val::new(0));
        eqz!(
            x228.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x229.store(ctx, Val::new(0));
        eqz!(
            x229.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x230.store(ctx, Val::new(0));
        eqz!(
            x230.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x231.store(ctx, Val::new(0));
        eqz!(
            x231.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x232.store(ctx, Val::new(0));
        eqz!(
            x232.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x233.store(ctx, Val::new(0));
        eqz!(
            x233.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x234.store(ctx, Val::new(0));
        eqz!(
            x234.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x235.store(ctx, Val::new(0));
        eqz!(
            x235.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x236.store(ctx, Val::new(0));
        eqz!(
            x236.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x237.store(ctx, Val::new(0));
        eqz!(
            x237.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x238.store(ctx, Val::new(0));
        eqz!(
            x238.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x239.store(ctx, Val::new(0));
        eqz!(
            x239.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x240.store(ctx, Val::new(0));
        eqz!(
            x240.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x328;
    } else if is_true(x9[to_usize(Val::new(6))]._super) {
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:183)
        let x329: InstOutputStruct = exec_control_table(ctx, arg0, arg1, (x16.map(|c| c._super)))?;
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x241.store(ctx, Val::new(0));
        eqz!(
            x241.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x242.store(ctx, Val::new(0));
        eqz!(
            x242.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x243.store(ctx, Val::new(0));
        eqz!(
            x243.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x244.store(ctx, Val::new(0));
        eqz!(
            x244.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x245.store(ctx, Val::new(0));
        eqz!(
            x245.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x246.store(ctx, Val::new(0));
        eqz!(
            x246.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x247.store(ctx, Val::new(0));
        eqz!(
            x247.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x248.store(ctx, Val::new(0));
        eqz!(
            x248.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x249.store(ctx, Val::new(0));
        eqz!(
            x249.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x250.store(ctx, Val::new(0));
        eqz!(
            x250.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x251.store(ctx, Val::new(0));
        eqz!(
            x251.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x252.store(ctx, Val::new(0));
        eqz!(
            x252.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x253.store(ctx, Val::new(0));
        eqz!(
            x253.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x254.store(ctx, Val::new(0));
        eqz!(
            x254.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x255.store(ctx, Val::new(0));
        eqz!(
            x255.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x256.store(ctx, Val::new(0));
        eqz!(
            x256.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x257.store(ctx, Val::new(0));
        eqz!(
            x257.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x258.store(ctx, Val::new(0));
        eqz!(
            x258.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x259.store(ctx, Val::new(0));
        eqz!(
            x259.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x260.store(ctx, Val::new(0));
        eqz!(
            x260.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x261.store(ctx, Val::new(0));
        eqz!(
            x261.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x262.store(ctx, Val::new(0));
        eqz!(
            x262.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x263.store(ctx, Val::new(0));
        eqz!(
            x263.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x264.store(ctx, Val::new(0));
        eqz!(
            x264.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x329;
    } else if is_true(x9[to_usize(Val::new(7))]._super) {
        // ControlDone(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:167)
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:184)
        eqz!((arg1.state - Val::new(7)), "loc(callsite( ControlDone ( zirgen/circuit/rv32im/v2/dsl/inst_control.zir :167:16) at  Control0 ( zirgen/circuit/rv32im/v2/dsl/inst_control.zir :184:17)))");
        // Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)
        x266.store(ctx, Val::new(0));
        eqz!(
            x266.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x267.store(ctx, Val::new(0));
        eqz!(
            x267.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x268.store(ctx, Val::new(0));
        eqz!(
            x268.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x269.store(ctx, Val::new(0));
        eqz!(
            x269.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x270.store(ctx, Val::new(0));
        eqz!(
            x270.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x271.store(ctx, Val::new(0));
        eqz!(
            x271.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x272.store(ctx, Val::new(0));
        eqz!(
            x272.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x273.store(ctx, Val::new(0));
        eqz!(
            x273.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x274.store(ctx, Val::new(0));
        eqz!(
            x274.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x275.store(ctx, Val::new(0));
        eqz!(
            x275.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x276.store(ctx, Val::new(0));
        eqz!(
            x276.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x277.store(ctx, Val::new(0));
        eqz!(
            x277.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x278.store(ctx, Val::new(0));
        eqz!(
            x278.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x279.store(ctx, Val::new(0));
        eqz!(
            x279.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x280.store(ctx, Val::new(0));
        eqz!(
            x280.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x281.store(ctx, Val::new(0));
        eqz!(
            x281.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x282.store(ctx, Val::new(0));
        eqz!(
            x282.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x283.store(ctx, Val::new(0));
        eqz!(
            x283.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x284.store(ctx, Val::new(0));
        eqz!(
            x284.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x285.store(ctx, Val::new(0));
        eqz!(
            x285.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x286.store(ctx, Val::new(0));
        eqz!(
            x286.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x287.store(ctx, Val::new(0));
        eqz!(
            x287.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x288.store(ctx, Val::new(0));
        eqz!(
            x288.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x289.store(ctx, Val::new(0));
        eqz!(
            x289.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x290.store(ctx, Val::new(0));
        eqz!(
            x290.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x291.store(ctx, Val::new(0));
        eqz!(
            x291.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x292.store(ctx, Val::new(0));
        eqz!(
            x292.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x293.store(ctx, Val::new(0));
        eqz!(
            x293.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x294.store(ctx, Val::new(0));
        eqz!(
            x294.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x295.store(ctx, Val::new(0));
        eqz!(
            x295.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x296.store(ctx, Val::new(0));
        eqz!(
            x296.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x297.store(ctx, Val::new(0));
        eqz!(
            x297.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x298.store(ctx, Val::new(0));
        eqz!(
            x298.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x299.store(ctx, Val::new(0));
        eqz!(
            x299.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x300.store(ctx, Val::new(0));
        eqz!(
            x300.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x301.store(ctx, Val::new(0));
        eqz!(
            x301.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x302.store(ctx, Val::new(0));
        eqz!(
            x302.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x303.store(ctx, Val::new(0));
        eqz!(
            x303.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x304.store(ctx, Val::new(0));
        eqz!(
            x304.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x305.store(ctx, Val::new(0));
        eqz!(
            x305.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x306.store(ctx, Val::new(0));
        eqz!(
            x306.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x307.store(ctx, Val::new(0));
        eqz!(
            x307.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x308.store(ctx, Val::new(0));
        eqz!(
            x308.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x309.store(ctx, Val::new(0));
        eqz!(
            x309.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x310.store(ctx, Val::new(0));
        eqz!(
            x310.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x311.store(ctx, Val::new(0));
        eqz!(
            x311.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x312.store(ctx, Val::new(0));
        eqz!(
            x312.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x313.store(ctx, Val::new(0));
        eqz!(
            x313.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x314.store(ctx, Val::new(0));
        eqz!(
            x314.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x315.store(ctx, Val::new(0));
        eqz!(
            x315.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x316.store(ctx, Val::new(0));
        eqz!(
            x316.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x317.store(ctx, Val::new(0));
        eqz!(
            x317.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x318.store(ctx, Val::new(0));
        eqz!(
            x318.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x319.store(ctx, Val::new(0));
        eqz!(
            x319.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x320.store(ctx, Val::new(0));
        eqz!(
            x320.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x321.store(ctx, Val::new(0));
        eqz!(
            x321.load(ctx, 0),
            "Control0(zirgen/circuit/rv32im/v2/dsl/inst_control.zir:176)"
        );
        x322 = x265;
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x322);
}
pub fn exec_one_hot_4_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, OneHot_4_Layout, Val>,
) -> Result<OneHot_4_Struct> {
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:7)
    let x2: NondetRegStruct4Array = map_layout(
        [Val::new(0), Val::new(1), Val::new(2), Val::new(3)],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            let x5: NondetRegStruct = exec_nondet_bit_reg(ctx, isz((x3 - arg0))?, x4)?;
            return Ok(x5);
        },
    )?;
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)
    let x6: Val = x2[to_usize(Val::new(1))]._super;
    let x7: Val = (x2[to_usize(Val::new(0))]._super + x6);
    let x8: Val = x2[to_usize(Val::new(2))]._super;
    let x9: Val = x2[to_usize(Val::new(3))]._super;
    let x10: Val = (((x7 + x8) + x9) - Val::new(1));
    eqz!(x10, "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)");
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)
    let x11: Val = (((x6 + (x8 * Val::new(2))) + (x9 * Val::new(3))) - arg0);
    eqz!(x11, "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)");
    return Ok(OneHot_4_Struct { _super: x2 });
}
pub fn exec_machine_e_call<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    arg2: Val,
    layout3: BoundLayout<'a, MachineECallLayout, Val>,
) -> Result<ECallOutputStruct> {
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:26)
    let x4: GetDataStruct = exec_memory_read(ctx, arg0, arg2, (layout3.map(|c| c.load_inst)))?;
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:27)
    eqz!(
        (arg1.state - Val::new(32)),
        "MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:27)"
    );
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:26)
    let x5: ValU32Struct = x4._super;
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:28)
    eqz!(
        x5.high,
        "MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:28)"
    );
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:29)
    eqz!(
        (x5.low - Val::new(115)),
        "MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:29)"
    );
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:30)
    eqz!(
        (arg1.mode - Val::new(1)),
        "MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:30)"
    );
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:31)
    let x6: GetDataStruct = exec_memory_read(
        ctx,
        arg0,
        Val::new(1073725457),
        (layout3.map(|c| c.dispatch_idx)),
    )?;
    let x7: ValU32Struct = x6._super;
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:32)
    eqz!(
        x7.high,
        "MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:32)"
    );
    // MachineECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:33)
    let x8: OneHot_4_Struct = exec_one_hot_4_(ctx, x7.low, (layout3.map(|c| c.dispatch)))?;
    let x9: NondetRegStruct4Array = x8._super;
    let x10: Val;
    if is_true(x9[to_usize(Val::new(0))]._super) {
        x10 = Val::new(9);
    } else if is_true(x9[to_usize(Val::new(1))]._super) {
        x10 = Val::new(10);
    } else if is_true(x9[to_usize(Val::new(2))]._super) {
        x10 = Val::new(11);
    } else if is_true(x9[to_usize(Val::new(3))]._super) {
        x10 = Val::new(16);
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(ECallOutputStruct {
        state: x10,
        s0: Val::new(0),
        s1: Val::new(0),
        s2: Val::new(0),
    });
}
pub fn exec_e_call_terminate<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ECallTerminateLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<ECallOutputStruct> {
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:43)
    let x4: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:44)
    eqz!(
        (arg1.state - Val::new(9)),
        "ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:44)"
    );
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:45)
    let x5: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725482), (layout2.map(|c| c.a0)))?;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:46)
    let x6: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725483), (layout2.map(|c| c.a1)))?;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:45)
    let x7: ValU32Struct = x5._super;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:47)
    let x8: RegStruct = exec_reg(ctx, x7.low, (x4.map(|c| c.term_a0low)))?;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:48)
    let x9: RegStruct = exec_reg(ctx, x7.high, (x4.map(|c| c.term_a0high)))?;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:46)
    let x10: ValU32Struct = x6._super;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:49)
    let x11: RegStruct = exec_reg(ctx, x10.low, (x4.map(|c| c.term_a1low)))?;
    // ECallTerminate(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:50)
    let x12: RegStruct = exec_reg(ctx, x10.high, (x4.map(|c| c.term_a1high)))?;
    return Ok(ECallOutputStruct {
        state: Val::new(4),
        s0: Val::new(0),
        s1: Val::new(0),
        s2: Val::new(0),
    });
}
pub fn exec_decompose_low2<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, DecomposeLow2Layout, Val>,
) -> Result<DecomposeLow2Struct> {
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:57)
    let x2: NondetRegStruct = exec_nondet_reg(
        ctx,
        (bit_and(arg0, Val::new(65532))? * Val::new(1509949441)),
        (layout1.map(|c| c.high)),
    )?;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:58)
    let x3: NondetRegStruct =
        exec_nondet_reg(ctx, bit_and(arg0, Val::new(3))?, (layout1.map(|c| c.low2)))?;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:59)
    let x4: OneHot_4_Struct = exec_one_hot_4_(ctx, x3._super, (layout1.map(|c| c.low2_hot)))?;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:60)
    let x5: NondetRegStruct = exec_is_zero(ctx, x2._super, (layout1.map(|c| c.high_zero)))?;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:59)
    let x6: NondetRegStruct4Array = x4._super;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:61)
    let x7: Val = (x5._super * x6[to_usize(Val::new(0))]._super);
    let x8: RegStruct = exec_reg(ctx, x7, (layout1.map(|c| c.is_zero)))?;
    // DecomposeLow2(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:63)
    let x9: Val = (x6[to_usize(Val::new(1))]._super + x6[to_usize(Val::new(2))]._super);
    return Ok(DecomposeLow2Struct {
        high: x2,
        low2: x3,
        low2_hot: x4,
        high_zero: x5,
        is_zero: x8,
        low2_nonzero: (x9 + x6[to_usize(Val::new(3))]._super),
    });
}
pub fn exec_e_call_host_read_setup<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ECallHostReadSetupLayout, Val>,
) -> Result<ECallOutputStruct> {
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:67)
    eqz!(
        (arg1.state - Val::new(10)),
        "ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:67)"
    );
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:69)
    let x3: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725450), (layout2.map(|c| c.fd)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:70)
    let x4: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725451), (layout2.map(|c| c.ptr)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:71)
    let x5: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725452), (layout2.map(|c| c.len)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:69)
    let x6: ValU32Struct = x3._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:73)
    eqz!(
        x6.high,
        "ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:73)"
    );
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:71)
    let x7: ValU32Struct = x5._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:75)
    eqz!(
        x7.high,
        "ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:75)"
    );
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:71)
    let x8: Val = x7.low;
    // HostReadPrepare(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:8)
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:77)
    let x9: Val = invoke_extern!(ctx, host_read_prepare, x6.low, x8);
    let x10: NondetRegStruct = exec_nondet_u16_reg(ctx, x9, (layout2.map(|c| c.new_len)))?;
    let x11: Val = x10._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:79)
    let x12: U16RegStruct = exec_u16_reg(ctx, (x8 - x11), (layout2.map(|c| c.diff)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:81)
    let x13: MemoryWriteStruct = exec_memory_write(
        ctx,
        arg0,
        Val::new(1073725450),
        &ValU32Struct {
            low: x11,
            high: Val::new(0),
        },
        (layout2.map(|c| c._0)),
    )?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:70)
    let x14: ValU32Struct = x4._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:83)
    let x15: DecomposeLow2Struct =
        exec_decompose_low2(ctx, x14.low, (layout2.map(|c| c.ptr_decomp)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:84)
    let x16: Val = ((x14.high * Val::new(16384)) + x15.high._super);
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:85)
    let x17: DecomposeLow2Struct = exec_decompose_low2(ctx, x11, (layout2.map(|c| c.len_decomp)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:87)
    let x18: Val = (x17.high_zero._super * x17.low2_nonzero);
    let x19: RegStruct = exec_reg(ctx, x18, (layout2.map(|c| c.len123)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:89)
    let x20: Val = (x19._super._super * x15.low2_nonzero);
    let x21: RegStruct = exec_reg(ctx, x20, (layout2.map(|c| c.uneven)))?;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:85)
    let x22: Val = x17.is_zero._super._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:95)
    let x23: Val = (Val::new(1) - x22);
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:89)
    let x24: Val = x21._super._super;
    // ECallHostReadSetup(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:93)
    let x25: Val = ((x22 * Val::new(32)) + ((x23 * x24) * Val::new(12)));
    return Ok(ECallOutputStruct {
        state: (x25 + ((x23 * (Val::new(1) - x24)) * Val::new(13))),
        s0: x16,
        s1: x15.low2._super,
        s2: x11,
    });
}
pub fn exec_e_call_host_write<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ECallHostWriteLayout, Val>,
) -> Result<ECallOutputStruct> {
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:102)
    eqz!(
        (arg1.state - Val::new(11)),
        "ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:102)"
    );
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:104)
    let x3: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725450), (layout2.map(|c| c.fd)))?;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:105)
    let x4: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725451), (layout2.map(|c| c.ptr)))?;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:106)
    let x5: GetDataStruct =
        exec_memory_read(ctx, arg0, Val::new(1073725452), (layout2.map(|c| c.len)))?;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:104)
    let x6: ValU32Struct = x3._super;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:107)
    eqz!(
        x6.high,
        "ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:107)"
    );
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:106)
    let x7: ValU32Struct = x5._super;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:108)
    eqz!(
        x7.high,
        "ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:108)"
    );
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:106)
    let x8: Val = x7.low;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:105)
    let x9: ValU32Struct = x4._super;
    // HostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:11)
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:110)
    let x10: Val = invoke_extern!(ctx, host_write, x6.low, x9.low, x9.high, x8);
    let x11: NondetRegStruct = exec_nondet_u16_reg(ctx, x10, (layout2.map(|c| c.new_len)))?;
    let x12: Val = x11._super;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:112)
    let x13: U16RegStruct = exec_u16_reg(ctx, (x8 - x12), (layout2.map(|c| c.diff)))?;
    // ECallHostWrite(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:114)
    let x14: MemoryWriteStruct = exec_memory_write(
        ctx,
        arg0,
        Val::new(1073725450),
        &ValU32Struct {
            low: x12,
            high: Val::new(0),
        },
        (layout2.map(|c| c._0)),
    )?;
    return Ok(ECallOutputStruct {
        state: Val::new(32),
        s0: Val::new(0),
        s1: Val::new(0),
        s2: Val::new(0),
    });
}
pub fn exec_e_call_host_read_words<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    arg2: Val,
    arg3: Val,
    layout4: BoundLayout<'a, ECallHostReadWordsLayout, Val>,
) -> Result<ECallOutputStruct> {
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:127)
    eqz!(
        (arg1.state - Val::new(13)),
        "ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:127)"
    );
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:128)
    let x5: DecomposeLow2Struct = exec_decompose_low2(ctx, arg3, (layout4.map(|c| c.len_decomp)))?;
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:129)
    let x6: DecomposeLow2Struct =
        exec_decompose_low2(ctx, x5.high._super, (layout4.map(|c| c.words_decomp)))?;
    let x7: NondetRegStruct4Array = x6.low2_hot._super;
    let x8: Val = x6.high_zero._super;
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:131)
    let x9: Val = (x7[to_usize(Val::new(1))]._super * x8);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:132)
    let x10: Val = (x7[to_usize(Val::new(2))]._super * x8);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:133)
    let x11: Val = (x7[to_usize(Val::new(3))]._super * x8);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:134)
    let x12: Val = (Val::new(1) - x8);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:136)
    let x13: Val = (((x9 + x10) + x11) + x12);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:137)
    let x14: ECallHostReadWords__0Struct4Array = map_layout(
        [Val::new(0), Val::new(1), Val::new(2), Val::new(3)],
        (layout4.map(|c| c._1)),
        |x15, x16| {
            // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:138)
            let x17: Val = ([x9, x10, x11, x12][to_usize(x15)] * (arg2 + x15));
            let x18: Val = (Val::new(1) - [x9, x10, x11, x12][to_usize(x15)]);
            let x19: RegStruct = exec_reg(
                ctx,
                (x17 + (x18 * Val::new(1073725504))),
                (x16.map(|c| c.addr)),
            )?;
            // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:139)
            let x20: MemoryWriteUnconstrainedStruct =
                exec_memory_write_unconstrained(ctx, arg0, x19._super._super, (x16.map(|c| c._0)))?;
            return Ok(ECallHostReadWords__0Struct {});
        },
    )?;
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:141)
    let x21: Val = (arg3 - (x13 * Val::new(4)));
    let x22: NondetRegStruct = exec_is_zero(ctx, x21, (layout4.map(|c| c.len_zero)))?;
    let x23: Val = x22._super;
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:146)
    let x24: Val = (Val::new(1) - x23);
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:128)
    let x25: Val = x5.low2_nonzero;
    // ECallHostReadWords(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:144)
    let x26: Val = ((x23 * Val::new(32)) + ((x24 * x25) * Val::new(12)));
    return Ok(ECallOutputStruct {
        state: (x26 + ((x24 * (Val::new(1) - x25)) * Val::new(13))),
        s0: (arg2 + x13),
        s1: Val::new(0),
        s2: x21,
    });
}
pub fn exec_e_call0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, ECall0Layout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:153)
    let x4: BoundLayout<NondetRegLayout, _> = (layout2.map(|c| c.s0));
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:155)
    let x5: BoundLayout<NondetRegLayout, _> = (layout2.map(|c| c.s2));
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
    let x6: BoundLayout<ECall0OutputLayout, _> = (layout2.map(|c| c.output));
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:152)
    let x7: ValU32Struct = arg1.pc_u32;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:156)
    let x8: AddrDecomposeBitsStruct =
        exec_addr_decompose_bits(ctx, &x7, arg1.mode, (layout2.map(|c| c.pc_addr)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:157)
    eqz!(
        x8.low2,
        "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:157)"
    );
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:152)
    let x9: NondetRegStruct8Array = arg1.minor_onehot._super;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
    let x10: BoundLayout<ECall0OutputArm0Layout, _> = (x6.map(|c| c.arm0));
    let x11: BoundLayout<ECall0OutputArm1Layout, _> = (x6.map(|c| c.arm1));
    let x12: BoundLayout<ECall0OutputArm4Layout, _> = (x6.map(|c| c.arm4));
    let x13: BoundLayout<ECall0OutputArm5Layout, _> = (x6.map(|c| c.arm5));
    let x14: BoundLayout<ECall0OutputArm6Layout, _> = (x6.map(|c| c.arm6));
    let x15: BoundLayout<ECall0OutputArm7Layout, _> = (x6.map(|c| c.arm7));
    let x16: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x10.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x10.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x10.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x11.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x11.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x11.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x12.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x12.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x12.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x12.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x12.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x12.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x12.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x12.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x12.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x12.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x12.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x12.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x13.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x13.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    // ECallOutput(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:13)
    // IllegalECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:22)
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:165)
    let x48: ECallOutputStruct = ECallOutputStruct {
        state: Val::new(0),
        s0: Val::new(0),
        s1: Val::new(0),
        s2: Val::new(0),
    };
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
    let x49: BoundLayout<Reg, _> = (((x14.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x14.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x14.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x14.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x14.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x14.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x55: BoundLayout<Reg, _> = (((x14.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x56: BoundLayout<Reg, _> = (((x14.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x57: BoundLayout<Reg, _> = (((x14.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x58: BoundLayout<Reg, _> = (((x14.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x59: BoundLayout<Reg, _> = (((x14.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x60: BoundLayout<Reg, _> = (((x14.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x61: BoundLayout<Reg, _> = (((x14.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x62: BoundLayout<Reg, _> = (((x14.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x63: BoundLayout<Reg, _> = (((x15.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x64: BoundLayout<Reg, _> = (((x15.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x65: BoundLayout<Reg, _> = (((x15.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x66: BoundLayout<Reg, _> = (((x15.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x67: BoundLayout<Reg, _> = (((x15.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x68: BoundLayout<Reg, _> = (((x15.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x69: BoundLayout<Reg, _> = (((x15.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x70: BoundLayout<Reg, _> = (((x15.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x71: BoundLayout<Reg, _> = (((x15.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x72: BoundLayout<Reg, _> = (((x15.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x73: BoundLayout<Reg, _> = (((x15.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x74: BoundLayout<Reg, _> = (((x15.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x75: BoundLayout<Reg, _> = (((x15.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x76: BoundLayout<Reg, _> = (((x15.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x77: ECallOutputStruct;
    if is_true(x9[to_usize(Val::new(0))]._super) {
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:159)
        let x78: ECallOutputStruct =
            exec_machine_e_call(ctx, arg0, arg1, x8._super, (x10.map(|c| c._super)))?;
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = x78;
    } else if is_true(x9[to_usize(Val::new(1))]._super) {
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:160)
        let x79: ECallOutputStruct =
            exec_e_call_terminate(ctx, arg0, arg1, (x11.map(|c| c._super)), global3)?;
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = x79;
    } else if is_true(x9[to_usize(Val::new(2))]._super) {
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:161)
        let x80: ECallOutputStruct =
            exec_e_call_host_read_setup(ctx, arg0, arg1, (x6.map(|c| c.arm2)))?;
        x77 = x80;
    } else if is_true(x9[to_usize(Val::new(3))]._super) {
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:162)
        let x81: ECallOutputStruct = exec_e_call_host_write(ctx, arg0, arg1, (x6.map(|c| c.arm3)))?;
        x77 = x81;
    } else if is_true(x9[to_usize(Val::new(4))]._super) {
        // ECallHostReadBytes(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:121)
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:163)
        eqz!((arg1.state - Val::new(12)), "loc(callsite( ECallHostReadBytes ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :121:16) at  ECall0 ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :163:24)))");
        // ECallHostReadBytes(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:122)
        eqz!(Val::new(2013265920), "loc(callsite( ECallHostReadBytes ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :122:6) at  ECall0 ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :163:24)))");
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = ECallOutputStruct {
            state: Val::new(16),
            s0: Val::new(0),
            s1: Val::new(0),
            s2: Val::new(0),
        };
    } else if is_true(x9[to_usize(Val::new(5))]._super) {
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:164)
        let x82: RegStruct = back_reg(ctx, 1, x4)?;
        let x83: RegStruct = back_reg(ctx, 1, x5)?;
        let x84: ECallOutputStruct = exec_e_call_host_read_words(
            ctx,
            arg0,
            arg1,
            x82._super._super,
            x83._super._super,
            (x13.map(|c| c._super)),
        )?;
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = x84;
    } else if is_true(x9[to_usize(Val::new(6))]._super) {
        // IllegalECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:21)
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:165)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalECall ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :21:6) at  ECall0 ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :165:18)))");
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x55.store(ctx, Val::new(0));
        eqz!(
            x55.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x56.store(ctx, Val::new(0));
        eqz!(
            x56.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x57.store(ctx, Val::new(0));
        eqz!(
            x57.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x58.store(ctx, Val::new(0));
        eqz!(
            x58.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x59.store(ctx, Val::new(0));
        eqz!(
            x59.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x60.store(ctx, Val::new(0));
        eqz!(
            x60.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x61.store(ctx, Val::new(0));
        eqz!(
            x61.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x62.store(ctx, Val::new(0));
        eqz!(
            x62.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = x48;
    } else if is_true(x9[to_usize(Val::new(7))]._super) {
        // IllegalECall(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:21)
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:166)
        eqz!(Val::new(2013265920), "loc(callsite( IllegalECall ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :21:6) at  ECall0 ( zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir :166:18)))");
        // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
        x63.store(ctx, Val::new(0));
        eqz!(
            x63.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x64.store(ctx, Val::new(0));
        eqz!(
            x64.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x65.store(ctx, Val::new(0));
        eqz!(
            x65.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x66.store(ctx, Val::new(0));
        eqz!(
            x66.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x67.store(ctx, Val::new(0));
        eqz!(
            x67.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x68.store(ctx, Val::new(0));
        eqz!(
            x68.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x69.store(ctx, Val::new(0));
        eqz!(
            x69.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x70.store(ctx, Val::new(0));
        eqz!(
            x70.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x71.store(ctx, Val::new(0));
        eqz!(
            x71.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x72.store(ctx, Val::new(0));
        eqz!(
            x72.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x73.store(ctx, Val::new(0));
        eqz!(
            x73.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x74.store(ctx, Val::new(0));
        eqz!(
            x74.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x75.store(ctx, Val::new(0));
        eqz!(
            x75.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x76.store(ctx, Val::new(0));
        eqz!(
            x76.load(ctx, 0),
            "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)"
        );
        x77 = x48;
    } else {
        bail!("Reached unreachable mux arm")
    } // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:168)
    let x85: RegStruct = exec_reg(ctx, x77.s0, x4)?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:169)
    let x86: RegStruct = exec_reg(ctx, x77.s1, (layout2.map(|c| c.s1)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:170)
    let x87: RegStruct = exec_reg(ctx, x77.s2, x5)?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:158)
    let x88: Val = x77.state;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:171)
    let x89: NondetRegStruct =
        exec_is_zero(ctx, (x88 - Val::new(32)), (layout2.map(|c| c.is_decode)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:172)
    let x90: NondetRegStruct =
        exec_is_zero(ctx, (x88 - Val::new(16)), (layout2.map(|c| c.is_p2_entry)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:173)
    let x91: Val = ((x89._super + x90._super) * Val::new(4));
    // DenormedValU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:20)
    // AddU32(zirgen/circuit/rv32im/v2/dsl/u32.zir:27)
    let x92: DenormedValU32Struct = DenormedValU32Struct {
        low: (x7.low + x91),
        high: x7.high,
    };
    let x93: NormalizeU32Struct = exec_normalize_u32(ctx, &x92, (layout2.map(|c| c.add_pc)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:152)
    let x94: Val = arg0._super._super;
    // GetDiffCount(zirgen/circuit/rv32im/v2/dsl/mem.zir:22)
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:175)
    let x95: Val = invoke_extern!(ctx, get_diff_count, x94);
    let x96: CycleArgStruct = exec_cycle_arg(ctx, neg_0(x95)?, x94, (layout2.map(|c| c.arg)))?;
    // ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:177)
    let x97: Val = (x96.cycle._super - x94);
    eqz!(
        x97,
        "ECall0(zirgen/circuit/rv32im/v2/dsl/inst_ecall.zir:177)"
    );
    return Ok(InstOutputStruct {
        new_pc: x93._super,
        new_state: x88,
        new_mode: Val::new(1),
    });
}
pub fn exec_s_box<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, SBoxLayout, Val>,
) -> Result<RegStruct> {
    // SBox(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:25)
    let x2: RegStruct = exec_reg(ctx, ((arg0 * arg0) * arg0), (layout1.map(|c| c.cubed)))?;
    let x3: Val = x2._super._super;
    // SBox(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:26)
    let x4: RegStruct = exec_reg(ctx, ((x3 * x3) * arg0), (layout1.map(|c| c._super)))?;
    return Ok(x4);
}
pub fn exec_do_int_round<'a>(
    ctx: &'a ExecContext,
    arg0: &Val24Array,
    arg1: Val,
    layout2: BoundLayout<'a, DoIntRoundLayout, Val>,
) -> Result<MultiplyByMIntStruct> {
    // DoIntRound(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:32)
    let x3: RegStruct = exec_s_box(
        ctx,
        (arg0[to_usize(Val::new(0))] + arg1),
        (layout2.map(|c| c.sbox)),
    )?;
    let x4: Val = x3._super._super;
    // MultiplyByMInt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:13)
    // DoIntRound(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:34)
    let x5: Val = (((x4 + arg0[to_usize(Val::new(1))]) + arg0[to_usize(Val::new(2))])
        + arg0[to_usize(Val::new(3))]);
    let x6: Val = (((x5 + arg0[to_usize(Val::new(4))]) + arg0[to_usize(Val::new(5))])
        + arg0[to_usize(Val::new(6))]);
    let x7: Val = (((x6 + arg0[to_usize(Val::new(7))]) + arg0[to_usize(Val::new(8))])
        + arg0[to_usize(Val::new(9))]);
    let x8: Val = (((x7 + arg0[to_usize(Val::new(10))]) + arg0[to_usize(Val::new(11))])
        + arg0[to_usize(Val::new(12))]);
    let x9: Val = (((x8 + arg0[to_usize(Val::new(13))]) + arg0[to_usize(Val::new(14))])
        + arg0[to_usize(Val::new(15))]);
    let x10: Val = (((x9 + arg0[to_usize(Val::new(16))]) + arg0[to_usize(Val::new(17))])
        + arg0[to_usize(Val::new(18))]);
    let x11: Val = (((x10 + arg0[to_usize(Val::new(19))]) + arg0[to_usize(Val::new(20))])
        + arg0[to_usize(Val::new(21))]);
    let x12: Val = ((x11 + arg0[to_usize(Val::new(22))]) + arg0[to_usize(Val::new(23))]);
    // MultiplyByMInt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:14)
    let x13: MultiplyByMInt_Super_SuperStruct24Array = [
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (x4 * Val::new(1083257840))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(1))] * Val::new(375892129))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(2))] * Val::new(111593398))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(3))] * Val::new(1867716110))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(4))] * Val::new(658182609))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(5))] * Val::new(51866717))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(6))] * Val::new(1928969209))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(7))] * Val::new(1942928017))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(8))] * Val::new(1558116381))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(9))] * Val::new(20525701))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(10))] * Val::new(1188752902))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(11))] * Val::new(106789798))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(12))] * Val::new(1389833583))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(13))] * Val::new(98371040))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(14))] * Val::new(1001081699))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(15))] * Val::new(1792686146))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(16))] * Val::new(801504236))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(17))] * Val::new(1997365680))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(18))] * Val::new(1461037801))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(19))] * Val::new(65998480))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(20))] * Val::new(1974912880))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(21))] * Val::new(606789471))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(22))] * Val::new(13683276))),
        },
        MultiplyByMInt_Super_SuperStruct {
            _super: (x12 + (arg0[to_usize(Val::new(23))] * Val::new(918610824))),
        },
    ];
    return Ok(MultiplyByMIntStruct { _super: x13 });
}
pub fn exec_do_int_rounds<'a>(
    ctx: &'a ExecContext,
    arg0: &Val24Array,
    layout1: BoundLayout<'a, DoIntRoundsLayout, Val>,
) -> Result<DoIntRoundsStruct> {
    // DoIntRounds(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:38)
    let x2: DoIntRounds__0_SuperStruct21Array = [
        DoIntRounds__0_SuperStruct {
            _super: Val::new(497520322),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1930103076),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1052077299),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1540960371),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(924863639),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1365519753),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1726563304),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(440300254),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1891545577),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(822033215),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1111544260),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(308575117),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1708681573),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1240419708),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1199068823),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1186174623),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1551596046),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1886977120),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1327682690),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1210751726),
        },
        DoIntRounds__0_SuperStruct {
            _super: Val::new(1810596765),
        },
    ];
    let x3: Val24Array = reduce_layout(x2, *arg0, (layout1.map(|c| c._super)), |x4, x5, x6| {
        let x7: MultiplyByMIntStruct = exec_do_int_round(ctx, &x4, x5._super, x6)?;
        let x8: MultiplyByMInt_Super_SuperStruct24Array = x7._super;
        let x9: Val24Array = [
            x8[to_usize(Val::new(0))]._super,
            x8[to_usize(Val::new(1))]._super,
            x8[to_usize(Val::new(2))]._super,
            x8[to_usize(Val::new(3))]._super,
            x8[to_usize(Val::new(4))]._super,
            x8[to_usize(Val::new(5))]._super,
            x8[to_usize(Val::new(6))]._super,
            x8[to_usize(Val::new(7))]._super,
            x8[to_usize(Val::new(8))]._super,
            x8[to_usize(Val::new(9))]._super,
            x8[to_usize(Val::new(10))]._super,
            x8[to_usize(Val::new(11))]._super,
            x8[to_usize(Val::new(12))]._super,
            x8[to_usize(Val::new(13))]._super,
            x8[to_usize(Val::new(14))]._super,
            x8[to_usize(Val::new(15))]._super,
            x8[to_usize(Val::new(16))]._super,
            x8[to_usize(Val::new(17))]._super,
            x8[to_usize(Val::new(18))]._super,
            x8[to_usize(Val::new(19))]._super,
            x8[to_usize(Val::new(20))]._super,
            x8[to_usize(Val::new(21))]._super,
            x8[to_usize(Val::new(22))]._super,
            x8[to_usize(Val::new(23))]._super,
        ];
        return Ok(x9);
    })?;
    return Ok(DoIntRoundsStruct { _super: x3 });
}
pub fn exec_do_ext_round<'a>(
    ctx: &'a ExecContext,
    arg0: &Val24Array,
    arg1: &Val24Array,
    layout2: BoundLayout<'a, DoExtRoundLayout, Val>,
) -> Result<MultiplyByMExtStruct> {
    // DoExtRound(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:103)
    let x3: RegStruct24Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
            Val::new(8),
            Val::new(9),
            Val::new(10),
            Val::new(11),
            Val::new(12),
            Val::new(13),
            Val::new(14),
            Val::new(15),
            Val::new(16),
            Val::new(17),
            Val::new(18),
            Val::new(19),
            Val::new(20),
            Val::new(21),
            Val::new(22),
            Val::new(23),
        ],
        (layout2.map(|c| c._1)),
        |x4, x5| {
            let x6: RegStruct = exec_s_box(ctx, (arg0[to_usize(x4)] + arg1[to_usize(x4)]), x5)?;
            return Ok(x6);
        },
    )?;
    let x7: Val = x3[to_usize(Val::new(0))]._super._super;
    let x8: Val = x3[to_usize(Val::new(1))]._super._super;
    let x9: Val = x3[to_usize(Val::new(2))]._super._super;
    let x10: Val = x3[to_usize(Val::new(3))]._super._super;
    let x11: Val = x3[to_usize(Val::new(4))]._super._super;
    let x12: Val = x3[to_usize(Val::new(5))]._super._super;
    let x13: Val = x3[to_usize(Val::new(6))]._super._super;
    let x14: Val = x3[to_usize(Val::new(7))]._super._super;
    let x15: Val = x3[to_usize(Val::new(8))]._super._super;
    let x16: Val = x3[to_usize(Val::new(9))]._super._super;
    let x17: Val = x3[to_usize(Val::new(10))]._super._super;
    let x18: Val = x3[to_usize(Val::new(11))]._super._super;
    let x19: Val = x3[to_usize(Val::new(12))]._super._super;
    let x20: Val = x3[to_usize(Val::new(13))]._super._super;
    let x21: Val = x3[to_usize(Val::new(14))]._super._super;
    let x22: Val = x3[to_usize(Val::new(15))]._super._super;
    let x23: Val = x3[to_usize(Val::new(16))]._super._super;
    let x24: Val = x3[to_usize(Val::new(17))]._super._super;
    let x25: Val = x3[to_usize(Val::new(18))]._super._super;
    let x26: Val = x3[to_usize(Val::new(19))]._super._super;
    let x27: Val = x3[to_usize(Val::new(20))]._super._super;
    let x28: Val = x3[to_usize(Val::new(21))]._super._super;
    let x29: Val = x3[to_usize(Val::new(22))]._super._super;
    let x30: Val = x3[to_usize(Val::new(23))]._super._super;
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:61)
    let x31: Val = (x7 + x8);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x32: Val = (x9 + x10);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x33: Val = ((x8 * Val::new(2)) + x32);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x34: Val = ((x10 * Val::new(2)) + x31);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x35: Val = ((x32 * Val::new(4)) + x34);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x36: Val = ((x31 * Val::new(4)) + x33);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x37: Val = (x34 + x36);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x38: Val = (x33 + x35);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x39: Val = (x11 + x12);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x40: Val = (x13 + x14);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x41: Val = ((x12 * Val::new(2)) + x40);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x42: Val = ((x14 * Val::new(2)) + x39);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x43: Val = ((x40 * Val::new(4)) + x42);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x44: Val = ((x39 * Val::new(4)) + x41);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x45: Val = (x42 + x44);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x46: Val = (x41 + x43);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x47: Val = (x15 + x16);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x48: Val = (x17 + x18);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x49: Val = ((x16 * Val::new(2)) + x48);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x50: Val = ((x18 * Val::new(2)) + x47);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x51: Val = ((x48 * Val::new(4)) + x50);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x52: Val = ((x47 * Val::new(4)) + x49);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x53: Val = (x50 + x52);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x54: Val = (x49 + x51);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x55: Val = (x19 + x20);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x56: Val = (x21 + x22);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x57: Val = ((x20 * Val::new(2)) + x56);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x58: Val = ((x22 * Val::new(2)) + x55);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x59: Val = ((x56 * Val::new(4)) + x58);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x60: Val = ((x55 * Val::new(4)) + x57);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x61: Val = (x58 + x60);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x62: Val = (x57 + x59);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x63: Val = (x23 + x24);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x64: Val = (x25 + x26);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x65: Val = ((x24 * Val::new(2)) + x64);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x66: Val = ((x26 * Val::new(2)) + x63);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x67: Val = ((x64 * Val::new(4)) + x66);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x68: Val = ((x63 * Val::new(4)) + x65);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x69: Val = (x66 + x68);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x70: Val = (x65 + x67);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x71: Val = (x27 + x28);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x72: Val = (x29 + x30);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x73: Val = ((x28 * Val::new(2)) + x72);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x74: Val = ((x30 * Val::new(2)) + x71);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x75: Val = ((x72 * Val::new(4)) + x74);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x76: Val = ((x71 * Val::new(4)) + x73);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x77: Val = (x74 + x76);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x78: Val = (x73 + x75);
    // ReduceVec4(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:54)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:64)
    let x79: Val = (((x37 + x45) + x53) + x61);
    let x80: Val = (((x36 + x44) + x52) + x60);
    let x81: Val = (((x38 + x46) + x54) + x62);
    let x82: Val = (((x35 + x43) + x51) + x59);
    let x83: Val = ((x79 + x69) + x77);
    let x84: Val = ((x80 + x68) + x76);
    let x85: Val = ((x81 + x70) + x78);
    let x86: Val = ((x82 + x67) + x75);
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:65)
    let x87: MultiplyByMExt_Super_SuperStruct24Array = [
        MultiplyByMExt_Super_SuperStruct {
            _super: (x37 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x36 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x38 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x35 + x86),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x45 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x44 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x46 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x43 + x86),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x53 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x52 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x54 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x51 + x86),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x61 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x60 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x62 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x59 + x86),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x69 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x68 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x70 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x67 + x86),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x77 + x83),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x76 + x84),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x78 + x85),
        },
        MultiplyByMExt_Super_SuperStruct {
            _super: (x75 + x86),
        },
    ];
    return Ok(MultiplyByMExtStruct { _super: x87 });
}
pub fn exec_do_ext_round_by_idx<'a>(
    ctx: &'a ExecContext,
    arg0: &Val24Array,
    arg1: Val,
    layout2: BoundLayout<'a, DoExtRoundByIdxLayout, Val>,
) -> Result<MultiplyByMExtStruct> {
    // DoExtRoundByIdx(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:115)
    let x3: OneHot_8_Struct = exec_one_hot_8_(ctx, arg1, (layout2.map(|c| c.idx_hot)))?;
    let x4: NondetRegStruct8Array = x3.bits;
    let x5: Val = x4[to_usize(Val::new(0))]._super;
    let x6: Val = x4[to_usize(Val::new(1))]._super;
    let x7: Val = x4[to_usize(Val::new(2))]._super;
    let x8: Val = x4[to_usize(Val::new(3))]._super;
    let x9: Val = x4[to_usize(Val::new(4))]._super;
    let x10: Val = x4[to_usize(Val::new(5))]._super;
    let x11: Val = x4[to_usize(Val::new(6))]._super;
    let x12: Val = x4[to_usize(Val::new(7))]._super;
    // AddConsts(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:107)
    // DoExtRoundByIdx(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:118)
    let x13: Val =
        (((x5 * Val::new(262278199)) + (x6 * Val::new(695835963))) + (x7 * Val::new(1147522062)));
    let x14: Val =
        (((x5 * Val::new(127253399)) + (x6 * Val::new(1845603984))) + (x7 * Val::new(27129487)));
    let x15: Val =
        (((x5 * Val::new(314968988)) + (x6 * Val::new(540703332))) + (x7 * Val::new(1257820264)));
    let x16: Val =
        (((x5 * Val::new(246143118)) + (x6 * Val::new(1333667262))) + (x7 * Val::new(142102402)));
    let x17: Val =
        (((x5 * Val::new(157582794)) + (x6 * Val::new(1917861751))) + (x7 * Val::new(217046702)));
    let x18: Val =
        (((x5 * Val::new(118043943)) + (x6 * Val::new(1170029417))) + (x7 * Val::new(1664590951)));
    let x19: Val =
        (((x5 * Val::new(454905424)) + (x6 * Val::new(1989924532))) + (x7 * Val::new(855276054)));
    let x20: Val =
        (((x5 * Val::new(815798990)) + (x6 * Val::new(1518763784))) + (x7 * Val::new(1215259350)));
    let x21: Val =
        (((x5 * Val::new(1004040026)) + (x6 * Val::new(1339793538))) + (x7 * Val::new(946500736)));
    let x22: Val =
        (((x5 * Val::new(1773108264)) + (x6 * Val::new(622609176))) + (x7 * Val::new(552696906)));
    let x23: Val =
        (((x5 * Val::new(1066694495)) + (x6 * Val::new(686842369))) + (x7 * Val::new(1424297384)));
    let x24: Val =
        (((x5 * Val::new(1930780904)) + (x6 * Val::new(1737016378))) + (x7 * Val::new(538103555)));
    let x25: Val =
        (((x5 * Val::new(1180307149)) + (x6 * Val::new(1282239129))) + (x7 * Val::new(1608853840)));
    let x26: Val =
        (((x5 * Val::new(1464793095)) + (x6 * Val::new(897025192))) + (x7 * Val::new(162510541)));
    let x27: Val =
        (((x5 * Val::new(1660766320)) + (x6 * Val::new(716894289))) + (x7 * Val::new(623051854)));
    let x28: Val =
        (((x5 * Val::new(1389166148)) + (x6 * Val::new(1997503974))) + (x7 * Val::new(1549062383)));
    let x29: Val =
        (((x5 * Val::new(343354132)) + (x6 * Val::new(395622276))) + (x7 * Val::new(1908416316)));
    let x30: Val =
        (((x5 * Val::new(1307439985)) + (x6 * Val::new(1201063290))) + (x7 * Val::new(1622328571)));
    let x31: Val =
        (((x5 * Val::new(638242172)) + (x6 * Val::new(1917549072))) + (x7 * Val::new(1079030649)));
    let x32: Val =
        (((x5 * Val::new(525458520)) + (x6 * Val::new(1150912935))) + (x7 * Val::new(1584033957)));
    let x33: Val =
        (((x5 * Val::new(1964135730)) + (x6 * Val::new(1687379185))) + (x7 * Val::new(1099252725)));
    let x34: Val =
        (((x5 * Val::new(1751797115)) + (x6 * Val::new(1507936940))) + (x7 * Val::new(1910423126)));
    let x35: Val =
        (((x5 * Val::new(1421525369)) + (x6 * Val::new(241306552))) + (x7 * Val::new(447555988)));
    let x36: Val =
        (((x5 * Val::new(831813382)) + (x6 * Val::new(989176635))) + (x7 * Val::new(862495875)));
    let x37: Val = (((x13 + (x8 * Val::new(128479034))) + (x9 * Val::new(53041581)))
        + (x10 * Val::new(1209164052)));
    let x38: Val = (((x14 + (x8 * Val::new(1587822577))) + (x9 * Val::new(723038058)))
        + (x10 * Val::new(714957516)));
    let x39: Val = (((x15 + (x8 * Val::new(608401422))) + (x9 * Val::new(1439947916)))
        + (x10 * Val::new(390340387)));
    let x40: Val = (((x16 + (x8 * Val::new(1290028279))) + (x9 * Val::new(1136469704)))
        + (x10 * Val::new(1213686459)));
    let x41: Val = (((x17 + (x8 * Val::new(342857858))) + (x9 * Val::new(205609311)))
        + (x10 * Val::new(790726260)));
    let x42: Val = (((x18 + (x8 * Val::new(825405577))) + (x9 * Val::new(1883820770)))
        + (x10 * Val::new(117294666)));
    let x43: Val = (((x19 + (x8 * Val::new(427731030))) + (x9 * Val::new(14387587)))
        + (x10 * Val::new(140621810)));
    let x44: Val = (((x20 + (x8 * Val::new(1718628547))) + (x9 * Val::new(720724951)))
        + (x10 * Val::new(993455846)));
    let x45: Val = (((x21 + (x8 * Val::new(588764636))) + (x9 * Val::new(1854174607)))
        + (x10 * Val::new(1889603648)));
    let x46: Val = (((x22 + (x8 * Val::new(204228775))) + (x9 * Val::new(1629316321)))
        + (x10 * Val::new(78845751)));
    let x47: Val = (((x23 + (x8 * Val::new(1454563174))) + (x9 * Val::new(530151394)))
        + (x10 * Val::new(925018226)));
    let x48: Val = (((x24 + (x8 * Val::new(1740472809))) + (x9 * Val::new(1679178250)))
        + (x10 * Val::new(708123747)));
    let x49: Val = (((x25 + (x8 * Val::new(1338899225))) + (x9 * Val::new(1549779579)))
        + (x10 * Val::new(1647665372)));
    let x50: Val = (((x26 + (x8 * Val::new(1269493554))) + (x9 * Val::new(48375137)))
        + (x10 * Val::new(1649953458)));
    let x51: Val = (((x27 + (x8 * Val::new(53007114))) + (x9 * Val::new(976057819)))
        + (x10 * Val::new(942439428)));
    let x52: Val = (((x28 + (x8 * Val::new(1647670797))) + (x9 * Val::new(463976218)))
        + (x10 * Val::new(1006235079)));
    let x53: Val = (((x29 + (x8 * Val::new(306391314))) + (x9 * Val::new(875839332)))
        + (x10 * Val::new(238616145)));
    let x54: Val = (((x30 + (x8 * Val::new(172614232))) + (x9 * Val::new(1946596189)))
        + (x10 * Val::new(930036496)));
    let x55: Val = (((x31 + (x8 * Val::new(51256176))) + (x9 * Val::new(434078361)))
        + (x10 * Val::new(1401020792)));
    let x56: Val = (((x32 + (x8 * Val::new(1221257987))) + (x9 * Val::new(1878280202)))
        + (x10 * Val::new(989618631)));
    let x57: Val = (((x33 + (x8 * Val::new(1239734761))) + (x9 * Val::new(1363837384)))
        + (x10 * Val::new(1545325389)));
    let x58: Val = (((x34 + (x8 * Val::new(273790406))) + (x9 * Val::new(1470845646)))
        + (x10 * Val::new(1715719711)));
    let x59: Val = (((x35 + (x8 * Val::new(1781980094))) + (x9 * Val::new(1792450386)))
        + (x10 * Val::new(755691969)));
    let x60: Val = (((x36 + (x8 * Val::new(1291790245))) + (x9 * Val::new(1040977421)))
        + (x10 * Val::new(150307788)));
    let x61: Val24Array = [
        ((x37 + (x11 * Val::new(1567618575))) + (x12 * Val::new(1206940496))),
        ((x38 + (x11 * Val::new(1663353317))) + (x12 * Val::new(1896271507))),
        ((x39 + (x11 * Val::new(1950429111))) + (x12 * Val::new(1003792297))),
        ((x40 + (x11 * Val::new(1891637550))) + (x12 * Val::new(738091882))),
        ((x41 + (x11 * Val::new(192082241))) + (x12 * Val::new(1124078057))),
        ((x42 + (x11 * Val::new(1080533265))) + (x12 * Val::new(1889898))),
        ((x43 + (x11 * Val::new(1463323727))) + (x12 * Val::new(813674331))),
        ((x44 + (x11 * Val::new(890243564))) + (x12 * Val::new(228520958))),
        ((x45 + (x11 * Val::new(158646617))) + (x12 * Val::new(1832911930))),
        ((x46 + (x11 * Val::new(1402624179))) + (x12 * Val::new(781141772))),
        ((x47 + (x11 * Val::new(59510015))) + (x12 * Val::new(459826664))),
        ((x48 + (x11 * Val::new(1198261138))) + (x12 * Val::new(202271745))),
        ((x49 + (x11 * Val::new(1065075039))) + (x12 * Val::new(1296144415))),
        ((x50 + (x11 * Val::new(1150410028))) + (x12 * Val::new(1111203133))),
        ((x51 + (x11 * Val::new(1293938517))) + (x12 * Val::new(1090783436))),
        ((x52 + (x11 * Val::new(76770019))) + (x12 * Val::new(641665156))),
        ((x53 + (x11 * Val::new(1478577620))) + (x12 * Val::new(1393671120))),
        ((x54 + (x11 * Val::new(1748789933))) + (x12 * Val::new(1303271640))),
        ((x55 + (x11 * Val::new(457372011))) + (x12 * Val::new(809508074))),
        ((x56 + (x11 * Val::new(1841795381))) + (x12 * Val::new(162506101))),
        ((x57 + (x11 * Val::new(760115692))) + (x12 * Val::new(1262312258))),
        ((x58 + (x11 * Val::new(1042892522))) + (x12 * Val::new(1672219447))),
        ((x59 + (x11 * Val::new(1507649755))) + (x12 * Val::new(1608891156))),
        ((x60 + (x11 * Val::new(1827572010))) + (x12 * Val::new(1380248020))),
    ];
    // DoExtRoundByIdx(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:122)
    let x62: MultiplyByMExtStruct =
        exec_do_ext_round(ctx, arg0, &x61, (layout2.map(|c| c._super)))?;
    return Ok(x62);
}
pub fn back_poseidon_state<'a>(
    ctx: &'a ExecContext,
    distance0: Index,
    layout1: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:34)
    let x2: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.has_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:35)
    let x3: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.state_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:36)
    let x4: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.buf_out_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:37)
    let x5: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.is_elem)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:38)
    let x6: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.check_out)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:39)
    let x7: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.load_tx_type)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:41)
    let x8: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.next_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:42)
    let x9: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.sub_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:43)
    let x10: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.buf_in_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:44)
    let x11: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.count)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:45)
    let x12: RegStruct = back_reg(ctx, distance0, (layout1.map(|c| c.mode)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:47)
    let x13: RegStruct24Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
            Val::new(8),
            Val::new(9),
            Val::new(10),
            Val::new(11),
            Val::new(12),
            Val::new(13),
            Val::new(14),
            Val::new(15),
            Val::new(16),
            Val::new(17),
            Val::new(18),
            Val::new(19),
            Val::new(20),
            Val::new(21),
            Val::new(22),
            Val::new(23),
        ],
        (layout1.map(|c| c.inner)),
        |x14, x15| {
            let x16: RegStruct = back_reg(ctx, distance0, x15)?;
            return Ok(x16);
        },
    )?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:48)
    let x17: NondetExtRegStruct = back_ext_reg(ctx, distance0, (layout1.map(|c| c.zcheck)))?;
    return Ok(PoseidonStateStruct {
        has_state: x2,
        state_addr: x3,
        buf_out_addr: x4,
        is_elem: x5,
        check_out: x6,
        load_tx_type: x7,
        next_state: x8,
        sub_state: x9,
        buf_in_addr: x10,
        count: x11,
        mode: x12,
        inner: x13,
        zcheck: x17,
    });
}
pub fn exec_poseidon_state<'a>(
    ctx: &'a ExecContext,
    arg0: &PoseidonOpDefStruct,
    arg1: Val,
    arg2: Val,
    arg3: Val,
    arg4: Val,
    arg5: Val,
    arg6: &Val24Array,
    arg7: ExtVal,
    layout8: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:34)
    let x9: RegStruct = exec_reg(ctx, arg0.has_state, (layout8.map(|c| c.has_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:35)
    let x10: RegStruct = exec_reg(ctx, arg0.state_addr, (layout8.map(|c| c.state_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:36)
    let x11: RegStruct = exec_reg(ctx, arg0.buf_out_addr, (layout8.map(|c| c.buf_out_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:37)
    let x12: RegStruct = exec_reg(ctx, arg0.is_elem, (layout8.map(|c| c.is_elem)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:38)
    let x13: RegStruct = exec_reg(ctx, arg0.check_out, (layout8.map(|c| c.check_out)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:39)
    let x14: RegStruct = exec_reg(ctx, arg0.load_tx_type, (layout8.map(|c| c.load_tx_type)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:41)
    let x15: RegStruct = exec_reg(ctx, arg1, (layout8.map(|c| c.next_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:42)
    let x16: RegStruct = exec_reg(ctx, arg2, (layout8.map(|c| c.sub_state)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:43)
    let x17: RegStruct = exec_reg(ctx, arg3, (layout8.map(|c| c.buf_in_addr)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:44)
    let x18: RegStruct = exec_reg(ctx, arg4, (layout8.map(|c| c.count)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:45)
    let x19: RegStruct = exec_reg(ctx, arg5, (layout8.map(|c| c.mode)))?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:47)
    let x20: RegStruct24Array = map_layout(*arg6, (layout8.map(|c| c.inner)), |x21, x22| {
        let x23: RegStruct = exec_reg(ctx, x21, x22)?;
        return Ok(x23);
    })?;
    // PoseidonState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:48)
    let x24: NondetExtRegStruct = exec_ext_reg(ctx, arg7, (layout8.map(|c| c.zcheck)))?;
    return Ok(PoseidonStateStruct {
        has_state: x9,
        state_addr: x10,
        buf_out_addr: x11,
        is_elem: x12,
        check_out: x13,
        load_tx_type: x14,
        next_state: x15,
        sub_state: x16,
        buf_in_addr: x17,
        count: x18,
        mode: x19,
        inner: x20,
        zcheck: x24,
    });
}
pub fn exec_poseidon_invalid<'a>(
    ctx: &'a ExecContext,
    layout0: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonInvalid(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:52)
    eqz!(
        Val::new(2013265920),
        "PoseidonInvalid(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:52)"
    );
    // PoseidonInvalid(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:61)
    let x1: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: Val::new(0),
            state_addr: Val::new(0),
            buf_out_addr: Val::new(0),
            is_elem: Val::new(0),
            check_out: Val::new(0),
            load_tx_type: Val::new(0),
        },
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout0,
    )?;
    return Ok(x1);
}
pub fn exec_read_addr<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, ReadAddrLayout, Val>,
) -> Result<ReadAddrStruct> {
    // ReadAddr(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:78)
    let x3: GetDataStruct = exec_memory_read(
        ctx,
        arg0,
        (arg1 + Val::new(1073725440)),
        (layout2.map(|c| c.addr32)),
    )?;
    let x4: ValU32Struct = x3._super;
    // ReadAddr(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:79)
    let x5: Val = ((x4.high * Val::new(16384)) + (x4.low * Val::new(1509949441)));
    return Ok(ReadAddrStruct { _super: x5 });
}
pub fn exec_poseidon_ecall<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonEcallLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:84)
    let x3: ReadAddrStruct =
        exec_read_addr(ctx, arg0, Val::new(10), (layout2.map(|c| c.state_addr)))?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:85)
    let x4: ReadAddrStruct =
        exec_read_addr(ctx, arg0, Val::new(11), (layout2.map(|c| c.buf_in_addr)))?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:86)
    let x5: ReadAddrStruct =
        exec_read_addr(ctx, arg0, Val::new(12), (layout2.map(|c| c.buf_out_addr)))?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:87)
    let x6: GetDataStruct = exec_memory_read(
        ctx,
        arg0,
        Val::new(1073725453),
        (layout2.map(|c| c.bits_and_count)),
    )?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:84)
    let x7: Val = x3._super;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:90)
    let x8: NondetRegStruct = exec_is_zero(ctx, x7, (layout2.map(|c| c._0)))?;
    let x9: Val = (Val::new(1) - x8._super);
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:87)
    let x10: ValU32Struct = x6._super;
    let x11: Val = x10.low;
    let x12: Val = x10.high;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:94)
    let x13: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x12, Val::new(32768))? * Val::new(2013204481)),
        (layout2.map(|c| c.is_elem)),
    )?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:95)
    let x14: NondetRegStruct = exec_nondet_bit_reg(
        ctx,
        (bit_and(x12, Val::new(16384))? * Val::new(2013143041)),
        (layout2.map(|c| c.check_out)),
    )?;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:94)
    let x15: Val = x13._super;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:95)
    let x16: Val = x14._super;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:96)
    eqz!(
        (x12 - ((x15 * Val::new(32768)) + (x16 * Val::new(16384)))),
        "PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:96)"
    );
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:99)
    let x17: NondetRegStruct = exec_is_zero(ctx, x11, (layout2.map(|c| c.count_zero)))?;
    let x18: Val = x17._super;
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:102)
    let x19: Val = (Val::new(1) - x18);
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:101)
    let x20: Val = ((x18 * Val::new(32)) + ((x19 * x9) * Val::new(17)));
    // PoseidonEcall(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:105)
    let x21: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x9,
            state_addr: x7,
            buf_out_addr: x5._super,
            is_elem: x15,
            check_out: x16,
            load_tx_type: Val::new(0),
        },
        (x20 + ((x19 * (Val::new(1) - x9)) * Val::new(18))),
        Val::new(0),
        x4._super,
        x11,
        arg1,
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x21);
}
pub fn exec_poseidon_paging_entry<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // Div(<preamble>:19)
    // PoseidonPagingEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:110)
    let x3: Val = (arg1 * Val::new(1342177281));
    // PoseidonPagingEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:114)
    let x4: Val = ((Val::new(1) - x3) * Val::new(1140850688));
    // PoseidonOpDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:8)
    // PoseidonPagingEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:111)
    let x5: PoseidonOpDefStruct = PoseidonOpDefStruct {
        has_state: Val::new(0),
        state_addr: Val::new(0),
        buf_out_addr: ((x3 * Val::new(1073741824)) + x4),
        is_elem: Val::new(1),
        check_out: Val::new(1),
        load_tx_type: Val::new(1),
    };
    // PoseidonPagingEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:119)
    let x6: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &x5,
        Val::new(22),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        arg1,
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout2,
    )?;
    return Ok(x6);
}
pub fn exec_poseidon_entry<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &ValU32Struct,
    arg2: Val,
    layout3: BoundLayout<'a, PoseidonEntryLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)
    let x4: BoundLayout<PoseidonEntry_SuperLayout, _> = (layout3.map(|c| c._super));
    // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:131)
    let x5: NondetRegStruct =
        exec_is_zero(ctx, (arg1.low + arg1.high), (layout3.map(|c| c.pc_zero)))?;
    let x6: Val = x5._super;
    // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)
    let x7: BoundLayout<PoseidonEntry_SuperArm0Layout, _> = (x4.map(|c| c.arm0));
    let x8: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x9: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x10: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x11: BoundLayout<Reg, _> = (((x7.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x12: BoundLayout<Reg, _> = (((x7.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x7.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x7.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x7.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x7.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x7.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x7.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x7.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x20: PoseidonStateStruct;
    if is_true(x6) {
        // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:133)
        let x21: PoseidonStateStruct =
            exec_poseidon_paging_entry(ctx, arg0, arg2, (x7.map(|c| c._super)))?;
        // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)
        x8.store(ctx, Val::new(0));
        eqz!(
            x8.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x9.store(ctx, Val::new(0));
        eqz!(
            x9.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x10.store(ctx, Val::new(0));
        eqz!(
            x10.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x11.store(ctx, Val::new(0));
        eqz!(
            x11.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)"
        );
        x20 = x21;
    } else if is_true((Val::new(1) - x6)) {
        // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:135)
        let x22: PoseidonStateStruct = exec_poseidon_ecall(ctx, arg0, arg2, (x4.map(|c| c.arm1)))?;
        x20 = x22;
    } else {
        bail!("Reached unreachable mux arm")
    } // PoseidonEntry(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:132)
    let x23: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x4.map(|c| c._super)))?;
    return Ok(x23);
}
pub fn exec_read_elem<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, ReadElemLayout, Val>,
) -> Result<ReadElemStruct> {
    // ReadElem(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:140)
    let x3: GetDataStruct = exec_memory_read(ctx, arg0, arg1, (layout2.map(|c| c.elem32)))?;
    let x4: ValU32Struct = x3._super;
    // ReadElem(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:141)
    let x5: Val = ((x4.high * Val::new(65536)) + x4.low);
    return Ok(ReadElemStruct { _super: x5 });
}
pub fn exec_poseidon_load_state<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonLoadStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:144)
    let x3: Val = arg1.state_addr._super._super;
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:146)
    let x4: ReadElemStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c.load_list)),
        |x5, x6| {
            // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:147)
            let x7: ReadElemStruct = exec_read_elem(ctx, arg0, (x3 + x5), x6)?;
            return Ok(x7);
        },
    )?;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:156)
    let x8: Val = arg1.has_state._super._super;
    let x9: Val = arg1.buf_out_addr._super._super;
    let x10: Val = arg1.is_elem._super._super;
    let x11: Val = arg1.check_out._super._super;
    let x12: Val = arg1.load_tx_type._super._super;
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:144)
    let x13: Val = arg1.buf_in_addr._super._super;
    let x14: Val = arg1.count._super._super;
    let x15: Val = arg1.mode._super._super;
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:149)
    let x16: Val24Array = [
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        x4[to_usize(Val::new(0))]._super,
        x4[to_usize(Val::new(1))]._super,
        x4[to_usize(Val::new(2))]._super,
        x4[to_usize(Val::new(3))]._super,
        x4[to_usize(Val::new(4))]._super,
        x4[to_usize(Val::new(5))]._super,
        x4[to_usize(Val::new(6))]._super,
        x4[to_usize(Val::new(7))]._super,
    ];
    // PoseidonLoadState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:156)
    let x17: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x8,
            state_addr: x3,
            buf_out_addr: x9,
            is_elem: x10,
            check_out: x11,
            load_tx_type: x12,
        },
        Val::new(18),
        Val::new(0),
        x13,
        x14,
        x15,
        &x16,
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x17);
}
pub fn exec_poseidon_load_in_short<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonLoadInShortLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:174)
    let x4: Val = arg1.load_tx_type._super._super;
    // Log(<preamble>:22)
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:175)
    invoke_extern!(ctx, log, "txnType", [x4]);
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:176)
    let x5: OneHot_3_Struct = exec_one_hot_3_(ctx, x4, (layout2.map(|c| c.tx_type)))?;
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:174)
    let x6: Val = arg1.buf_in_addr._super._super;
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:177)
    let x7: GetDataStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c.load_list)),
        |x8, x9| {
            // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:178)
            let x10: GetDataStruct = exec_memory_get(ctx, arg0, (x6 + x8), &x5, x9)?;
            return Ok(x10);
        },
    )?;
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:159)
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:180)
    let x11: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x12: BoundLayout<NondetExtRegLayout, _> = (x11.map(|c| c.rng));
    let x13: NondetExtRegStruct = back_ext_reg(ctx, 0, x12)?;
    let x14: ExtVal = x13._super;
    // PolyEvalStateReduce(zirgen/circuit/rv32im/v2/dsl/poly.zir:14)
    // PolyEval(zirgen/circuit/rv32im/v2/dsl/poly.zir:18)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:170)
    let x15: ExtVal = (x14 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)));
    let x16: ExtVal = (x7[to_usize(Val::new(0))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x17: ExtVal = (x15 * x14);
    let x18: ExtVal = (x7[to_usize(Val::new(0))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x19: ExtVal = (((x16 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)))
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)))
        + (x18 * x15));
    let x20: ExtVal = (x17 * x14);
    let x21: ExtVal = (x7[to_usize(Val::new(1))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x22: ExtVal = (x20 * x14);
    let x23: ExtVal = (x7[to_usize(Val::new(1))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x24: ExtVal = (x22 * x14);
    let x25: ExtVal = (x7[to_usize(Val::new(2))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x26: ExtVal = (((x19 + (x21 * x17)) + (x23 * x20)) + (x25 * x22));
    let x27: ExtVal = (x24 * x14);
    let x28: ExtVal = (x7[to_usize(Val::new(2))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x29: ExtVal = (x27 * x14);
    let x30: ExtVal = (x7[to_usize(Val::new(3))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x31: ExtVal = (x29 * x14);
    let x32: ExtVal = (x7[to_usize(Val::new(3))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x33: ExtVal = (((x26 + (x28 * x24)) + (x30 * x27)) + (x32 * x29));
    let x34: ExtVal = (x31 * x14);
    let x35: ExtVal = (x7[to_usize(Val::new(4))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x36: ExtVal = (x34 * x14);
    let x37: ExtVal = (x7[to_usize(Val::new(4))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x38: ExtVal = (x36 * x14);
    let x39: ExtVal = (x7[to_usize(Val::new(5))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x40: ExtVal = (((x33 + (x35 * x31)) + (x37 * x34)) + (x39 * x36));
    let x41: ExtVal = (x38 * x14);
    let x42: ExtVal = (x7[to_usize(Val::new(5))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x43: ExtVal = (x41 * x14);
    let x44: ExtVal = (x7[to_usize(Val::new(6))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x45: ExtVal = (x43 * x14);
    let x46: ExtVal = (x7[to_usize(Val::new(6))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x47: ExtVal = (((x40 + (x42 * x38)) + (x44 * x41)) + (x46 * x43));
    let x48: ExtVal = (x7[to_usize(Val::new(7))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x49: ExtVal = (x7[to_usize(Val::new(7))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x50: NondetExtRegStruct = back_ext_reg(ctx, 0, x12)?;
    let x51: ExtVal = x50._super;
    // Pow(zirgen/circuit/rv32im/v2/dsl/poly.zir:10)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:171)
    let x52: ExtVal =
        (((x51 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0))) * x51) * x51);
    let x53: ExtVal = (((x52 * x51) * x51) * x51);
    let x54: ExtVal = (((x53 * x51) * x51) * x51);
    let x55: ExtVal = (((x54 * x51) * x51) * x51);
    let x56: ExtVal = (((x55 * x51) * x51) * x51);
    let x57: ExtVal = (arg1.zcheck._super * (x56 * x51));
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:177)
    let x58: ValU32Struct = x7[to_usize(Val::new(0))]._super;
    let x59: Val = x58.high;
    let x60: ValU32Struct = x7[to_usize(Val::new(1))]._super;
    let x61: Val = x60.high;
    let x62: ValU32Struct = x7[to_usize(Val::new(2))]._super;
    let x63: Val = x62.high;
    let x64: ValU32Struct = x7[to_usize(Val::new(3))]._super;
    let x65: Val = x64.high;
    let x66: ValU32Struct = x7[to_usize(Val::new(4))]._super;
    let x67: Val = x66.high;
    let x68: ValU32Struct = x7[to_usize(Val::new(5))]._super;
    let x69: Val = x68.high;
    let x70: ValU32Struct = x7[to_usize(Val::new(6))]._super;
    let x71: Val = x70.high;
    let x72: ValU32Struct = x7[to_usize(Val::new(7))]._super;
    let x73: Val = x72.high;
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:174)
    let x74: RegStruct24Array = arg1.inner;
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:182)
    let x75: Val = x74[to_usize(Val::new(16))]._super._super;
    let x76: Val = x74[to_usize(Val::new(17))]._super._super;
    let x77: Val = x74[to_usize(Val::new(18))]._super._super;
    let x78: Val = x74[to_usize(Val::new(19))]._super._super;
    let x79: Val = x74[to_usize(Val::new(20))]._super._super;
    let x80: Val = x74[to_usize(Val::new(21))]._super._super;
    let x81: Val = x74[to_usize(Val::new(22))]._super._super;
    let x82: Val = x74[to_usize(Val::new(23))]._super._super;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:194)
    let x83: Val = arg1.has_state._super._super;
    let x84: Val = arg1.state_addr._super._super;
    let x85: Val = arg1.buf_out_addr._super._super;
    let x86: Val = arg1.is_elem._super._super;
    let x87: Val = arg1.check_out._super._super;
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:61)
    let x88: Val = (x58.low + x59);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x89: Val = (x60.low + x61);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x90: Val = ((x59 * Val::new(2)) + x89);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x91: Val = ((x61 * Val::new(2)) + x88);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x92: Val = ((x89 * Val::new(4)) + x91);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x93: Val = ((x88 * Val::new(4)) + x90);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x94: Val = (x91 + x93);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x95: Val = (x90 + x92);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x96: Val = (x62.low + x63);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x97: Val = (x64.low + x65);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x98: Val = ((x63 * Val::new(2)) + x97);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x99: Val = ((x65 * Val::new(2)) + x96);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x100: Val = ((x97 * Val::new(4)) + x99);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x101: Val = ((x96 * Val::new(4)) + x98);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x102: Val = (x99 + x101);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x103: Val = (x98 + x100);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x104: Val = (x66.low + x67);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x105: Val = (x68.low + x69);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x106: Val = ((x67 * Val::new(2)) + x105);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x107: Val = ((x69 * Val::new(2)) + x104);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x108: Val = ((x105 * Val::new(4)) + x107);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x109: Val = ((x104 * Val::new(4)) + x106);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x110: Val = (x107 + x109);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x111: Val = (x106 + x108);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x112: Val = (x70.low + x71);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x113: Val = (x72.low + x73);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x114: Val = ((x71 * Val::new(2)) + x113);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x115: Val = ((x73 * Val::new(2)) + x112);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x116: Val = ((x113 * Val::new(4)) + x115);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x117: Val = ((x112 * Val::new(4)) + x114);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x118: Val = (x115 + x117);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x119: Val = (x114 + x116);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x120: Val = (x75 + x76);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x121: Val = (x77 + x78);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x122: Val = ((x76 * Val::new(2)) + x121);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x123: Val = ((x78 * Val::new(2)) + x120);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x124: Val = ((x121 * Val::new(4)) + x123);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x125: Val = ((x120 * Val::new(4)) + x122);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x126: Val = (x123 + x125);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x127: Val = (x122 + x124);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x128: Val = (x79 + x80);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x129: Val = (x81 + x82);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x130: Val = ((x80 * Val::new(2)) + x129);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x131: Val = ((x82 * Val::new(2)) + x128);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x132: Val = ((x129 * Val::new(4)) + x131);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x133: Val = ((x128 * Val::new(4)) + x130);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x134: Val = (x131 + x133);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x135: Val = (x130 + x132);
    // ReduceVec4(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:54)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:64)
    let x136: Val = (((x94 + x102) + x110) + x118);
    let x137: Val = (((x93 + x101) + x109) + x117);
    let x138: Val = (((x95 + x103) + x111) + x119);
    let x139: Val = (((x92 + x100) + x108) + x116);
    let x140: Val = ((x136 + x126) + x134);
    let x141: Val = ((x137 + x125) + x133);
    let x142: Val = ((x138 + x127) + x135);
    let x143: Val = ((x139 + x124) + x132);
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:174)
    let x144: Val = arg1.count._super._super;
    let x145: Val = arg1.mode._super._super;
    // PoseidonLoadInShort(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:194)
    let x146: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x83,
            state_addr: x84,
            buf_out_addr: x85,
            is_elem: x86,
            check_out: x87,
            load_tx_type: x4,
        },
        Val::new(24),
        Val::new(0),
        (x6 + Val::new(8)),
        x144,
        x145,
        &[
            (x94 + x140),
            (x93 + x141),
            (x95 + x142),
            (x92 + x143),
            (x102 + x140),
            (x101 + x141),
            (x103 + x142),
            (x100 + x143),
            (x110 + x140),
            (x109 + x141),
            (x111 + x142),
            (x108 + x143),
            (x118 + x140),
            (x117 + x141),
            (x119 + x142),
            (x116 + x143),
            (x126 + x140),
            (x125 + x141),
            (x127 + x142),
            (x124 + x143),
            (x134 + x140),
            (x133 + x141),
            (x135 + x142),
            (x132 + x143),
        ],
        (x57 + ((x47 + (x48 * x45)) + (x49 * (x45 * x14)))),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x146);
}
pub fn exec_poseidon_load_in_low<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonLoadInLowLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:197)
    let x4: Val = arg1.load_tx_type._super._super;
    // Log(<preamble>:22)
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:198)
    invoke_extern!(ctx, log, "txnType", [x4]);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:199)
    let x5: OneHot_3_Struct = exec_one_hot_3_(ctx, x4, (layout2.map(|c| c.tx_type)))?;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:197)
    let x6: Val = arg1.buf_in_addr._super._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x7: GetDataStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c.load_list)),
        |x8, x9| {
            // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:201)
            let x10: GetDataStruct = exec_memory_get(ctx, arg0, (x6 + x8), &x5, x9)?;
            return Ok(x10);
        },
    )?;
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:159)
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:203)
    let x11: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x12: BoundLayout<NondetExtRegLayout, _> = (x11.map(|c| c.rng));
    let x13: NondetExtRegStruct = back_ext_reg(ctx, 0, x12)?;
    let x14: ExtVal = x13._super;
    // PolyEvalStateReduce(zirgen/circuit/rv32im/v2/dsl/poly.zir:14)
    // PolyEval(zirgen/circuit/rv32im/v2/dsl/poly.zir:18)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:170)
    let x15: ExtVal = (x14 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)));
    let x16: ExtVal = (x7[to_usize(Val::new(0))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x17: ExtVal = (x15 * x14);
    let x18: ExtVal = (x7[to_usize(Val::new(0))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x19: ExtVal = (((x16 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)))
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)))
        + (x18 * x15));
    let x20: ExtVal = (x17 * x14);
    let x21: ExtVal = (x7[to_usize(Val::new(1))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x22: ExtVal = (x20 * x14);
    let x23: ExtVal = (x7[to_usize(Val::new(1))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x24: ExtVal = (x22 * x14);
    let x25: ExtVal = (x7[to_usize(Val::new(2))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x26: ExtVal = (((x19 + (x21 * x17)) + (x23 * x20)) + (x25 * x22));
    let x27: ExtVal = (x24 * x14);
    let x28: ExtVal = (x7[to_usize(Val::new(2))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x29: ExtVal = (x27 * x14);
    let x30: ExtVal = (x7[to_usize(Val::new(3))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x31: ExtVal = (x29 * x14);
    let x32: ExtVal = (x7[to_usize(Val::new(3))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x33: ExtVal = (((x26 + (x28 * x24)) + (x30 * x27)) + (x32 * x29));
    let x34: ExtVal = (x31 * x14);
    let x35: ExtVal = (x7[to_usize(Val::new(4))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x36: ExtVal = (x34 * x14);
    let x37: ExtVal = (x7[to_usize(Val::new(4))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x38: ExtVal = (x36 * x14);
    let x39: ExtVal = (x7[to_usize(Val::new(5))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x40: ExtVal = (((x33 + (x35 * x31)) + (x37 * x34)) + (x39 * x36));
    let x41: ExtVal = (x38 * x14);
    let x42: ExtVal = (x7[to_usize(Val::new(5))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x43: ExtVal = (x41 * x14);
    let x44: ExtVal = (x7[to_usize(Val::new(6))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x45: ExtVal = (x43 * x14);
    let x46: ExtVal = (x7[to_usize(Val::new(6))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x47: ExtVal = (((x40 + (x42 * x38)) + (x44 * x41)) + (x46 * x43));
    let x48: ExtVal = (x7[to_usize(Val::new(7))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x49: ExtVal = (x7[to_usize(Val::new(7))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x50: NondetExtRegStruct = back_ext_reg(ctx, 0, x12)?;
    let x51: ExtVal = x50._super;
    // Pow(zirgen/circuit/rv32im/v2/dsl/poly.zir:10)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:171)
    let x52: ExtVal =
        (((x51 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0))) * x51) * x51);
    let x53: ExtVal = (((x52 * x51) * x51) * x51);
    let x54: ExtVal = (((x53 * x51) * x51) * x51);
    let x55: ExtVal = (((x54 * x51) * x51) * x51);
    let x56: ExtVal = (((x55 * x51) * x51) * x51);
    let x57: ExtVal = (arg1.zcheck._super * (x56 * x51));
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x58: ValU32Struct = x7[to_usize(Val::new(0))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x59: Val = ((x58.high * Val::new(65536)) + x58.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x60: ValU32Struct = x7[to_usize(Val::new(1))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x61: Val = ((x60.high * Val::new(65536)) + x60.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x62: ValU32Struct = x7[to_usize(Val::new(2))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x63: Val = ((x62.high * Val::new(65536)) + x62.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x64: ValU32Struct = x7[to_usize(Val::new(3))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x65: Val = ((x64.high * Val::new(65536)) + x64.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x66: ValU32Struct = x7[to_usize(Val::new(4))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x67: Val = ((x66.high * Val::new(65536)) + x66.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x68: ValU32Struct = x7[to_usize(Val::new(5))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x69: Val = ((x68.high * Val::new(65536)) + x68.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x70: ValU32Struct = x7[to_usize(Val::new(6))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x71: Val = ((x70.high * Val::new(65536)) + x70.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:200)
    let x72: ValU32Struct = x7[to_usize(Val::new(7))]._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:206)
    let x73: Val = ((x72.high * Val::new(65536)) + x72.low);
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:197)
    let x74: RegStruct24Array = arg1.inner;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:205)
    let x75: Val = x74[to_usize(Val::new(8))]._super._super;
    let x76: Val = x74[to_usize(Val::new(9))]._super._super;
    let x77: Val = x74[to_usize(Val::new(10))]._super._super;
    let x78: Val = x74[to_usize(Val::new(11))]._super._super;
    let x79: Val = x74[to_usize(Val::new(12))]._super._super;
    let x80: Val = x74[to_usize(Val::new(13))]._super._super;
    let x81: Val = x74[to_usize(Val::new(14))]._super._super;
    let x82: Val = x74[to_usize(Val::new(15))]._super._super;
    let x83: Val = x74[to_usize(Val::new(16))]._super._super;
    let x84: Val = x74[to_usize(Val::new(17))]._super._super;
    let x85: Val = x74[to_usize(Val::new(18))]._super._super;
    let x86: Val = x74[to_usize(Val::new(19))]._super._super;
    let x87: Val = x74[to_usize(Val::new(20))]._super._super;
    let x88: Val = x74[to_usize(Val::new(21))]._super._super;
    let x89: Val = x74[to_usize(Val::new(22))]._super._super;
    let x90: Val = x74[to_usize(Val::new(23))]._super._super;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:211)
    let x91: Val = arg1.has_state._super._super;
    let x92: Val = arg1.state_addr._super._super;
    let x93: Val = arg1.buf_out_addr._super._super;
    let x94: Val = arg1.is_elem._super._super;
    let x95: Val = arg1.check_out._super._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:197)
    let x96: Val = arg1.count._super._super;
    let x97: Val = arg1.mode._super._super;
    // PoseidonLoadInLow(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:211)
    let x98: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x91,
            state_addr: x92,
            buf_out_addr: x93,
            is_elem: x94,
            check_out: x95,
            load_tx_type: x4,
        },
        Val::new(18),
        Val::new(1),
        (x6 + Val::new(8)),
        x96,
        x97,
        &[
            x59, x61, x63, x65, x67, x69, x71, x73, x75, x76, x77, x78, x79, x80, x81, x82, x83,
            x84, x85, x86, x87, x88, x89, x90,
        ],
        (x57 + ((x47 + (x48 * x45)) + (x49 * (x45 * x14)))),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x98);
}
pub fn exec_poseidon_load_in_high<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonLoadInHighLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:214)
    let x4: Val = arg1.load_tx_type._super._super;
    // Log(<preamble>:22)
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:215)
    invoke_extern!(ctx, log, "txnType", [x4]);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:216)
    let x5: OneHot_3_Struct = exec_one_hot_3_(ctx, x4, (layout2.map(|c| c.tx_type)))?;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:214)
    let x6: Val = arg1.buf_in_addr._super._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x7: GetDataStruct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c.load_list)),
        |x8, x9| {
            // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:218)
            let x10: GetDataStruct = exec_memory_get(ctx, arg0, (x6 + x8), &x5, x9)?;
            return Ok(x10);
        },
    )?;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:214)
    let x11: RegStruct24Array = arg1.inner;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:221)
    let x12: Val = x11[to_usize(Val::new(0))]._super._super;
    let x13: Val = x11[to_usize(Val::new(1))]._super._super;
    let x14: Val = x11[to_usize(Val::new(2))]._super._super;
    let x15: Val = x11[to_usize(Val::new(3))]._super._super;
    let x16: Val = x11[to_usize(Val::new(4))]._super._super;
    let x17: Val = x11[to_usize(Val::new(5))]._super._super;
    let x18: Val = x11[to_usize(Val::new(6))]._super._super;
    let x19: Val = x11[to_usize(Val::new(7))]._super._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x20: ValU32Struct = x7[to_usize(Val::new(0))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x21: Val = ((x20.high * Val::new(65536)) + x20.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x22: ValU32Struct = x7[to_usize(Val::new(1))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x23: Val = ((x22.high * Val::new(65536)) + x22.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x24: ValU32Struct = x7[to_usize(Val::new(2))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x25: Val = ((x24.high * Val::new(65536)) + x24.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x26: ValU32Struct = x7[to_usize(Val::new(3))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x27: Val = ((x26.high * Val::new(65536)) + x26.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x28: ValU32Struct = x7[to_usize(Val::new(4))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x29: Val = ((x28.high * Val::new(65536)) + x28.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x30: ValU32Struct = x7[to_usize(Val::new(5))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x31: Val = ((x30.high * Val::new(65536)) + x30.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x32: ValU32Struct = x7[to_usize(Val::new(6))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x33: Val = ((x32.high * Val::new(65536)) + x32.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:217)
    let x34: ValU32Struct = x7[to_usize(Val::new(7))]._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:222)
    let x35: Val = ((x34.high * Val::new(65536)) + x34.low);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:221)
    let x36: Val = x11[to_usize(Val::new(16))]._super._super;
    let x37: Val = x11[to_usize(Val::new(17))]._super._super;
    let x38: Val = x11[to_usize(Val::new(18))]._super._super;
    let x39: Val = x11[to_usize(Val::new(19))]._super._super;
    let x40: Val = x11[to_usize(Val::new(20))]._super._super;
    let x41: Val = x11[to_usize(Val::new(21))]._super._super;
    let x42: Val = x11[to_usize(Val::new(22))]._super._super;
    let x43: Val = x11[to_usize(Val::new(23))]._super._super;
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:159)
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:227)
    let x44: BoundLayout<_globalLayout, _> = bind_layout!(LAYOUT_GLOBAL, global3);
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x45: BoundLayout<NondetExtRegLayout, _> = (x44.map(|c| c.rng));
    let x46: NondetExtRegStruct = back_ext_reg(ctx, 0, x45)?;
    let x47: ExtVal = x46._super;
    // PolyEvalStateReduce(zirgen/circuit/rv32im/v2/dsl/poly.zir:14)
    // PolyEval(zirgen/circuit/rv32im/v2/dsl/poly.zir:18)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:170)
    let x48: ExtVal = (x47 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)));
    let x49: ExtVal = (x7[to_usize(Val::new(0))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x50: ExtVal = (x48 * x47);
    let x51: ExtVal = (x7[to_usize(Val::new(0))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x52: ExtVal = (((x49 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)))
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)))
        + (x51 * x48));
    let x53: ExtVal = (x50 * x47);
    let x54: ExtVal = (x7[to_usize(Val::new(1))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x55: ExtVal = (x53 * x47);
    let x56: ExtVal = (x7[to_usize(Val::new(1))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x57: ExtVal = (x55 * x47);
    let x58: ExtVal = (x7[to_usize(Val::new(2))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x59: ExtVal = (((x52 + (x54 * x50)) + (x56 * x53)) + (x58 * x55));
    let x60: ExtVal = (x57 * x47);
    let x61: ExtVal = (x7[to_usize(Val::new(2))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x62: ExtVal = (x60 * x47);
    let x63: ExtVal = (x7[to_usize(Val::new(3))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x64: ExtVal = (x62 * x47);
    let x65: ExtVal = (x7[to_usize(Val::new(3))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x66: ExtVal = (((x59 + (x61 * x57)) + (x63 * x60)) + (x65 * x62));
    let x67: ExtVal = (x64 * x47);
    let x68: ExtVal = (x7[to_usize(Val::new(4))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x69: ExtVal = (x67 * x47);
    let x70: ExtVal = (x7[to_usize(Val::new(4))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x71: ExtVal = (x69 * x47);
    let x72: ExtVal = (x7[to_usize(Val::new(5))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x73: ExtVal = (((x66 + (x68 * x64)) + (x70 * x67)) + (x72 * x69));
    let x74: ExtVal = (x71 * x47);
    let x75: ExtVal = (x7[to_usize(Val::new(5))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x76: ExtVal = (x74 * x47);
    let x77: ExtVal = (x7[to_usize(Val::new(6))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x78: ExtVal = (x76 * x47);
    let x79: ExtVal = (x7[to_usize(Val::new(6))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x80: ExtVal = (((x73 + (x75 * x71)) + (x77 * x74)) + (x79 * x76));
    let x81: ExtVal = (x7[to_usize(Val::new(7))].diff_low
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    let x82: ExtVal = (x7[to_usize(Val::new(7))].diff_high
        + ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)));
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:160)
    let x83: NondetExtRegStruct = back_ext_reg(ctx, 0, x45)?;
    let x84: ExtVal = x83._super;
    // Pow(zirgen/circuit/rv32im/v2/dsl/poly.zir:10)
    // ShiftPoly(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:171)
    let x85: ExtVal =
        (((x84 * ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0))) * x84) * x84);
    let x86: ExtVal = (((x85 * x84) * x84) * x84);
    let x87: ExtVal = (((x86 * x84) * x84) * x84);
    let x88: ExtVal = (((x87 * x84) * x84) * x84);
    let x89: ExtVal = (((x88 * x84) * x84) * x84);
    let x90: ExtVal = (arg1.zcheck._super * (x89 * x84));
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:228)
    let x91: Val = arg1.has_state._super._super;
    let x92: Val = arg1.state_addr._super._super;
    let x93: Val = arg1.buf_out_addr._super._super;
    let x94: Val = arg1.is_elem._super._super;
    let x95: Val = arg1.check_out._super._super;
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:61)
    let x96: Val = (x12 + x13);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x97: Val = (x14 + x15);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x98: Val = ((x13 * Val::new(2)) + x97);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x99: Val = ((x15 * Val::new(2)) + x96);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x100: Val = ((x97 * Val::new(4)) + x99);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x101: Val = ((x96 * Val::new(4)) + x98);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x102: Val = (x99 + x101);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x103: Val = (x98 + x100);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x104: Val = (x16 + x17);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x105: Val = (x18 + x19);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x106: Val = ((x17 * Val::new(2)) + x105);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x107: Val = ((x19 * Val::new(2)) + x104);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x108: Val = ((x105 * Val::new(4)) + x107);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x109: Val = ((x104 * Val::new(4)) + x106);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x110: Val = (x107 + x109);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x111: Val = (x106 + x108);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x112: Val = (x21 + x23);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x113: Val = (x25 + x27);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x114: Val = ((x23 * Val::new(2)) + x113);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x115: Val = ((x27 * Val::new(2)) + x112);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x116: Val = ((x113 * Val::new(4)) + x115);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x117: Val = ((x112 * Val::new(4)) + x114);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x118: Val = (x115 + x117);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x119: Val = (x114 + x116);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x120: Val = (x29 + x31);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x121: Val = (x33 + x35);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x122: Val = ((x31 * Val::new(2)) + x121);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x123: Val = ((x35 * Val::new(2)) + x120);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x124: Val = ((x121 * Val::new(4)) + x123);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x125: Val = ((x120 * Val::new(4)) + x122);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x126: Val = (x123 + x125);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x127: Val = (x122 + x124);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x128: Val = (x36 + x37);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x129: Val = (x38 + x39);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x130: Val = ((x37 * Val::new(2)) + x129);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x131: Val = ((x39 * Val::new(2)) + x128);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x132: Val = ((x129 * Val::new(4)) + x131);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x133: Val = ((x128 * Val::new(4)) + x130);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x134: Val = (x131 + x133);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x135: Val = (x130 + x132);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:42)
    let x136: Val = (x40 + x41);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:43)
    let x137: Val = (x42 + x43);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:44)
    let x138: Val = ((x41 * Val::new(2)) + x137);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:45)
    let x139: Val = ((x43 * Val::new(2)) + x136);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:46)
    let x140: Val = ((x137 * Val::new(4)) + x139);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:47)
    let x141: Val = ((x136 * Val::new(4)) + x138);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:48)
    let x142: Val = (x139 + x141);
    // MultiplyByCirculant(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:49)
    let x143: Val = (x138 + x140);
    // ReduceVec4(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:54)
    // MultiplyByMExt(zirgen/circuit/rv32im/v2/dsl/poseidon2.zir:64)
    let x144: Val = (((x102 + x110) + x118) + x126);
    let x145: Val = (((x101 + x109) + x117) + x125);
    let x146: Val = (((x103 + x111) + x119) + x127);
    let x147: Val = (((x100 + x108) + x116) + x124);
    let x148: Val = ((x144 + x134) + x142);
    let x149: Val = ((x145 + x133) + x141);
    let x150: Val = ((x146 + x135) + x143);
    let x151: Val = ((x147 + x132) + x140);
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:214)
    let x152: Val = arg1.count._super._super;
    let x153: Val = arg1.mode._super._super;
    // PoseidonLoadInHigh(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:228)
    let x154: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x91,
            state_addr: x92,
            buf_out_addr: x93,
            is_elem: x94,
            check_out: x95,
            load_tx_type: x4,
        },
        Val::new(24),
        Val::new(0),
        (x6 + Val::new(8)),
        x152,
        x153,
        &[
            (x102 + x148),
            (x101 + x149),
            (x103 + x150),
            (x100 + x151),
            (x110 + x148),
            (x109 + x149),
            (x111 + x150),
            (x108 + x151),
            (x118 + x148),
            (x117 + x149),
            (x119 + x150),
            (x116 + x151),
            (x126 + x148),
            (x125 + x149),
            (x127 + x150),
            (x124 + x151),
            (x134 + x148),
            (x133 + x149),
            (x135 + x150),
            (x132 + x151),
            (x142 + x148),
            (x141 + x149),
            (x143 + x150),
            (x140 + x151),
        ],
        (x90 + ((x80 + (x81 * x78)) + (x82 * (x78 * x47)))),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x154);
}
pub fn exec_poseidon_load_in<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonLoadInLayout, Val>,
    global3: BufferRow<Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:233)
    let x4: BoundLayout<PoseidonLoadIn_SuperLayout, _> = (layout2.map(|c| c._super));
    // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:231)
    let x5: Val = arg1.is_elem._super._super;
    let x6: Val = arg1.sub_state._super._super;
    // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:233)
    let x7: OneHot_3_Struct = exec_one_hot_3_(ctx, (x5 + x6), (layout2.map(|c| c._0)))?;
    let x8: NondetRegStruct3Array = x7._super;
    let x9: PoseidonStateStruct;
    if is_true(x8[to_usize(Val::new(0))]._super) {
        // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:234)
        let x10: PoseidonStateStruct =
            exec_poseidon_load_in_short(ctx, arg0, arg1, (x4.map(|c| c.arm0)), global3)?;
        x9 = x10;
    } else if is_true(x8[to_usize(Val::new(1))]._super) {
        // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:235)
        let x11: PoseidonStateStruct =
            exec_poseidon_load_in_low(ctx, arg0, arg1, (x4.map(|c| c.arm1)), global3)?;
        x9 = x11;
    } else if is_true(x8[to_usize(Val::new(2))]._super) {
        // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:236)
        let x12: PoseidonStateStruct =
            exec_poseidon_load_in_high(ctx, arg0, arg1, (x4.map(|c| c.arm2)), global3)?;
        x9 = x12;
    } else {
        bail!("Reached unreachable mux arm")
    } // PoseidonLoadIn(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:233)
    let x13: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x4.map(|c| c._super)))?;
    return Ok(x13);
}
pub fn exec_poseidon_ext_round<'a>(
    ctx: &'a ExecContext,
    arg0: &PoseidonStateStruct,
    layout1: BoundLayout<'a, PoseidonExtRoundLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:240)
    let x2: Val = arg0.sub_state._super._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:241)
    let x3: NondetRegStruct =
        exec_is_zero(ctx, (x2 - Val::new(3)), (layout1.map(|c| c.is_round3)))?;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:242)
    let x4: NondetRegStruct =
        exec_is_zero(ctx, (x2 - Val::new(7)), (layout1.map(|c| c.is_round7)))?;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:240)
    let x5: Val = arg0.count._super._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:244)
    let x6: NondetRegStruct =
        exec_is_zero(ctx, (x5 - Val::new(1)), (layout1.map(|c| c.last_block)))?;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:242)
    let x7: Val = x4._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:241)
    let x8: Val = x3._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:248)
    let x9: Val = ((Val::new(1) - x8) - x7);
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:244)
    let x10: Val = x6._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:248)
    let x11: Val =
        (((x8 * Val::new(25)) + (x9 * Val::new(24))) + ((x7 * (Val::new(1) - x10)) * Val::new(18)));
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:240)
    let x12: RegStruct24Array = arg0.inner;
    let x13: Val = x12[to_usize(Val::new(0))]._super._super;
    let x14: Val = x12[to_usize(Val::new(1))]._super._super;
    let x15: Val = x12[to_usize(Val::new(2))]._super._super;
    let x16: Val = x12[to_usize(Val::new(3))]._super._super;
    let x17: Val = x12[to_usize(Val::new(4))]._super._super;
    let x18: Val = x12[to_usize(Val::new(5))]._super._super;
    let x19: Val = x12[to_usize(Val::new(6))]._super._super;
    let x20: Val = x12[to_usize(Val::new(7))]._super._super;
    let x21: Val = x12[to_usize(Val::new(8))]._super._super;
    let x22: Val = x12[to_usize(Val::new(9))]._super._super;
    let x23: Val = x12[to_usize(Val::new(10))]._super._super;
    let x24: Val = x12[to_usize(Val::new(11))]._super._super;
    let x25: Val = x12[to_usize(Val::new(12))]._super._super;
    let x26: Val = x12[to_usize(Val::new(13))]._super._super;
    let x27: Val = x12[to_usize(Val::new(14))]._super._super;
    let x28: Val = x12[to_usize(Val::new(15))]._super._super;
    let x29: Val = x12[to_usize(Val::new(16))]._super._super;
    let x30: Val = x12[to_usize(Val::new(17))]._super._super;
    let x31: Val = x12[to_usize(Val::new(18))]._super._super;
    let x32: Val = x12[to_usize(Val::new(19))]._super._super;
    let x33: Val = x12[to_usize(Val::new(20))]._super._super;
    let x34: Val = x12[to_usize(Val::new(21))]._super._super;
    let x35: Val = x12[to_usize(Val::new(22))]._super._super;
    let x36: Val = x12[to_usize(Val::new(23))]._super._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:252)
    let x37: MultiplyByMExtStruct = exec_do_ext_round_by_idx(
        ctx,
        &[
            x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29,
            x30, x31, x32, x33, x34, x35, x36,
        ],
        x2,
        (layout1.map(|c| c.next_inner)),
    )?;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:253)
    let x38: Val = arg0.has_state._super._super;
    let x39: Val = arg0.state_addr._super._super;
    let x40: Val = arg0.buf_out_addr._super._super;
    let x41: Val = arg0.is_elem._super._super;
    let x42: Val = arg0.check_out._super._super;
    let x43: Val = arg0.load_tx_type._super._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:240)
    let x44: Val = arg0.buf_in_addr._super._super;
    let x45: Val = arg0.mode._super._super;
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:252)
    let x46: MultiplyByMExt_Super_SuperStruct24Array = x37._super;
    let x47: Val24Array = [
        x46[to_usize(Val::new(0))]._super,
        x46[to_usize(Val::new(1))]._super,
        x46[to_usize(Val::new(2))]._super,
        x46[to_usize(Val::new(3))]._super,
        x46[to_usize(Val::new(4))]._super,
        x46[to_usize(Val::new(5))]._super,
        x46[to_usize(Val::new(6))]._super,
        x46[to_usize(Val::new(7))]._super,
        x46[to_usize(Val::new(8))]._super,
        x46[to_usize(Val::new(9))]._super,
        x46[to_usize(Val::new(10))]._super,
        x46[to_usize(Val::new(11))]._super,
        x46[to_usize(Val::new(12))]._super,
        x46[to_usize(Val::new(13))]._super,
        x46[to_usize(Val::new(14))]._super,
        x46[to_usize(Val::new(15))]._super,
        x46[to_usize(Val::new(16))]._super,
        x46[to_usize(Val::new(17))]._super,
        x46[to_usize(Val::new(18))]._super,
        x46[to_usize(Val::new(19))]._super,
        x46[to_usize(Val::new(20))]._super,
        x46[to_usize(Val::new(21))]._super,
        x46[to_usize(Val::new(22))]._super,
        x46[to_usize(Val::new(23))]._super,
    ];
    // PoseidonExtRound(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:253)
    let x48: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x38,
            state_addr: x39,
            buf_out_addr: x40,
            is_elem: x41,
            check_out: x42,
            load_tx_type: x43,
        },
        (x11 + ((x7 * x10) * Val::new(21))),
        (x9 * (x2 + Val::new(1))),
        x44,
        (x5 - x7),
        x45,
        &x47,
        arg0.zcheck._super,
        (layout1.map(|c| c._super)),
    )?;
    return Ok(x48);
}
pub fn exec_poseidon_int_rounds<'a>(
    ctx: &'a ExecContext,
    arg0: &PoseidonStateStruct,
    layout1: BoundLayout<'a, PoseidonIntRoundsLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonIntRounds(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:256)
    let x2: RegStruct24Array = arg0.inner;
    let x3: Val = x2[to_usize(Val::new(0))]._super._super;
    let x4: Val = x2[to_usize(Val::new(1))]._super._super;
    let x5: Val = x2[to_usize(Val::new(2))]._super._super;
    let x6: Val = x2[to_usize(Val::new(3))]._super._super;
    let x7: Val = x2[to_usize(Val::new(4))]._super._super;
    let x8: Val = x2[to_usize(Val::new(5))]._super._super;
    let x9: Val = x2[to_usize(Val::new(6))]._super._super;
    let x10: Val = x2[to_usize(Val::new(7))]._super._super;
    let x11: Val = x2[to_usize(Val::new(8))]._super._super;
    let x12: Val = x2[to_usize(Val::new(9))]._super._super;
    let x13: Val = x2[to_usize(Val::new(10))]._super._super;
    let x14: Val = x2[to_usize(Val::new(11))]._super._super;
    let x15: Val = x2[to_usize(Val::new(12))]._super._super;
    let x16: Val = x2[to_usize(Val::new(13))]._super._super;
    let x17: Val = x2[to_usize(Val::new(14))]._super._super;
    let x18: Val = x2[to_usize(Val::new(15))]._super._super;
    let x19: Val = x2[to_usize(Val::new(16))]._super._super;
    let x20: Val = x2[to_usize(Val::new(17))]._super._super;
    let x21: Val = x2[to_usize(Val::new(18))]._super._super;
    let x22: Val = x2[to_usize(Val::new(19))]._super._super;
    let x23: Val = x2[to_usize(Val::new(20))]._super._super;
    let x24: Val = x2[to_usize(Val::new(21))]._super._super;
    let x25: Val = x2[to_usize(Val::new(22))]._super._super;
    let x26: Val = x2[to_usize(Val::new(23))]._super._super;
    // PoseidonIntRounds(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:257)
    let x27: DoIntRoundsStruct = exec_do_int_rounds(
        ctx,
        &[
            x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21,
            x22, x23, x24, x25, x26,
        ],
        (layout1.map(|c| c.next_inner)),
    )?;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonIntRounds(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:258)
    let x28: Val = arg0.has_state._super._super;
    let x29: Val = arg0.state_addr._super._super;
    let x30: Val = arg0.buf_out_addr._super._super;
    let x31: Val = arg0.is_elem._super._super;
    let x32: Val = arg0.check_out._super._super;
    let x33: Val = arg0.load_tx_type._super._super;
    // PoseidonIntRounds(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:256)
    let x34: Val = arg0.buf_in_addr._super._super;
    let x35: Val = arg0.count._super._super;
    let x36: Val = arg0.mode._super._super;
    // PoseidonIntRounds(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:258)
    let x37: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x28,
            state_addr: x29,
            buf_out_addr: x30,
            is_elem: x31,
            check_out: x32,
            load_tx_type: x33,
        },
        Val::new(24),
        Val::new(4),
        x34,
        x35,
        x36,
        &x27._super,
        arg0.zcheck._super,
        (layout1.map(|c| c._super)),
    )?;
    return Ok(x37);
}
pub fn exec_poseidon_check_out<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonCheckOutLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
    let x3: RegStruct24Array = arg1.inner;
    let x4: Val = arg1.buf_out_addr._super._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:262)
    let x5: PoseidonCheckOut__0Struct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c._1)),
        |x6, x7| {
            // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:264)
            let x8: ReadElemStruct = exec_read_elem(ctx, arg0, (x4 + x6), (x7.map(|c| c.goal)))?;
            // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
            let x9: Val = x3[to_usize(x6)]._super._super;
            // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:265)
            eqz!(
                (x8._super - x9),
                "PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:265)"
            );
            return Ok(PoseidonCheckOut__0Struct {});
        },
    )?;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
    let x10: Val = arg1.load_tx_type._super._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:267)
    let x11: NondetRegStruct = exec_is_zero(ctx, x10, (layout2.map(|c| c.is_normal)))?;
    let x12: Val = x11._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:268)
    let x13: Val = ((Val::new(1) - x12) * Val::new(22));
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
    let x14: Val = arg1.has_state._super._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:269)
    let x15: Val = ((Val::new(1) - x14) * ((x12 * Val::new(32)) + x13));
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
    let x16: ExtVal = arg1.zcheck._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:274)
    let x17: NondetExtRegStruct =
        exec_nondet_ext_reg(ctx, inv_0(x16)?, (layout2.map(|c| c.ext_inv)))?;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:275)
    let x18: ExtVal =
        ((x17._super * x16) - ExtVal::new(Val::new(1), Val::new(0), Val::new(0), Val::new(0)));
    eqz!(x18, "loc(callsite(unknown at  PoseidonCheckOut ( zirgen/circuit/rv32im/v2/dsl/inst_p2.zir :275:10)))");
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:276)
    let x19: Val = arg1.state_addr._super._super;
    let x20: Val = arg1.is_elem._super._super;
    let x21: Val = arg1.check_out._super._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:261)
    let x22: Val = arg1.mode._super._super;
    let x23: Val = x3[to_usize(Val::new(0))]._super._super;
    let x24: Val = x3[to_usize(Val::new(1))]._super._super;
    let x25: Val = x3[to_usize(Val::new(2))]._super._super;
    let x26: Val = x3[to_usize(Val::new(3))]._super._super;
    let x27: Val = x3[to_usize(Val::new(4))]._super._super;
    let x28: Val = x3[to_usize(Val::new(5))]._super._super;
    let x29: Val = x3[to_usize(Val::new(6))]._super._super;
    let x30: Val = x3[to_usize(Val::new(7))]._super._super;
    let x31: Val = x3[to_usize(Val::new(8))]._super._super;
    let x32: Val = x3[to_usize(Val::new(9))]._super._super;
    let x33: Val = x3[to_usize(Val::new(10))]._super._super;
    let x34: Val = x3[to_usize(Val::new(11))]._super._super;
    let x35: Val = x3[to_usize(Val::new(12))]._super._super;
    let x36: Val = x3[to_usize(Val::new(13))]._super._super;
    let x37: Val = x3[to_usize(Val::new(14))]._super._super;
    let x38: Val = x3[to_usize(Val::new(15))]._super._super;
    let x39: Val = x3[to_usize(Val::new(16))]._super._super;
    let x40: Val = x3[to_usize(Val::new(17))]._super._super;
    let x41: Val = x3[to_usize(Val::new(18))]._super._super;
    let x42: Val = x3[to_usize(Val::new(19))]._super._super;
    let x43: Val = x3[to_usize(Val::new(20))]._super._super;
    let x44: Val = x3[to_usize(Val::new(21))]._super._super;
    let x45: Val = x3[to_usize(Val::new(22))]._super._super;
    let x46: Val = x3[to_usize(Val::new(23))]._super._super;
    // PoseidonCheckOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:276)
    let x47: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x14,
            state_addr: x19,
            buf_out_addr: x4,
            is_elem: x20,
            check_out: x21,
            load_tx_type: x10,
        },
        ((x14 * Val::new(23)) + x15),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        x22,
        &[
            x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39,
            x40, x41, x42, x43, x44, x45, x46,
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x47);
}
pub fn exec_poseidon_store_out<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonStoreOutLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:279)
    let x3: RegStruct24Array = arg1.inner;
    let x4: Val = arg1.buf_out_addr._super._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:280)
    let x5: PoseidonStoreOut__0Struct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c._1)),
        |x6, x7| {
            // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:279)
            let x8: Val = x3[to_usize(x6)]._super._super;
            // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:282)
            let x9: NondetRegStruct =
                exec_nondet_u16_reg(ctx, bit_and(x8, Val::new(65535))?, (x7.map(|c| c.low)))?;
            let x10: Val = x9._super;
            // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:283)
            let x11: U16RegStruct = exec_u16_reg(
                ctx,
                ((x8 - x10) * Val::new(2013235201)),
                (x7.map(|c| c.high)),
            )?;
            // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:284)
            let x12: MemoryWriteStruct = exec_memory_write(
                ctx,
                arg0,
                (x4 + x6),
                &ValU32Struct {
                    low: x10,
                    high: x11._super,
                },
                (x7.map(|c| c._0)),
            )?;
            return Ok(PoseidonStoreOut__0Struct {});
        },
    )?;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:279)
    let x13: Val = arg1.load_tx_type._super._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:286)
    let x14: NondetRegStruct = exec_is_zero(ctx, x13, (layout2.map(|c| c.is_normal)))?;
    let x15: Val = x14._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:287)
    let x16: Val = ((Val::new(1) - x15) * Val::new(22));
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:279)
    let x17: Val = arg1.has_state._super._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:290)
    let x18: Val = ((Val::new(1) - x17) * ((x15 * Val::new(32)) + x16));
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:291)
    let x19: ExtVal = inv_0(arg1.zcheck._super)?;
    let x20: NondetExtRegStruct = exec_nondet_ext_reg(ctx, x19, (layout2.map(|c| c.ext_inv)))?;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:292)
    let x21: Val = arg1.state_addr._super._super;
    let x22: Val = arg1.is_elem._super._super;
    let x23: Val = arg1.check_out._super._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:279)
    let x24: Val = arg1.mode._super._super;
    let x25: Val = x3[to_usize(Val::new(0))]._super._super;
    let x26: Val = x3[to_usize(Val::new(1))]._super._super;
    let x27: Val = x3[to_usize(Val::new(2))]._super._super;
    let x28: Val = x3[to_usize(Val::new(3))]._super._super;
    let x29: Val = x3[to_usize(Val::new(4))]._super._super;
    let x30: Val = x3[to_usize(Val::new(5))]._super._super;
    let x31: Val = x3[to_usize(Val::new(6))]._super._super;
    let x32: Val = x3[to_usize(Val::new(7))]._super._super;
    let x33: Val = x3[to_usize(Val::new(8))]._super._super;
    let x34: Val = x3[to_usize(Val::new(9))]._super._super;
    let x35: Val = x3[to_usize(Val::new(10))]._super._super;
    let x36: Val = x3[to_usize(Val::new(11))]._super._super;
    let x37: Val = x3[to_usize(Val::new(12))]._super._super;
    let x38: Val = x3[to_usize(Val::new(13))]._super._super;
    let x39: Val = x3[to_usize(Val::new(14))]._super._super;
    let x40: Val = x3[to_usize(Val::new(15))]._super._super;
    let x41: Val = x3[to_usize(Val::new(16))]._super._super;
    let x42: Val = x3[to_usize(Val::new(17))]._super._super;
    let x43: Val = x3[to_usize(Val::new(18))]._super._super;
    let x44: Val = x3[to_usize(Val::new(19))]._super._super;
    let x45: Val = x3[to_usize(Val::new(20))]._super._super;
    let x46: Val = x3[to_usize(Val::new(21))]._super._super;
    let x47: Val = x3[to_usize(Val::new(22))]._super._super;
    let x48: Val = x3[to_usize(Val::new(23))]._super._super;
    // PoseidonStoreOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:292)
    let x49: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x17,
            state_addr: x21,
            buf_out_addr: x4,
            is_elem: x22,
            check_out: x23,
            load_tx_type: x13,
        },
        ((x17 * Val::new(23)) + x18),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        x24,
        &[
            x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41,
            x42, x43, x44, x45, x46, x47, x48,
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x49);
}
pub fn exec_poseidon_do_out<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonDoOutLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)
    let x3: BoundLayout<PoseidonDoOut_SuperLayout, _> = (layout2.map(|c| c._super));
    // PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:295)
    let x4: Val = arg1.check_out._super._super;
    // PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)
    let x5: BoundLayout<PoseidonDoOut_SuperArm0Layout, _> = (x3.map(|c| c.arm0));
    let x6: BoundLayout<Reg, _> = (((x5.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x7: BoundLayout<Reg, _> = (((x5.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x8: BoundLayout<Reg, _> = (((x5.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x9: BoundLayout<Reg, _> = (((x5.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x10: BoundLayout<Reg, _> = (((x5.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x11: BoundLayout<Reg, _> = (((x5.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x12: BoundLayout<Reg, _> = (((x5.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x13: BoundLayout<Reg, _> = (((x5.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x14: BoundLayout<Reg, _> = (((x5.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x15: BoundLayout<Reg, _> = (((x5.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x16: BoundLayout<Reg, _> = (((x5.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x17: BoundLayout<Reg, _> = (((x5.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x5.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x5.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x5.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x5.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x22: PoseidonStateStruct;
    if is_true(x4) {
        let x23: PoseidonStateStruct =
            exec_poseidon_check_out(ctx, arg0, arg1, (x5.map(|c| c._super)))?;
        x6.store(ctx, Val::new(0));
        eqz!(
            x6.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x7.store(ctx, Val::new(0));
        eqz!(
            x7.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x8.store(ctx, Val::new(0));
        eqz!(
            x8.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x9.store(ctx, Val::new(0));
        eqz!(
            x9.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x10.store(ctx, Val::new(0));
        eqz!(
            x10.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x11.store(ctx, Val::new(0));
        eqz!(
            x11.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x12.store(ctx, Val::new(0));
        eqz!(
            x12.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x13.store(ctx, Val::new(0));
        eqz!(
            x13.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x14.store(ctx, Val::new(0));
        eqz!(
            x14.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x15.store(ctx, Val::new(0));
        eqz!(
            x15.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x16.store(ctx, Val::new(0));
        eqz!(
            x16.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "PoseidonDoOut(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:296)"
        );
        x22 = x23;
    } else if is_true((Val::new(1) - x4)) {
        let x24: PoseidonStateStruct =
            exec_poseidon_store_out(ctx, arg0, arg1, (x3.map(|c| c.arm1)))?;
        x22 = x24;
    } else {
        bail!("Reached unreachable mux arm")
    }
    let x25: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x3.map(|c| c._super)))?;
    return Ok(x25);
}
pub fn exec_poseidon_store_state<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &PoseidonStateStruct,
    layout2: BoundLayout<'a, PoseidonStoreStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:299)
    let x3: RegStruct24Array = arg1.inner;
    let x4: Val = arg1.state_addr._super._super;
    // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:300)
    let x5: PoseidonStoreState__0Struct8Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
        ],
        (layout2.map(|c| c._1)),
        |x6, x7| {
            // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:299)
            let x8: Val = x3[to_usize((x6 + Val::new(16)))]._super._super;
            // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:302)
            let x9: NondetRegStruct =
                exec_nondet_u16_reg(ctx, bit_and(x8, Val::new(65535))?, (x7.map(|c| c.low)))?;
            let x10: Val = x9._super;
            // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:303)
            let x11: U16RegStruct = exec_u16_reg(
                ctx,
                ((x8 - x10) * Val::new(2013235201)),
                (x7.map(|c| c.high)),
            )?;
            // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:304)
            let x12: MemoryWriteStruct = exec_memory_write(
                ctx,
                arg0,
                (x4 + x6),
                &ValU32Struct {
                    low: x10,
                    high: x11._super,
                },
                (x7.map(|c| c._0)),
            )?;
            return Ok(PoseidonStoreState__0Struct {});
        },
    )?;
    // GetDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:71)
    // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:306)
    let x13: Val = arg1.has_state._super._super;
    let x14: Val = arg1.buf_out_addr._super._super;
    let x15: Val = arg1.is_elem._super._super;
    let x16: Val = arg1.check_out._super._super;
    let x17: Val = arg1.load_tx_type._super._super;
    // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:299)
    let x18: Val = arg1.mode._super._super;
    let x19: Val = x3[to_usize(Val::new(0))]._super._super;
    let x20: Val = x3[to_usize(Val::new(1))]._super._super;
    let x21: Val = x3[to_usize(Val::new(2))]._super._super;
    let x22: Val = x3[to_usize(Val::new(3))]._super._super;
    let x23: Val = x3[to_usize(Val::new(4))]._super._super;
    let x24: Val = x3[to_usize(Val::new(5))]._super._super;
    let x25: Val = x3[to_usize(Val::new(6))]._super._super;
    let x26: Val = x3[to_usize(Val::new(7))]._super._super;
    let x27: Val = x3[to_usize(Val::new(8))]._super._super;
    let x28: Val = x3[to_usize(Val::new(9))]._super._super;
    let x29: Val = x3[to_usize(Val::new(10))]._super._super;
    let x30: Val = x3[to_usize(Val::new(11))]._super._super;
    let x31: Val = x3[to_usize(Val::new(12))]._super._super;
    let x32: Val = x3[to_usize(Val::new(13))]._super._super;
    let x33: Val = x3[to_usize(Val::new(14))]._super._super;
    let x34: Val = x3[to_usize(Val::new(15))]._super._super;
    let x35: Val = x3[to_usize(Val::new(16))]._super._super;
    let x36: Val = x3[to_usize(Val::new(17))]._super._super;
    let x37: Val = x3[to_usize(Val::new(18))]._super._super;
    let x38: Val = x3[to_usize(Val::new(19))]._super._super;
    let x39: Val = x3[to_usize(Val::new(20))]._super._super;
    let x40: Val = x3[to_usize(Val::new(21))]._super._super;
    let x41: Val = x3[to_usize(Val::new(22))]._super._super;
    let x42: Val = x3[to_usize(Val::new(23))]._super._super;
    // PoseidonStoreState(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:306)
    let x43: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: x13,
            state_addr: x4,
            buf_out_addr: x14,
            is_elem: x15,
            check_out: x16,
            load_tx_type: x17,
        },
        Val::new(32),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        x18,
        &[
            x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35,
            x36, x37, x38, x39, x40, x41, x42,
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        (layout2.map(|c| c._super)),
    )?;
    return Ok(x43);
}
pub fn exec_is_u24<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, IsU24Layout, Val>,
) -> Result<IsU24Struct> {
    // IsU24(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:320)
    let x2: NondetRegStruct = exec_nondet_u16_reg(
        ctx,
        bit_and(arg0, Val::new(65535))?,
        (layout1.map(|c| c.low16)),
    )?;
    // IsU24(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:321)
    let x3: U8RegStruct = exec_u8_reg(
        ctx,
        ((arg0 - x2._super) * Val::new(2013235201)),
        (layout1.map(|c| c._0)),
    )?;
    return Ok(IsU24Struct {});
}
pub fn exec_poseidon_paging_load_node<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonOpDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:8)
    // PoseidonPagingLoadNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:325)
    let x3: PoseidonOpDefStruct = PoseidonOpDefStruct {
        has_state: Val::new(0),
        state_addr: Val::new(0),
        buf_out_addr: (Val::new(1140850688) - (arg1 * Val::new(8))),
        is_elem: Val::new(1),
        check_out: Val::new(1),
        load_tx_type: Val::new(1),
    };
    // NodeIdxToAddr(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:317)
    // PoseidonPagingLoadNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:337)
    let x4: Val = (((arg1 * Val::new(2)) + Val::new(1)) * Val::new(8));
    // PoseidonPagingLoadNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:333)
    let x5: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &x3,
        Val::new(18),
        Val::new(0),
        (Val::new(1140850688) - x4),
        Val::new(1),
        Val::new(0),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout2,
    )?;
    return Ok(x5);
}
pub fn exec_poseidon_paging_load_page<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonOpDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:8)
    // PoseidonPagingLoadPage(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:347)
    let x3: PoseidonOpDefStruct = PoseidonOpDefStruct {
        has_state: Val::new(0),
        state_addr: Val::new(0),
        buf_out_addr: (Val::new(1140850688) - (arg1 * Val::new(8))),
        is_elem: Val::new(0),
        check_out: Val::new(1),
        load_tx_type: Val::new(1),
    };
    // PoseidonPagingLoadPage(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:355)
    let x4: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &x3,
        Val::new(18),
        Val::new(0),
        ((arg1 - Val::new(4194304)) * Val::new(256)),
        Val::new(32),
        Val::new(1),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout2,
    )?;
    return Ok(x4);
}
pub fn exec_poseidon_paging_load_done<'a>(
    ctx: &'a ExecContext,
    layout0: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonPagingLoadDone(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:369)
    let x1: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: Val::new(0),
            state_addr: Val::new(0),
            buf_out_addr: Val::new(1073741824),
            is_elem: Val::new(0),
            check_out: Val::new(0),
            load_tx_type: Val::new(0),
        },
        Val::new(1),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(2),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout0,
    )?;
    return Ok(x1);
}
pub fn exec_poseidon_paging_store_node<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonOpDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:8)
    // PoseidonPagingStoreNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:373)
    let x3: PoseidonOpDefStruct = PoseidonOpDefStruct {
        has_state: Val::new(0),
        state_addr: Val::new(0),
        buf_out_addr: (Val::new(1140850688) - (arg1 * Val::new(8))),
        is_elem: Val::new(1),
        check_out: Val::new(0),
        load_tx_type: Val::new(2),
    };
    // NodeIdxToAddr(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:317)
    // PoseidonPagingStoreNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:385)
    let x4: Val = (((arg1 * Val::new(2)) + Val::new(1)) * Val::new(8));
    // PoseidonPagingStoreNode(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:381)
    let x5: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &x3,
        Val::new(18),
        Val::new(0),
        (Val::new(1140850688) - x4),
        Val::new(1),
        Val::new(4),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout2,
    )?;
    return Ok(x5);
}
pub fn exec_poseidon_paging_store_page<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    layout2: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonOpDef(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:8)
    // PoseidonPagingStorePage(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:395)
    let x3: PoseidonOpDefStruct = PoseidonOpDefStruct {
        has_state: Val::new(0),
        state_addr: Val::new(0),
        buf_out_addr: (Val::new(1140850688) - (arg1 * Val::new(8))),
        is_elem: Val::new(0),
        check_out: Val::new(0),
        load_tx_type: Val::new(2),
    };
    // PoseidonPagingStorePage(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:403)
    let x4: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &x3,
        Val::new(18),
        Val::new(0),
        ((arg1 - Val::new(4194304)) * Val::new(256)),
        Val::new(32),
        Val::new(3),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout2,
    )?;
    return Ok(x4);
}
pub fn exec_poseidon_paging_store_done<'a>(
    ctx: &'a ExecContext,
    layout0: BoundLayout<'a, PoseidonStateLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonPagingStoreDone(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:417)
    let x1: PoseidonStateStruct = exec_poseidon_state(
        ctx,
        &PoseidonOpDefStruct {
            has_state: Val::new(0),
            state_addr: Val::new(0),
            buf_out_addr: Val::new(1140850688),
            is_elem: Val::new(0),
            check_out: Val::new(0),
            load_tx_type: Val::new(0),
        },
        Val::new(5),
        Val::new(0),
        Val::new(0),
        Val::new(0),
        Val::new(5),
        &[
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
            Val::new(0),
        ],
        ExtVal::new(Val::new(0), Val::new(0), Val::new(0), Val::new(0)),
        layout0,
    )?;
    return Ok(x1);
}
pub fn exec_one_hot_6_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, OneHot_6_Layout, Val>,
) -> Result<OneHot_6_Struct> {
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:7)
    let x2: NondetRegStruct6Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
        ],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            let x5: NondetRegStruct = exec_nondet_bit_reg(ctx, isz((x3 - arg0))?, x4)?;
            return Ok(x5);
        },
    )?;
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)
    let x6: Val = x2[to_usize(Val::new(1))]._super;
    let x7: Val = (x2[to_usize(Val::new(0))]._super + x6);
    let x8: Val = x2[to_usize(Val::new(2))]._super;
    let x9: Val = x2[to_usize(Val::new(3))]._super;
    let x10: Val = x2[to_usize(Val::new(4))]._super;
    let x11: Val = (((x7 + x8) + x9) + x10);
    let x12: Val = x2[to_usize(Val::new(5))]._super;
    eqz!(
        ((x11 + x12) - Val::new(1)),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)"
    );
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)
    let x13: Val = (((x6 + (x8 * Val::new(2))) + (x9 * Val::new(3))) + (x10 * Val::new(4)));
    eqz!(
        ((x13 + (x12 * Val::new(5))) - arg0),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)"
    );
    return Ok(OneHot_6_Struct {
        _super: x2.clone(),
        bits: x2,
    });
}
pub fn exec_poseidon_paging<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: Val,
    arg2: &PoseidonStateStruct,
    layout3: BoundLayout<'a, PoseidonPagingLayout, Val>,
) -> Result<PoseidonStateStruct> {
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:428)
    let x4: BoundLayout<PoseidonPaging__1Layout, _> = (layout3.map(|c| c._3));
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:435)
    let x5: BoundLayout<PoseidonPaging_SuperLayout, _> = (layout3.map(|c| c._super));
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:420)
    let x6: Val = arg2.buf_out_addr._super._super;
    // Div(<preamble>:19)
    // NodeAddrToIdx(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:316)
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:421)
    let x7: Val = ((Val::new(1140850688) - x6) * Val::new(1761607681));
    // nextPagingIdx(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:314)
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:422)
    let (x8, x9) = invoke_extern!(ctx, next_paging_idx);
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:423)
    let x10: NondetRegStruct = exec_nondet_reg(ctx, x8, (layout3.map(|c| c.cur_idx)))?;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:424)
    let x11: NondetRegStruct = exec_nondet_reg(ctx, x9, (layout3.map(|c| c.cur_mode)))?;
    let x12: Val = x11._super;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:425)
    let x13: OneHot_6_Struct = exec_one_hot_6_(ctx, x12, (layout3.map(|c| c.mode_split)))?;
    let x14: NondetRegStruct6Array = x13.bits;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:426)
    let x15: Val = (x14[to_usize(Val::new(0))]._super + x14[to_usize(Val::new(1))]._super);
    let x16: Val = (x15 + x14[to_usize(Val::new(2))]._super);
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:423)
    let x17: Val = x10._super;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:427)
    let x18: IsU24Struct = exec_is_u24(ctx, x17, (layout3.map(|c| c._0)))?;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:428)
    let x19: ComponentStruct = ComponentStruct {};
    let x20: ComponentStruct;
    if is_true(x16) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:429)
        let x21: IsU24Struct = exec_is_u24(
            ctx,
            (x17 - (x7 + Val::new(1))),
            ((x4.map(|c| c.arm0)).map(|c| c._0)),
        )?;
        x20 = x19;
    } else if is_true((Val::new(1) - x16)) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:431)
        let x22: IsU24Struct = exec_is_u24(
            ctx,
            ((x7 - Val::new(1)) - x17),
            ((x4.map(|c| c.arm1)).map(|c| c._0)),
        )?;
        x20 = x19;
    } else {
        bail!("Reached unreachable mux arm")
    } // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:434)
    let x23: BitRegStruct = exec_bit_reg(ctx, (x12 - arg1), (layout3.map(|c| c._4)))?;
    // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:425)
    let x24: NondetRegStruct6Array = x13._super;
    let x25: PoseidonStateStruct;
    if is_true(x24[to_usize(Val::new(0))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:436)
        let x26: PoseidonStateStruct =
            exec_poseidon_paging_load_node(ctx, arg0, x17, (x5.map(|c| c.arm0)))?;
        x25 = x26;
    } else if is_true(x24[to_usize(Val::new(1))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:437)
        let x27: PoseidonStateStruct =
            exec_poseidon_paging_load_page(ctx, arg0, x17, (x5.map(|c| c.arm1)))?;
        x25 = x27;
    } else if is_true(x24[to_usize(Val::new(2))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:438)
        let x28: PoseidonStateStruct = exec_poseidon_paging_load_done(ctx, (x5.map(|c| c.arm2)))?;
        x25 = x28;
    } else if is_true(x24[to_usize(Val::new(3))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:439)
        let x29: PoseidonStateStruct =
            exec_poseidon_paging_store_page(ctx, arg0, x17, (x5.map(|c| c.arm3)))?;
        x25 = x29;
    } else if is_true(x24[to_usize(Val::new(4))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:440)
        let x30: PoseidonStateStruct =
            exec_poseidon_paging_store_node(ctx, arg0, x17, (x5.map(|c| c.arm4)))?;
        x25 = x30;
    } else if is_true(x24[to_usize(Val::new(5))]._super) {
        // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:441)
        let x31: PoseidonStateStruct = exec_poseidon_paging_store_done(ctx, (x5.map(|c| c.arm5)))?;
        x25 = x31;
    } else {
        bail!("Reached unreachable mux arm")
    } // PoseidonPaging(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:435)
    let x32: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x5.map(|c| c._super)))?;
    return Ok(x32);
}
pub fn exec_poseidon0<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Poseidon0Layout, Val>,
    global3: BufferRow<Val>,
) -> Result<InstOutputStruct> {
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:446)
    let x4: BoundLayout<PoseidonStateLayout, _> = (layout2.map(|c| c.state));
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
    let x5: BoundLayout<Poseidon0StateLayout, _> = (layout2.map(|c| c.state_redef));
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:445)
    let x6: NondetRegStruct8Array = arg1.minor_onehot._super;
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
    let x7: BoundLayout<Poseidon0StateArm0Layout, _> = (x5.map(|c| c.arm0));
    let x8: BoundLayout<Poseidon0StateArm1Layout, _> = (x5.map(|c| c.arm1));
    let x9: BoundLayout<Poseidon0StateArm2Layout, _> = (x5.map(|c| c.arm2));
    let x10: BoundLayout<Poseidon0StateArm3Layout, _> = (x5.map(|c| c.arm3));
    let x11: BoundLayout<Poseidon0StateArm4Layout, _> = (x5.map(|c| c.arm4));
    let x12: BoundLayout<Poseidon0StateArm5Layout, _> = (x5.map(|c| c.arm5));
    let x13: BoundLayout<Poseidon0StateArm6Layout, _> = (x5.map(|c| c.arm6));
    let x14: BoundLayout<Poseidon0StateArm7Layout, _> = (x5.map(|c| c.arm7));
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:445)
    let x15: ValU32Struct = arg1.pc_u32;
    let x16: Val = arg1.mode;
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
    let x17: BoundLayout<Reg, _> = (((x7.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x18: BoundLayout<Reg, _> = (((x7.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x19: BoundLayout<Reg, _> = (((x7.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x20: BoundLayout<Reg, _> = (((x7.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x21: BoundLayout<Reg, _> = (((x7.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x22: BoundLayout<Reg, _> = (((x7.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x23: BoundLayout<Reg, _> = (((x7.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x24: BoundLayout<Reg, _> = (((x7.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x25: BoundLayout<Reg, _> = (((x7.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x26: BoundLayout<Reg, _> = (((x7.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x27: BoundLayout<Reg, _> = (((x7.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x28: BoundLayout<Reg, _> = (((x7.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x29: BoundLayout<Reg, _> = (((x7.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x30: BoundLayout<Reg, _> = (((x7.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x31: BoundLayout<Reg, _> = (((x7.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x32: BoundLayout<Reg, _> = (((x7.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x33: BoundLayout<Reg, _> = (((x7.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x34: BoundLayout<Reg, _> = (((x7.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x35: BoundLayout<Reg, _> = (((x7.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x36: BoundLayout<Reg, _> = (((x7.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x37: BoundLayout<Reg, _> = (((x7.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x38: BoundLayout<Reg, _> = (((x7.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x39: BoundLayout<Reg, _> = (((x7.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x40: BoundLayout<Reg, _> = (((x7.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x41: BoundLayout<Reg, _> = (((x7.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x42: BoundLayout<Reg, _> = (((x7.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x43: BoundLayout<Reg, _> = (((x7.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x44: BoundLayout<Reg, _> = (((x7.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x45: BoundLayout<Reg, _> = (((x7.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x46: BoundLayout<Reg, _> = (((x7.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x47: BoundLayout<Reg, _> = (((x8.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x48: BoundLayout<Reg, _> = (((x8.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x49: BoundLayout<Reg, _> = (((x8.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x50: BoundLayout<Reg, _> = (((x8.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x51: BoundLayout<Reg, _> = (((x8.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x52: BoundLayout<Reg, _> = (((x8.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x53: BoundLayout<Reg, _> = (((x8.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x54: BoundLayout<Reg, _> = (((x8.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x55: BoundLayout<Reg, _> = (((x8.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x56: BoundLayout<Reg, _> = (((x8.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x57: BoundLayout<Reg, _> = (((x8.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x58: BoundLayout<Reg, _> = (((x8.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x59: BoundLayout<Reg, _> = (((x8.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x60: BoundLayout<Reg, _> = (((x8.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x61: BoundLayout<Reg, _> = (((x8.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x62: BoundLayout<Reg, _> = (((x8.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x63: BoundLayout<Reg, _> = (((x8.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x64: BoundLayout<Reg, _> = (((x8.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x65: BoundLayout<Reg, _> = (((x9.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x66: BoundLayout<Reg, _> = (((x9.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x67: BoundLayout<Reg, _> = (((x9.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x68: BoundLayout<Reg, _> = (((x9.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x69: BoundLayout<Reg, _> = (((x9.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x70: BoundLayout<Reg, _> = (((x9.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x71: BoundLayout<Reg, _> = (((x9.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x72: BoundLayout<Reg, _> = (((x9.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x73: BoundLayout<Reg, _> = (((x9.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x74: BoundLayout<Reg, _> = (((x9.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x75: BoundLayout<Reg, _> = (((x9.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x76: BoundLayout<Reg, _> = (((x9.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x77: BoundLayout<Reg, _> = (((x9.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x78: BoundLayout<Reg, _> = (((x9.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x79: BoundLayout<Reg, _> = (((x9.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x80: BoundLayout<Reg, _> = (((x9.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x81: BoundLayout<Reg, _> = (((x9.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x82: BoundLayout<Reg, _> = (((x9.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x83: BoundLayout<Reg, _> = (((x10.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x84: BoundLayout<Reg, _> = (((x10.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x85: BoundLayout<Reg, _> = (((x10.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x86: BoundLayout<Reg, _> = (((x10.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x87: BoundLayout<Reg, _> = (((x10.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x88: BoundLayout<Reg, _> = (((x10.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x89: BoundLayout<Reg, _> = (((x10.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x90: BoundLayout<Reg, _> = (((x10.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x91: BoundLayout<Reg, _> = (((x10.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x92: BoundLayout<Reg, _> = (((x10.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x93: BoundLayout<Reg, _> = (((x10.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x94: BoundLayout<Reg, _> = (((x10.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x95: BoundLayout<Reg, _> = (((x10.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x96: BoundLayout<Reg, _> = (((x10.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x97: BoundLayout<Reg, _> = (((x10.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x98: BoundLayout<Reg, _> = (((x10.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x99: BoundLayout<Reg, _> = (((x10.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x100: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x101: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x102: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x103: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x104: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x105: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x106: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x107: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x108: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x109: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x110: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x111: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x112: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x113: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x114: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x115: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x116: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x117: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x118: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x119: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x120: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x121: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x122: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x123: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra40)).map(|c| c.count)).map(|c| c._super));
    let x124: BoundLayout<Reg, _> =
        (((x10.map(|c| c._extra41)).map(|c| c.count)).map(|c| c._super));
    let x125: BoundLayout<Reg, _> = (((x11.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x126: BoundLayout<Reg, _> = (((x11.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x127: BoundLayout<Reg, _> = (((x11.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x128: BoundLayout<Reg, _> = (((x11.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x129: BoundLayout<Reg, _> = (((x11.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x130: BoundLayout<Reg, _> = (((x11.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x131: BoundLayout<Reg, _> = (((x11.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x132: BoundLayout<Reg, _> = (((x11.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x133: BoundLayout<Reg, _> = (((x11.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x134: BoundLayout<Reg, _> = (((x11.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x135: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x136: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x137: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x138: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x139: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x140: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x141: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x142: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x143: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x144: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x145: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x146: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x147: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x148: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x149: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x150: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x151: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x152: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x153: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x154: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x155: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x156: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x157: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x158: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x159: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x160: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x161: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x162: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x163: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra38)).map(|c| c.count)).map(|c| c._super));
    let x164: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra39)).map(|c| c.count)).map(|c| c._super));
    let x165: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra40)).map(|c| c.count)).map(|c| c._super));
    let x166: BoundLayout<Reg, _> =
        (((x11.map(|c| c._extra41)).map(|c| c.count)).map(|c| c._super));
    let x167: BoundLayout<Reg, _> = (((x12.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x168: BoundLayout<Reg, _> = (((x12.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x169: BoundLayout<Reg, _> = (((x13.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x170: BoundLayout<Reg, _> = (((x13.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x171: BoundLayout<Reg, _> = (((x13.map(|c| c._extra2)).map(|c| c.count)).map(|c| c._super));
    let x172: BoundLayout<Reg, _> = (((x13.map(|c| c._extra3)).map(|c| c.count)).map(|c| c._super));
    let x173: BoundLayout<Reg, _> = (((x13.map(|c| c._extra4)).map(|c| c.count)).map(|c| c._super));
    let x174: BoundLayout<Reg, _> = (((x13.map(|c| c._extra5)).map(|c| c.count)).map(|c| c._super));
    let x175: BoundLayout<Reg, _> = (((x13.map(|c| c._extra6)).map(|c| c.count)).map(|c| c._super));
    let x176: BoundLayout<Reg, _> = (((x13.map(|c| c._extra7)).map(|c| c.count)).map(|c| c._super));
    let x177: BoundLayout<Reg, _> = (((x13.map(|c| c._extra8)).map(|c| c.count)).map(|c| c._super));
    let x178: BoundLayout<Reg, _> = (((x13.map(|c| c._extra9)).map(|c| c.count)).map(|c| c._super));
    let x179: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra10)).map(|c| c.count)).map(|c| c._super));
    let x180: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra11)).map(|c| c.count)).map(|c| c._super));
    let x181: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra12)).map(|c| c.count)).map(|c| c._super));
    let x182: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra13)).map(|c| c.count)).map(|c| c._super));
    let x183: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra14)).map(|c| c.count)).map(|c| c._super));
    let x184: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra15)).map(|c| c.count)).map(|c| c._super));
    let x185: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra16)).map(|c| c.count)).map(|c| c._super));
    let x186: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra17)).map(|c| c.count)).map(|c| c._super));
    let x187: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra18)).map(|c| c.count)).map(|c| c._super));
    let x188: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra19)).map(|c| c.count)).map(|c| c._super));
    let x189: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra20)).map(|c| c.count)).map(|c| c._super));
    let x190: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra21)).map(|c| c.count)).map(|c| c._super));
    let x191: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra22)).map(|c| c.count)).map(|c| c._super));
    let x192: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra23)).map(|c| c.count)).map(|c| c._super));
    let x193: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra24)).map(|c| c.count)).map(|c| c._super));
    let x194: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra25)).map(|c| c.count)).map(|c| c._super));
    let x195: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra26)).map(|c| c.count)).map(|c| c._super));
    let x196: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra27)).map(|c| c.count)).map(|c| c._super));
    let x197: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra28)).map(|c| c.count)).map(|c| c._super));
    let x198: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra29)).map(|c| c.count)).map(|c| c._super));
    let x199: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra30)).map(|c| c.count)).map(|c| c._super));
    let x200: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra31)).map(|c| c.count)).map(|c| c._super));
    let x201: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra32)).map(|c| c.count)).map(|c| c._super));
    let x202: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra33)).map(|c| c.count)).map(|c| c._super));
    let x203: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra34)).map(|c| c.count)).map(|c| c._super));
    let x204: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra35)).map(|c| c.count)).map(|c| c._super));
    let x205: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra36)).map(|c| c.count)).map(|c| c._super));
    let x206: BoundLayout<Reg, _> =
        (((x13.map(|c| c._extra37)).map(|c| c.count)).map(|c| c._super));
    let x207: BoundLayout<Reg, _> = (((x14.map(|c| c._extra0)).map(|c| c.count)).map(|c| c._super));
    let x208: BoundLayout<Reg, _> = (((x14.map(|c| c._extra1)).map(|c| c.count)).map(|c| c._super));
    let x209: PoseidonStateStruct;
    if is_true(x6[to_usize(Val::new(0))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:449)
        let x210: PoseidonStateStruct =
            exec_poseidon_entry(ctx, arg0, &x15, x16, (x7.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x17.store(ctx, Val::new(0));
        eqz!(
            x17.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x18.store(ctx, Val::new(0));
        eqz!(
            x18.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x19.store(ctx, Val::new(0));
        eqz!(
            x19.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x20.store(ctx, Val::new(0));
        eqz!(
            x20.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x21.store(ctx, Val::new(0));
        eqz!(
            x21.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x22.store(ctx, Val::new(0));
        eqz!(
            x22.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x23.store(ctx, Val::new(0));
        eqz!(
            x23.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x24.store(ctx, Val::new(0));
        eqz!(
            x24.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x25.store(ctx, Val::new(0));
        eqz!(
            x25.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x26.store(ctx, Val::new(0));
        eqz!(
            x26.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x27.store(ctx, Val::new(0));
        eqz!(
            x27.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x28.store(ctx, Val::new(0));
        eqz!(
            x28.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x29.store(ctx, Val::new(0));
        eqz!(
            x29.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x30.store(ctx, Val::new(0));
        eqz!(
            x30.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x31.store(ctx, Val::new(0));
        eqz!(
            x31.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x32.store(ctx, Val::new(0));
        eqz!(
            x32.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x33.store(ctx, Val::new(0));
        eqz!(
            x33.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x34.store(ctx, Val::new(0));
        eqz!(
            x34.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x35.store(ctx, Val::new(0));
        eqz!(
            x35.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x36.store(ctx, Val::new(0));
        eqz!(
            x36.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x37.store(ctx, Val::new(0));
        eqz!(
            x37.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x38.store(ctx, Val::new(0));
        eqz!(
            x38.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x39.store(ctx, Val::new(0));
        eqz!(
            x39.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x40.store(ctx, Val::new(0));
        eqz!(
            x40.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x41.store(ctx, Val::new(0));
        eqz!(
            x41.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x42.store(ctx, Val::new(0));
        eqz!(
            x42.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x43.store(ctx, Val::new(0));
        eqz!(
            x43.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x44.store(ctx, Val::new(0));
        eqz!(
            x44.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x45.store(ctx, Val::new(0));
        eqz!(
            x45.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x46.store(ctx, Val::new(0));
        eqz!(
            x46.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x210;
    } else if is_true(x6[to_usize(Val::new(1))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:450)
        let x211: PoseidonStateStruct = back_poseidon_state(ctx, 1, x4)?;
        let x212: PoseidonStateStruct =
            exec_poseidon_load_state(ctx, arg0, &x211, (x8.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x47.store(ctx, Val::new(0));
        eqz!(
            x47.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x48.store(ctx, Val::new(0));
        eqz!(
            x48.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x49.store(ctx, Val::new(0));
        eqz!(
            x49.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x50.store(ctx, Val::new(0));
        eqz!(
            x50.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x51.store(ctx, Val::new(0));
        eqz!(
            x51.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x52.store(ctx, Val::new(0));
        eqz!(
            x52.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x53.store(ctx, Val::new(0));
        eqz!(
            x53.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x54.store(ctx, Val::new(0));
        eqz!(
            x54.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x55.store(ctx, Val::new(0));
        eqz!(
            x55.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x56.store(ctx, Val::new(0));
        eqz!(
            x56.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x57.store(ctx, Val::new(0));
        eqz!(
            x57.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x58.store(ctx, Val::new(0));
        eqz!(
            x58.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x59.store(ctx, Val::new(0));
        eqz!(
            x59.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x60.store(ctx, Val::new(0));
        eqz!(
            x60.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x61.store(ctx, Val::new(0));
        eqz!(
            x61.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x62.store(ctx, Val::new(0));
        eqz!(
            x62.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x63.store(ctx, Val::new(0));
        eqz!(
            x63.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x64.store(ctx, Val::new(0));
        eqz!(
            x64.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x212;
    } else if is_true(x6[to_usize(Val::new(2))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:451)
        let x213: PoseidonStateStruct = back_poseidon_state(ctx, 1, x4)?;
        let x214: PoseidonStateStruct =
            exec_poseidon_load_in(ctx, arg0, &x213, (x9.map(|c| c._super)), global3)?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x65.store(ctx, Val::new(0));
        eqz!(
            x65.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x66.store(ctx, Val::new(0));
        eqz!(
            x66.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x67.store(ctx, Val::new(0));
        eqz!(
            x67.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x68.store(ctx, Val::new(0));
        eqz!(
            x68.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x69.store(ctx, Val::new(0));
        eqz!(
            x69.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x70.store(ctx, Val::new(0));
        eqz!(
            x70.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x71.store(ctx, Val::new(0));
        eqz!(
            x71.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x72.store(ctx, Val::new(0));
        eqz!(
            x72.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x73.store(ctx, Val::new(0));
        eqz!(
            x73.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x74.store(ctx, Val::new(0));
        eqz!(
            x74.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x75.store(ctx, Val::new(0));
        eqz!(
            x75.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x76.store(ctx, Val::new(0));
        eqz!(
            x76.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x77.store(ctx, Val::new(0));
        eqz!(
            x77.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x78.store(ctx, Val::new(0));
        eqz!(
            x78.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x79.store(ctx, Val::new(0));
        eqz!(
            x79.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x80.store(ctx, Val::new(0));
        eqz!(
            x80.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x81.store(ctx, Val::new(0));
        eqz!(
            x81.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x82.store(ctx, Val::new(0));
        eqz!(
            x82.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x214;
    } else if is_true(x6[to_usize(Val::new(3))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:452)
        let x215: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x10.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x83.store(ctx, Val::new(0));
        eqz!(
            x83.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x84.store(ctx, Val::new(0));
        eqz!(
            x84.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x85.store(ctx, Val::new(0));
        eqz!(
            x85.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x86.store(ctx, Val::new(0));
        eqz!(
            x86.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x87.store(ctx, Val::new(0));
        eqz!(
            x87.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x88.store(ctx, Val::new(0));
        eqz!(
            x88.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x89.store(ctx, Val::new(0));
        eqz!(
            x89.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x90.store(ctx, Val::new(0));
        eqz!(
            x90.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x91.store(ctx, Val::new(0));
        eqz!(
            x91.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x92.store(ctx, Val::new(0));
        eqz!(
            x92.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x93.store(ctx, Val::new(0));
        eqz!(
            x93.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x94.store(ctx, Val::new(0));
        eqz!(
            x94.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x95.store(ctx, Val::new(0));
        eqz!(
            x95.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x96.store(ctx, Val::new(0));
        eqz!(
            x96.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x97.store(ctx, Val::new(0));
        eqz!(
            x97.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x98.store(ctx, Val::new(0));
        eqz!(
            x98.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x99.store(ctx, Val::new(0));
        eqz!(
            x99.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x100.store(ctx, Val::new(0));
        eqz!(
            x100.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x101.store(ctx, Val::new(0));
        eqz!(
            x101.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x102.store(ctx, Val::new(0));
        eqz!(
            x102.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x103.store(ctx, Val::new(0));
        eqz!(
            x103.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x104.store(ctx, Val::new(0));
        eqz!(
            x104.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x105.store(ctx, Val::new(0));
        eqz!(
            x105.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x106.store(ctx, Val::new(0));
        eqz!(
            x106.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x107.store(ctx, Val::new(0));
        eqz!(
            x107.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x108.store(ctx, Val::new(0));
        eqz!(
            x108.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x109.store(ctx, Val::new(0));
        eqz!(
            x109.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x110.store(ctx, Val::new(0));
        eqz!(
            x110.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x111.store(ctx, Val::new(0));
        eqz!(
            x111.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x112.store(ctx, Val::new(0));
        eqz!(
            x112.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x113.store(ctx, Val::new(0));
        eqz!(
            x113.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x114.store(ctx, Val::new(0));
        eqz!(
            x114.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x115.store(ctx, Val::new(0));
        eqz!(
            x115.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x116.store(ctx, Val::new(0));
        eqz!(
            x116.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x117.store(ctx, Val::new(0));
        eqz!(
            x117.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x118.store(ctx, Val::new(0));
        eqz!(
            x118.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x119.store(ctx, Val::new(0));
        eqz!(
            x119.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x120.store(ctx, Val::new(0));
        eqz!(
            x120.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x121.store(ctx, Val::new(0));
        eqz!(
            x121.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x122.store(ctx, Val::new(0));
        eqz!(
            x122.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x123.store(ctx, Val::new(0));
        eqz!(
            x123.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x124.store(ctx, Val::new(0));
        eqz!(
            x124.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x215;
    } else if is_true(x6[to_usize(Val::new(4))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:453)
        let x216: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x11.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x125.store(ctx, Val::new(0));
        eqz!(
            x125.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x126.store(ctx, Val::new(0));
        eqz!(
            x126.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x127.store(ctx, Val::new(0));
        eqz!(
            x127.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x128.store(ctx, Val::new(0));
        eqz!(
            x128.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x129.store(ctx, Val::new(0));
        eqz!(
            x129.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x130.store(ctx, Val::new(0));
        eqz!(
            x130.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x131.store(ctx, Val::new(0));
        eqz!(
            x131.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x132.store(ctx, Val::new(0));
        eqz!(
            x132.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x133.store(ctx, Val::new(0));
        eqz!(
            x133.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x134.store(ctx, Val::new(0));
        eqz!(
            x134.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x135.store(ctx, Val::new(0));
        eqz!(
            x135.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x136.store(ctx, Val::new(0));
        eqz!(
            x136.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x137.store(ctx, Val::new(0));
        eqz!(
            x137.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x138.store(ctx, Val::new(0));
        eqz!(
            x138.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x139.store(ctx, Val::new(0));
        eqz!(
            x139.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x140.store(ctx, Val::new(0));
        eqz!(
            x140.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x141.store(ctx, Val::new(0));
        eqz!(
            x141.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x142.store(ctx, Val::new(0));
        eqz!(
            x142.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x143.store(ctx, Val::new(0));
        eqz!(
            x143.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x144.store(ctx, Val::new(0));
        eqz!(
            x144.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x145.store(ctx, Val::new(0));
        eqz!(
            x145.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x146.store(ctx, Val::new(0));
        eqz!(
            x146.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x147.store(ctx, Val::new(0));
        eqz!(
            x147.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x148.store(ctx, Val::new(0));
        eqz!(
            x148.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x149.store(ctx, Val::new(0));
        eqz!(
            x149.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x150.store(ctx, Val::new(0));
        eqz!(
            x150.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x151.store(ctx, Val::new(0));
        eqz!(
            x151.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x152.store(ctx, Val::new(0));
        eqz!(
            x152.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x153.store(ctx, Val::new(0));
        eqz!(
            x153.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x154.store(ctx, Val::new(0));
        eqz!(
            x154.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x155.store(ctx, Val::new(0));
        eqz!(
            x155.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x156.store(ctx, Val::new(0));
        eqz!(
            x156.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x157.store(ctx, Val::new(0));
        eqz!(
            x157.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x158.store(ctx, Val::new(0));
        eqz!(
            x158.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x159.store(ctx, Val::new(0));
        eqz!(
            x159.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x160.store(ctx, Val::new(0));
        eqz!(
            x160.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x161.store(ctx, Val::new(0));
        eqz!(
            x161.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x162.store(ctx, Val::new(0));
        eqz!(
            x162.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x163.store(ctx, Val::new(0));
        eqz!(
            x163.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x164.store(ctx, Val::new(0));
        eqz!(
            x164.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x165.store(ctx, Val::new(0));
        eqz!(
            x165.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x166.store(ctx, Val::new(0));
        eqz!(
            x166.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x216;
    } else if is_true(x6[to_usize(Val::new(5))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:454)
        let x217: PoseidonStateStruct = back_poseidon_state(ctx, 1, x4)?;
        let x218: PoseidonStateStruct =
            exec_poseidon_do_out(ctx, arg0, &x217, (x12.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x167.store(ctx, Val::new(0));
        eqz!(
            x167.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x168.store(ctx, Val::new(0));
        eqz!(
            x168.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x218;
    } else if is_true(x6[to_usize(Val::new(6))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:455)
        let x219: PoseidonStateStruct = back_poseidon_state(ctx, 1, x4)?;
        let x220: PoseidonStateStruct =
            exec_poseidon_paging(ctx, arg0, x16, &x219, (x13.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x169.store(ctx, Val::new(0));
        eqz!(
            x169.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x170.store(ctx, Val::new(0));
        eqz!(
            x170.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x171.store(ctx, Val::new(0));
        eqz!(
            x171.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x172.store(ctx, Val::new(0));
        eqz!(
            x172.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x173.store(ctx, Val::new(0));
        eqz!(
            x173.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x174.store(ctx, Val::new(0));
        eqz!(
            x174.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x175.store(ctx, Val::new(0));
        eqz!(
            x175.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x176.store(ctx, Val::new(0));
        eqz!(
            x176.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x177.store(ctx, Val::new(0));
        eqz!(
            x177.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x178.store(ctx, Val::new(0));
        eqz!(
            x178.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x179.store(ctx, Val::new(0));
        eqz!(
            x179.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x180.store(ctx, Val::new(0));
        eqz!(
            x180.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x181.store(ctx, Val::new(0));
        eqz!(
            x181.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x182.store(ctx, Val::new(0));
        eqz!(
            x182.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x183.store(ctx, Val::new(0));
        eqz!(
            x183.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x184.store(ctx, Val::new(0));
        eqz!(
            x184.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x185.store(ctx, Val::new(0));
        eqz!(
            x185.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x186.store(ctx, Val::new(0));
        eqz!(
            x186.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x187.store(ctx, Val::new(0));
        eqz!(
            x187.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x188.store(ctx, Val::new(0));
        eqz!(
            x188.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x189.store(ctx, Val::new(0));
        eqz!(
            x189.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x190.store(ctx, Val::new(0));
        eqz!(
            x190.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x191.store(ctx, Val::new(0));
        eqz!(
            x191.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x192.store(ctx, Val::new(0));
        eqz!(
            x192.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x193.store(ctx, Val::new(0));
        eqz!(
            x193.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x194.store(ctx, Val::new(0));
        eqz!(
            x194.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x195.store(ctx, Val::new(0));
        eqz!(
            x195.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x196.store(ctx, Val::new(0));
        eqz!(
            x196.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x197.store(ctx, Val::new(0));
        eqz!(
            x197.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x198.store(ctx, Val::new(0));
        eqz!(
            x198.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x199.store(ctx, Val::new(0));
        eqz!(
            x199.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x200.store(ctx, Val::new(0));
        eqz!(
            x200.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x201.store(ctx, Val::new(0));
        eqz!(
            x201.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x202.store(ctx, Val::new(0));
        eqz!(
            x202.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x203.store(ctx, Val::new(0));
        eqz!(
            x203.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x204.store(ctx, Val::new(0));
        eqz!(
            x204.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x205.store(ctx, Val::new(0));
        eqz!(
            x205.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x206.store(ctx, Val::new(0));
        eqz!(
            x206.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x220;
    } else if is_true(x6[to_usize(Val::new(7))]._super) {
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:456)
        let x221: PoseidonStateStruct = back_poseidon_state(ctx, 1, x4)?;
        let x222: PoseidonStateStruct =
            exec_poseidon_store_state(ctx, arg0, &x221, (x14.map(|c| c._super)))?;
        // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
        x207.store(ctx, Val::new(0));
        eqz!(
            x207.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x208.store(ctx, Val::new(0));
        eqz!(
            x208.load(ctx, 0),
            "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)"
        );
        x209 = x222;
    } else {
        bail!("Reached unreachable mux arm")
    } // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:445)
    let x223: Val = arg0._super._super;
    // GetDiffCount(zirgen/circuit/rv32im/v2/dsl/mem.zir:22)
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:458)
    let x224: Val = invoke_extern!(ctx, get_diff_count, x223);
    let x225: CycleArgStruct = exec_cycle_arg(ctx, neg_0(x224)?, x223, (layout2.map(|c| c.arg)))?;
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:460)
    let x226: Val = (x225.cycle._super - x223);
    eqz!(
        x226,
        "Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:460)"
    );
    // Poseidon0(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:448)
    let x227: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x5.map(|c| c._super)))?;
    let x228: Val = x227.next_state._super._super;
    let x229: Val = x227.mode._super._super;
    return Ok(InstOutputStruct {
        new_pc: x15,
        new_state: x228,
        new_mode: x229,
    });
}
pub fn exec_poseidon1<'a>(
    ctx: &'a ExecContext,
    arg0: &RegStruct,
    arg1: &InstInputStruct,
    layout2: BoundLayout<'a, Poseidon1Layout, Val>,
) -> Result<InstOutputStruct> {
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:465)
    let x3: BoundLayout<PoseidonStateLayout, _> = (layout2.map(|c| c.state));
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:467)
    let x4: BoundLayout<Poseidon1StateLayout, _> = (layout2.map(|c| c.state_redef));
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:464)
    let x5: NondetRegStruct8Array = arg1.minor_onehot._super;
    let x6: PoseidonStateStruct;
    if is_true(x5[to_usize(Val::new(0))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:468)
        let x7: PoseidonStateStruct = back_poseidon_state(ctx, 1, x3)?;
        let x8: PoseidonStateStruct = exec_poseidon_ext_round(ctx, &x7, (x4.map(|c| c.arm0)))?;
        x6 = x8;
    } else if is_true(x5[to_usize(Val::new(1))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:469)
        let x9: PoseidonStateStruct = back_poseidon_state(ctx, 1, x3)?;
        let x10: PoseidonStateStruct = exec_poseidon_int_rounds(ctx, &x9, (x4.map(|c| c.arm1)))?;
        x6 = x10;
    } else if is_true(x5[to_usize(Val::new(2))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:470)
        let x11: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm2)))?;
        x6 = x11;
    } else if is_true(x5[to_usize(Val::new(3))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:471)
        let x12: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm3)))?;
        x6 = x12;
    } else if is_true(x5[to_usize(Val::new(4))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:472)
        let x13: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm4)))?;
        x6 = x13;
    } else if is_true(x5[to_usize(Val::new(5))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:473)
        let x14: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm5)))?;
        x6 = x14;
    } else if is_true(x5[to_usize(Val::new(6))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:474)
        let x15: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm6)))?;
        x6 = x15;
    } else if is_true(x5[to_usize(Val::new(7))]._super) {
        // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:475)
        let x16: PoseidonStateStruct = exec_poseidon_invalid(ctx, (x4.map(|c| c.arm7)))?;
        x6 = x16;
    } else {
        bail!("Reached unreachable mux arm")
    } // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:464)
    let x17: Val = arg0._super._super;
    // GetDiffCount(zirgen/circuit/rv32im/v2/dsl/mem.zir:22)
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:477)
    let x18: Val = invoke_extern!(ctx, get_diff_count, x17);
    let x19: CycleArgStruct = exec_cycle_arg(ctx, neg_0(x18)?, x17, (layout2.map(|c| c.arg)))?;
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:479)
    let x20: Val = (x19.cycle._super - x17);
    eqz!(
        x20,
        "Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:479)"
    );
    // Poseidon1(zirgen/circuit/rv32im/v2/dsl/inst_p2.zir:467)
    let x21: PoseidonStateStruct = back_poseidon_state(ctx, 0, (x4.map(|c| c._super)))?;
    let x22: Val = x21.next_state._super._super;
    let x23: Val = x21.mode._super._super;
    return Ok(InstOutputStruct {
        new_pc: arg1.pc_u32,
        new_state: x22,
        new_mode: x23,
    });
}
pub fn exec_one_hot_11_<'a>(
    ctx: &'a ExecContext,
    arg0: Val,
    layout1: BoundLayout<'a, OneHot_11_Layout, Val>,
) -> Result<OneHot_11_Struct> {
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:7)
    let x2: NondetRegStruct11Array = map_layout(
        [
            Val::new(0),
            Val::new(1),
            Val::new(2),
            Val::new(3),
            Val::new(4),
            Val::new(5),
            Val::new(6),
            Val::new(7),
            Val::new(8),
            Val::new(9),
            Val::new(10),
        ],
        (layout1.map(|c| c._super)),
        |x3, x4| {
            let x5: NondetRegStruct = exec_nondet_bit_reg(ctx, isz((x3 - arg0))?, x4)?;
            return Ok(x5);
        },
    )?;
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)
    let x6: Val = x2[to_usize(Val::new(1))]._super;
    let x7: Val = (x2[to_usize(Val::new(0))]._super + x6);
    let x8: Val = x2[to_usize(Val::new(2))]._super;
    let x9: Val = x2[to_usize(Val::new(3))]._super;
    let x10: Val = x2[to_usize(Val::new(4))]._super;
    let x11: Val = (((x7 + x8) + x9) + x10);
    let x12: Val = x2[to_usize(Val::new(5))]._super;
    let x13: Val = x2[to_usize(Val::new(6))]._super;
    let x14: Val = x2[to_usize(Val::new(7))]._super;
    let x15: Val = (((x11 + x12) + x13) + x14);
    let x16: Val = x2[to_usize(Val::new(8))]._super;
    let x17: Val = x2[to_usize(Val::new(9))]._super;
    let x18: Val = x2[to_usize(Val::new(10))]._super;
    let x19: Val = (((x15 + x16) + x17) + x18);
    eqz!(
        (x19 - Val::new(1)),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:9)"
    );
    // OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)
    let x20: Val = (((x6 + (x8 * Val::new(2))) + (x9 * Val::new(3))) + (x10 * Val::new(4)));
    let x21: Val = (((x20 + (x12 * Val::new(5))) + (x13 * Val::new(6))) + (x14 * Val::new(7)));
    let x22: Val = (((x21 + (x16 * Val::new(8))) + (x17 * Val::new(9))) + (x18 * Val::new(10)));
    eqz!(
        (x22 - arg0),
        "OneHot(zirgen/circuit/rv32im/v2/dsl/one_hot.zir:11)"
    );
    return Ok(OneHot_11_Struct { _super: x2 });
}
pub fn exec_top<'a>(
    ctx: &'a ExecContext,
    layout0: BoundLayout<'a, TopLayout, Val>,
    global1: BufferRow<Val>,
) -> Result<TopStruct> {
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:41)
    let x2: BoundLayout<NondetRegLayout, _> = (layout0.map(|c| c.next_pc_low));
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:42)
    let x3: BoundLayout<NondetRegLayout, _> = (layout0.map(|c| c.next_pc_high));
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:43)
    let x4: BoundLayout<NondetRegLayout, _> = (layout0.map(|c| c.next_state_0));
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:44)
    let x5: BoundLayout<NondetRegLayout, _> = (layout0.map(|c| c.next_machine_mode));
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:69)
    let x6: BoundLayout<TopInstResultLayout, _> = (layout0.map(|c| c.inst_result));
    // IsFirstCycle(zirgen/circuit/rv32im/v2/dsl/top.zir:17)
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:47)
    let x7: Val = invoke_extern!(ctx, is_first_cycle_0);
    let x8: NondetRegStruct = exec_nondet_reg(ctx, x7, (layout0.map(|c| c.is_first_cycle)))?;
    // GetCycle(zirgen/circuit/rv32im/v2/dsl/top.zir:18)
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:48)
    let x9: Val = invoke_extern!(ctx, get_cycle);
    let x10: NondetRegStruct = exec_nondet_reg(ctx, x9, (layout0.map(|c| c.cycle_nd)))?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:49)
    let x11: RegStruct = exec_reg(ctx, x10._super, (layout0.map(|c| c.cycle)))?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:47)
    let x12: Val = x8._super;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:52)
    let x13: Val = (Val::new(1) - x12);
    let x14: RegStruct = back_reg(ctx, 1, x2)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:53)
    let x15: RegStruct = back_reg(ctx, 1, x3)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:56)
    let x16: RegStruct = back_reg(ctx, 1, x4)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:58)
    let x17: RegStruct = back_reg(ctx, 1, x5)?;
    // GetMajorMinor(zirgen/circuit/rv32im/v2/dsl/top.zir:25)
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:60)
    let (x18, x19) = invoke_extern!(ctx, get_major_minor);
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:62)
    let x20: NondetRegStruct = exec_nondet_reg(ctx, x18, (layout0.map(|c| c.major)))?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:63)
    let x21: NondetRegStruct = exec_nondet_reg(ctx, x19, (layout0.map(|c| c.minor)))?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:62)
    let x22: Val = x20._super;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:63)
    let x23: Val = x21._super;
    // Log(<preamble>:22)
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:64)
    invoke_extern!(ctx, log, "Major/Minor = ", [x22, x23]);
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:49)
    let x24: Val = x11._super._super;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:66)
    let x25: InstInputStruct = exec_inst_input(
        ctx,
        x24,
        x22,
        x23,
        &ValU32Struct {
            low: (x13 * x14._super._super),
            high: (x13 * x15._super._super),
        },
        (x13 * x16._super._super),
        ((x13 * x17._super._super) + x12),
        (layout0.map(|c| c.inst_input)),
    )?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:68)
    let x26: OneHot_11_Struct = exec_one_hot_11_(ctx, x22, (layout0.map(|c| c.major_onehot)))?;
    let x27: NondetRegStruct11Array = x26._super;
    let x28: InstOutputStruct;
    if is_true(x27[to_usize(Val::new(0))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:70)
        let x29: InstOutputStruct = exec_misc0(ctx, &x11, &x25, (x6.map(|c| c.arm0)))?;
        x28 = x29;
    } else if is_true(x27[to_usize(Val::new(1))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:71)
        let x30: InstOutputStruct = exec_misc1(ctx, &x11, &x25, (x6.map(|c| c.arm1)))?;
        x28 = x30;
    } else if is_true(x27[to_usize(Val::new(2))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:72)
        let x31: InstOutputStruct = exec_misc2(ctx, &x11, &x25, (x6.map(|c| c.arm2)))?;
        x28 = x31;
    } else if is_true(x27[to_usize(Val::new(3))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:73)
        let x32: InstOutputStruct = exec_mul0(ctx, &x11, &x25, (x6.map(|c| c.arm3)))?;
        x28 = x32;
    } else if is_true(x27[to_usize(Val::new(4))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:74)
        let x33: InstOutputStruct = exec_div0(ctx, &x11, &x25, (x6.map(|c| c.arm4)))?;
        x28 = x33;
    } else if is_true(x27[to_usize(Val::new(5))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:75)
        let x34: InstOutputStruct = exec_mem0(ctx, &x11, &x25, (x6.map(|c| c.arm5)))?;
        x28 = x34;
    } else if is_true(x27[to_usize(Val::new(6))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:76)
        let x35: InstOutputStruct = exec_mem1(ctx, &x11, &x25, (x6.map(|c| c.arm6)))?;
        x28 = x35;
    } else if is_true(x27[to_usize(Val::new(7))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:77)
        let x36: InstOutputStruct = exec_control0(ctx, &x11, &x25, (x6.map(|c| c.arm7)), global1)?;
        x28 = x36;
    } else if is_true(x27[to_usize(Val::new(8))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:78)
        let x37: InstOutputStruct = exec_e_call0(ctx, &x11, &x25, (x6.map(|c| c.arm8)), global1)?;
        x28 = x37;
    } else if is_true(x27[to_usize(Val::new(9))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:79)
        let x38: InstOutputStruct = exec_poseidon0(ctx, &x11, &x25, (x6.map(|c| c.arm9)), global1)?;
        x28 = x38;
    } else if is_true(x27[to_usize(Val::new(10))]._super) {
        // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:80)
        let x39: InstOutputStruct = exec_poseidon1(ctx, &x11, &x25, (x6.map(|c| c.arm10)))?;
        x28 = x39;
    } else {
        bail!("Reached unreachable mux arm")
    } // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:69)
    let x40: ValU32Struct = x28.new_pc;
    let x41: Val = x40.low;
    let x42: Val = x40.high;
    let x43: Val = x28.new_state;
    let x44: Val = x28.new_mode;
    // Log(<preamble>:22)
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:84)
    invoke_extern!(
        ctx,
        log,
        "Cycle, pc, state, mm",
        [
            x24,
            ((x41 * Val::new(1509949441)) + (x42 * Val::new(16384))),
            x43,
            x44
        ]
    );
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:85)
    let x45: RegStruct = exec_reg(ctx, x41, x2)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:86)
    let x46: RegStruct = exec_reg(ctx, x42, x3)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:87)
    let x47: RegStruct = exec_reg(ctx, x43, x4)?;
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:88)
    let x48: RegStruct = exec_reg(ctx, x44, x5)?;
    return Ok(TopStruct {});
}
pub fn step_top<'a>(
    ctx: &'a ExecContext,
    data0: BufferRow<Val>,
    global1: BufferRow<Val>,
) -> Result<()> {
    // Top(zirgen/circuit/rv32im/v2/dsl/top.zir:27)
    let x2: BoundLayout<TopLayout, _> = bind_layout!(LAYOUT_TOP, data0);
    let x3: TopStruct = exec_top(ctx, x2, global1)?;
    return Ok(());
}
pub fn exec_top_accum<'a>(
    ctx: &'a ExecContext,
    arg0: BoundLayout<'a, TopLayout, Val>,
    layout1: BoundLayout<'a, LayoutAccumLayout, Val>,
    mix2: BufferRow<Val>,
) -> Result<ComponentStruct> {
    // zirgen/dsl/passes/GenerateAccum.cpp:526
    let x3: BoundLayout<_mixLayout, _> = bind_layout!(LAYOUT_MIX, mix2);
    // zirgen/dsl/passes/GenerateAccum.cpp:533
    let x4: BoundLayout<_accumLayout, _> = (x3.map(|c| c.randomness));
    // zirgen/dsl/passes/GenerateAccum.cpp:545
    let x5: BoundLayout<TopInstResultLayout, _> = (arg0.map(|c| c.inst_result));
    // zirgen/dsl/passes/GenerateAccum.cpp:574
    let x6: BoundLayout<NondetRegLayout11LayoutArray, _> = (x5.map(|c| c._selector));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x7: BoundLayout<Misc0Layout, _> = (x5.map(|c| c.arm0));
    // zirgen/dsl/passes/GenerateAccum.cpp:604
    let x8: BoundLayout<Reg19LayoutArray, _> = (layout1.map(|c| c.columns));
    // zirgen/dsl/passes/GenerateAccum.cpp:53
    let x9: BoundLayout<Reg, _> = ((x4.map(|c| c.arg_u16)).map(|c| c.val));
    let x10: BoundLayout<Arg_MemoryArgLayout, _> = (x4.map(|c| c.memory_arg));
    let x11: BoundLayout<Reg, _> = (x10.map(|c| c.addr));
    let x12: BoundLayout<Reg, _> = (x10.map(|c| c.cycle));
    let x13: BoundLayout<Reg, _> = (x10.map(|c| c.data_low));
    let x14: BoundLayout<Reg, _> = (x10.map(|c| c.data_high));
    let x15: BoundLayout<Reg, _> = ((x4.map(|c| c.cycle_arg)).map(|c| c.cycle));
    // zirgen/dsl/passes/GenerateAccum.cpp:83
    let x16: BoundLayout<Reg, _> = (x4.map(|c| c._offset));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x17: BoundLayout<FinalizeMiscLayout, _> = (x7.map(|c| c._super));
    let x18: BoundLayout<NormalizeU32Layout, _> = (x17.map(|c| c.write_data));
    let x19: BoundLayout<ArgU16Layout, _> = ((x18.map(|c| c.low16)).map(|c| c.arg));
    let x20: BoundLayout<ArgU16Layout, _> = ((x18.map(|c| c.high16)).map(|c| c.arg));
    let x21: BoundLayout<NormalizeU32Layout, _> = (x17.map(|c| c.pc_norm));
    let x22: BoundLayout<ArgU16Layout, _> = ((x21.map(|c| c.low16)).map(|c| c.arg));
    let x23: BoundLayout<ArgU16Layout, _> = ((x21.map(|c| c.high16)).map(|c| c.arg));
    let x24: BoundLayout<MemoryWriteLayout, _> = ((x17.map(|c| c._0)).map(|c| c._0));
    let x25: BoundLayout<MemoryIOLayout, _> = (x24.map(|c| c.io));
    let x26: BoundLayout<MemoryArgLayout, _> = (x25.map(|c| c.old_txn));
    let x27: BoundLayout<MemoryArgLayout, _> = (x25.map(|c| c.new_txn));
    let x28: BoundLayout<CycleArgLayout, _> = (((x24.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x29: BoundLayout<MiscInputLayout, _> = (x7.map(|c| c.input));
    let x30: BoundLayout<DecodeInstLayout, _> = (x29.map(|c| c.decoded));
    let x31: BoundLayout<CycleArgLayout, _> = (x30.map(|c| c.arg));
    let x32: BoundLayout<AddrDecomposeLayout, _> = (x30.map(|c| c.pc_addr));
    let x33: BoundLayout<ArgU16Layout, _> =
        (((x32.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x34: BoundLayout<ArgU16Layout, _> = ((x32.map(|c| c.med14)).map(|c| c.arg));
    let x35: BoundLayout<MemoryReadLayout, _> = (x30.map(|c| c.load_inst));
    let x36: BoundLayout<MemoryIOLayout, _> = (x35.map(|c| c.io));
    let x37: BoundLayout<MemoryArgLayout, _> = (x36.map(|c| c.old_txn));
    let x38: BoundLayout<MemoryArgLayout, _> = (x36.map(|c| c.new_txn));
    let x39: BoundLayout<CycleArgLayout, _> = (((x35.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x40: BoundLayout<MemoryReadLayout, _> = ((x29.map(|c| c.rs1)).map(|c| c._super));
    let x41: BoundLayout<MemoryIOLayout, _> = (x40.map(|c| c.io));
    let x42: BoundLayout<MemoryArgLayout, _> = (x41.map(|c| c.old_txn));
    let x43: BoundLayout<MemoryArgLayout, _> = (x41.map(|c| c.new_txn));
    let x44: BoundLayout<CycleArgLayout, _> = (((x40.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x45: BoundLayout<MemoryReadLayout, _> = ((x29.map(|c| c.rs2)).map(|c| c._super));
    let x46: BoundLayout<MemoryIOLayout, _> = (x45.map(|c| c.io));
    let x47: BoundLayout<MemoryArgLayout, _> = (x46.map(|c| c.old_txn));
    let x48: BoundLayout<MemoryArgLayout, _> = (x46.map(|c| c.new_txn));
    let x49: BoundLayout<CycleArgLayout, _> = (((x45.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x50: BoundLayout<ArgU16Layout5LayoutArray, _> =
        ((x7.map(|c| c._arguments_misc0_misc_output)).map(|c| c.arg_u16));
    // zirgen/dsl/passes/GenerateAccum.cpp:624
    let x51: ComponentStruct = ComponentStruct {};
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x52: BoundLayout<Misc1Layout, _> = (x5.map(|c| c.arm1));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x53: BoundLayout<FinalizeMiscLayout, _> = (x52.map(|c| c._super));
    let x54: BoundLayout<NormalizeU32Layout, _> = (x53.map(|c| c.write_data));
    let x55: BoundLayout<ArgU16Layout, _> = ((x54.map(|c| c.low16)).map(|c| c.arg));
    let x56: BoundLayout<ArgU16Layout, _> = ((x54.map(|c| c.high16)).map(|c| c.arg));
    let x57: BoundLayout<NormalizeU32Layout, _> = (x53.map(|c| c.pc_norm));
    let x58: BoundLayout<ArgU16Layout, _> = ((x57.map(|c| c.low16)).map(|c| c.arg));
    let x59: BoundLayout<ArgU16Layout, _> = ((x57.map(|c| c.high16)).map(|c| c.arg));
    let x60: BoundLayout<MemoryWriteLayout, _> = ((x53.map(|c| c._0)).map(|c| c._0));
    let x61: BoundLayout<MemoryIOLayout, _> = (x60.map(|c| c.io));
    let x62: BoundLayout<MemoryArgLayout, _> = (x61.map(|c| c.old_txn));
    let x63: BoundLayout<MemoryArgLayout, _> = (x61.map(|c| c.new_txn));
    let x64: BoundLayout<CycleArgLayout, _> = (((x60.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x65: BoundLayout<MiscInputLayout, _> = (x52.map(|c| c.input));
    let x66: BoundLayout<DecodeInstLayout, _> = (x65.map(|c| c.decoded));
    let x67: BoundLayout<CycleArgLayout, _> = (x66.map(|c| c.arg));
    let x68: BoundLayout<AddrDecomposeLayout, _> = (x66.map(|c| c.pc_addr));
    let x69: BoundLayout<ArgU16Layout, _> =
        (((x68.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x70: BoundLayout<ArgU16Layout, _> = ((x68.map(|c| c.med14)).map(|c| c.arg));
    let x71: BoundLayout<MemoryReadLayout, _> = (x66.map(|c| c.load_inst));
    let x72: BoundLayout<MemoryIOLayout, _> = (x71.map(|c| c.io));
    let x73: BoundLayout<MemoryArgLayout, _> = (x72.map(|c| c.old_txn));
    let x74: BoundLayout<MemoryArgLayout, _> = (x72.map(|c| c.new_txn));
    let x75: BoundLayout<CycleArgLayout, _> = (((x71.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x76: BoundLayout<MemoryReadLayout, _> = ((x65.map(|c| c.rs1)).map(|c| c._super));
    let x77: BoundLayout<MemoryIOLayout, _> = (x76.map(|c| c.io));
    let x78: BoundLayout<MemoryArgLayout, _> = (x77.map(|c| c.old_txn));
    let x79: BoundLayout<MemoryArgLayout, _> = (x77.map(|c| c.new_txn));
    let x80: BoundLayout<CycleArgLayout, _> = (((x76.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x81: BoundLayout<MemoryReadLayout, _> = ((x65.map(|c| c.rs2)).map(|c| c._super));
    let x82: BoundLayout<MemoryIOLayout, _> = (x81.map(|c| c.io));
    let x83: BoundLayout<MemoryArgLayout, _> = (x82.map(|c| c.old_txn));
    let x84: BoundLayout<MemoryArgLayout, _> = (x82.map(|c| c.new_txn));
    let x85: BoundLayout<CycleArgLayout, _> = (((x81.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x86: BoundLayout<ArgU16Layout5LayoutArray, _> =
        ((x52.map(|c| c._arguments_misc1_misc_output)).map(|c| c.arg_u16));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x87: BoundLayout<Misc2Layout, _> = (x5.map(|c| c.arm2));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x88: BoundLayout<FinalizeMiscLayout, _> = (x87.map(|c| c._super));
    let x89: BoundLayout<NormalizeU32Layout, _> = (x88.map(|c| c.write_data));
    let x90: BoundLayout<ArgU16Layout, _> = ((x89.map(|c| c.low16)).map(|c| c.arg));
    let x91: BoundLayout<ArgU16Layout, _> = ((x89.map(|c| c.high16)).map(|c| c.arg));
    let x92: BoundLayout<NormalizeU32Layout, _> = (x88.map(|c| c.pc_norm));
    let x93: BoundLayout<ArgU16Layout, _> = ((x92.map(|c| c.low16)).map(|c| c.arg));
    let x94: BoundLayout<ArgU16Layout, _> = ((x92.map(|c| c.high16)).map(|c| c.arg));
    let x95: BoundLayout<MemoryWriteLayout, _> = ((x88.map(|c| c._0)).map(|c| c._0));
    let x96: BoundLayout<MemoryIOLayout, _> = (x95.map(|c| c.io));
    let x97: BoundLayout<MemoryArgLayout, _> = (x96.map(|c| c.old_txn));
    let x98: BoundLayout<MemoryArgLayout, _> = (x96.map(|c| c.new_txn));
    let x99: BoundLayout<CycleArgLayout, _> = (((x95.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x100: BoundLayout<MiscInputLayout, _> = (x87.map(|c| c.input));
    let x101: BoundLayout<DecodeInstLayout, _> = (x100.map(|c| c.decoded));
    let x102: BoundLayout<CycleArgLayout, _> = (x101.map(|c| c.arg));
    let x103: BoundLayout<AddrDecomposeLayout, _> = (x101.map(|c| c.pc_addr));
    let x104: BoundLayout<ArgU16Layout, _> =
        (((x103.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x105: BoundLayout<ArgU16Layout, _> = ((x103.map(|c| c.med14)).map(|c| c.arg));
    let x106: BoundLayout<MemoryReadLayout, _> = (x101.map(|c| c.load_inst));
    let x107: BoundLayout<MemoryIOLayout, _> = (x106.map(|c| c.io));
    let x108: BoundLayout<MemoryArgLayout, _> = (x107.map(|c| c.old_txn));
    let x109: BoundLayout<MemoryArgLayout, _> = (x107.map(|c| c.new_txn));
    let x110: BoundLayout<CycleArgLayout, _> =
        (((x106.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x111: BoundLayout<MemoryReadLayout, _> = ((x100.map(|c| c.rs1)).map(|c| c._super));
    let x112: BoundLayout<MemoryIOLayout, _> = (x111.map(|c| c.io));
    let x113: BoundLayout<MemoryArgLayout, _> = (x112.map(|c| c.old_txn));
    let x114: BoundLayout<MemoryArgLayout, _> = (x112.map(|c| c.new_txn));
    let x115: BoundLayout<CycleArgLayout, _> =
        (((x111.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x116: BoundLayout<MemoryReadLayout, _> = ((x100.map(|c| c.rs2)).map(|c| c._super));
    let x117: BoundLayout<MemoryIOLayout, _> = (x116.map(|c| c.io));
    let x118: BoundLayout<MemoryArgLayout, _> = (x117.map(|c| c.old_txn));
    let x119: BoundLayout<MemoryArgLayout, _> = (x117.map(|c| c.new_txn));
    let x120: BoundLayout<CycleArgLayout, _> =
        (((x116.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x121: BoundLayout<ArgU16Layout5LayoutArray, _> =
        ((x87.map(|c| c._arguments_misc2_misc_output)).map(|c| c.arg_u16));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x122: BoundLayout<Mul0Layout, _> = (x5.map(|c| c.arm3));
    // zirgen/dsl/passes/GenerateAccum.cpp:53
    let x123: BoundLayout<Reg, _> = ((x4.map(|c| c.arg_u8)).map(|c| c.val));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x124: BoundLayout<MulInputLayout, _> = (x122.map(|c| c.input));
    let x125: BoundLayout<DecodeInstLayout, _> = (x124.map(|c| c.decoded));
    let x126: BoundLayout<CycleArgLayout, _> = (x125.map(|c| c.arg));
    let x127: BoundLayout<AddrDecomposeLayout, _> = (x125.map(|c| c.pc_addr));
    let x128: BoundLayout<ArgU16Layout, _> =
        (((x127.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x129: BoundLayout<ArgU16Layout, _> = ((x127.map(|c| c.med14)).map(|c| c.arg));
    let x130: BoundLayout<MemoryReadLayout, _> = (x125.map(|c| c.load_inst));
    let x131: BoundLayout<MemoryIOLayout, _> = (x130.map(|c| c.io));
    let x132: BoundLayout<MemoryArgLayout, _> = (x131.map(|c| c.old_txn));
    let x133: BoundLayout<MemoryArgLayout, _> = (x131.map(|c| c.new_txn));
    let x134: BoundLayout<CycleArgLayout, _> =
        (((x130.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x135: BoundLayout<MemoryReadLayout, _> = ((x124.map(|c| c.rs1)).map(|c| c._super));
    let x136: BoundLayout<MemoryIOLayout, _> = (x135.map(|c| c.io));
    let x137: BoundLayout<MemoryArgLayout, _> = (x136.map(|c| c.old_txn));
    let x138: BoundLayout<MemoryArgLayout, _> = (x136.map(|c| c.new_txn));
    let x139: BoundLayout<CycleArgLayout, _> =
        (((x135.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x140: BoundLayout<MemoryReadLayout, _> = ((x124.map(|c| c.rs2)).map(|c| c._super));
    let x141: BoundLayout<MemoryIOLayout, _> = (x140.map(|c| c.io));
    let x142: BoundLayout<MemoryArgLayout, _> = (x141.map(|c| c.old_txn));
    let x143: BoundLayout<MemoryArgLayout, _> = (x141.map(|c| c.new_txn));
    let x144: BoundLayout<CycleArgLayout, _> =
        (((x140.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x145: BoundLayout<_Arguments_Mul0MulOutputLayout, _> =
        (x122.map(|c| c._arguments_mul0_mul_output));
    let x146: BoundLayout<ArgU16Layout6LayoutArray, _> = (x145.map(|c| c.arg_u16));
    let x147: BoundLayout<ArgU8Layout13LayoutArray, _> = (x145.map(|c| c.arg_u8));
    let x148: BoundLayout<MemoryWriteLayout, _> = ((x122.map(|c| c._0)).map(|c| c._0));
    let x149: BoundLayout<MemoryIOLayout, _> = (x148.map(|c| c.io));
    let x150: BoundLayout<MemoryArgLayout, _> = (x149.map(|c| c.old_txn));
    let x151: BoundLayout<MemoryArgLayout, _> = (x149.map(|c| c.new_txn));
    let x152: BoundLayout<CycleArgLayout, _> =
        (((x148.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x153: BoundLayout<NormalizeU32Layout, _> = (x122.map(|c| c.pc_add));
    let x154: BoundLayout<ArgU16Layout, _> = ((x153.map(|c| c.low16)).map(|c| c.arg));
    let x155: BoundLayout<ArgU16Layout, _> = ((x153.map(|c| c.high16)).map(|c| c.arg));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x156: BoundLayout<Div0Layout, _> = (x5.map(|c| c.arm4));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x157: BoundLayout<DivInputLayout, _> = (x156.map(|c| c.input));
    let x158: BoundLayout<DecodeInstLayout, _> = (x157.map(|c| c.decoded));
    let x159: BoundLayout<CycleArgLayout, _> = (x158.map(|c| c.arg));
    let x160: BoundLayout<AddrDecomposeLayout, _> = (x158.map(|c| c.pc_addr));
    let x161: BoundLayout<ArgU16Layout, _> =
        (((x160.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x162: BoundLayout<ArgU16Layout, _> = ((x160.map(|c| c.med14)).map(|c| c.arg));
    let x163: BoundLayout<MemoryReadLayout, _> = (x158.map(|c| c.load_inst));
    let x164: BoundLayout<MemoryIOLayout, _> = (x163.map(|c| c.io));
    let x165: BoundLayout<MemoryArgLayout, _> = (x164.map(|c| c.old_txn));
    let x166: BoundLayout<MemoryArgLayout, _> = (x164.map(|c| c.new_txn));
    let x167: BoundLayout<CycleArgLayout, _> =
        (((x163.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x168: BoundLayout<MemoryReadLayout, _> = ((x157.map(|c| c.rs1)).map(|c| c._super));
    let x169: BoundLayout<MemoryIOLayout, _> = (x168.map(|c| c.io));
    let x170: BoundLayout<MemoryArgLayout, _> = (x169.map(|c| c.old_txn));
    let x171: BoundLayout<MemoryArgLayout, _> = (x169.map(|c| c.new_txn));
    let x172: BoundLayout<CycleArgLayout, _> =
        (((x168.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x173: BoundLayout<MemoryReadLayout, _> = ((x157.map(|c| c.rs2)).map(|c| c._super));
    let x174: BoundLayout<MemoryIOLayout, _> = (x173.map(|c| c.io));
    let x175: BoundLayout<MemoryArgLayout, _> = (x174.map(|c| c.old_txn));
    let x176: BoundLayout<MemoryArgLayout, _> = (x174.map(|c| c.new_txn));
    let x177: BoundLayout<CycleArgLayout, _> =
        (((x173.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x178: BoundLayout<_Arguments_Div0MulOutputLayout, _> =
        (x156.map(|c| c._arguments_div0_mul_output));
    let x179: BoundLayout<ArgU16Layout9LayoutArray, _> = (x178.map(|c| c.arg_u16));
    let x180: BoundLayout<ArgU8Layout13LayoutArray, _> = (x178.map(|c| c.arg_u8));
    let x181: BoundLayout<MemoryWriteLayout, _> = ((x156.map(|c| c._0)).map(|c| c._0));
    let x182: BoundLayout<MemoryIOLayout, _> = (x181.map(|c| c.io));
    let x183: BoundLayout<MemoryArgLayout, _> = (x182.map(|c| c.old_txn));
    let x184: BoundLayout<MemoryArgLayout, _> = (x182.map(|c| c.new_txn));
    let x185: BoundLayout<CycleArgLayout, _> =
        (((x181.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x186: BoundLayout<NormalizeU32Layout, _> = (x156.map(|c| c.pc_add));
    let x187: BoundLayout<ArgU16Layout, _> = ((x186.map(|c| c.low16)).map(|c| c.arg));
    let x188: BoundLayout<ArgU16Layout, _> = ((x186.map(|c| c.high16)).map(|c| c.arg));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x189: BoundLayout<Mem0Layout, _> = (x5.map(|c| c.arm5));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x190: BoundLayout<MemLoadInputLayout, _> = (x189.map(|c| c.input));
    let x191: BoundLayout<DecodeInstLayout, _> = (x190.map(|c| c.decoded));
    let x192: BoundLayout<CycleArgLayout, _> = (x191.map(|c| c.arg));
    let x193: BoundLayout<AddrDecomposeLayout, _> = (x191.map(|c| c.pc_addr));
    let x194: BoundLayout<ArgU16Layout, _> =
        (((x193.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x195: BoundLayout<ArgU16Layout, _> = ((x193.map(|c| c.med14)).map(|c| c.arg));
    let x196: BoundLayout<MemoryReadLayout, _> = (x191.map(|c| c.load_inst));
    let x197: BoundLayout<MemoryIOLayout, _> = (x196.map(|c| c.io));
    let x198: BoundLayout<MemoryArgLayout, _> = (x197.map(|c| c.old_txn));
    let x199: BoundLayout<MemoryArgLayout, _> = (x197.map(|c| c.new_txn));
    let x200: BoundLayout<CycleArgLayout, _> =
        (((x196.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x201: BoundLayout<MemoryReadLayout, _> = ((x190.map(|c| c.rs1)).map(|c| c._super));
    let x202: BoundLayout<MemoryIOLayout, _> = (x201.map(|c| c.io));
    let x203: BoundLayout<MemoryArgLayout, _> = (x202.map(|c| c.old_txn));
    let x204: BoundLayout<MemoryArgLayout, _> = (x202.map(|c| c.new_txn));
    let x205: BoundLayout<CycleArgLayout, _> =
        (((x201.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x206: BoundLayout<NormalizeU32Layout, _> = (x190.map(|c| c.addr_u32));
    let x207: BoundLayout<ArgU16Layout, _> = ((x206.map(|c| c.low16)).map(|c| c.arg));
    let x208: BoundLayout<ArgU16Layout, _> = ((x206.map(|c| c.high16)).map(|c| c.arg));
    let x209: BoundLayout<AddrDecomposeBitsLayout, _> = (x190.map(|c| c.addr));
    let x210: BoundLayout<ArgU16Layout, _> =
        (((x209.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x211: BoundLayout<ArgU16Layout, _> = ((x209.map(|c| c.med14)).map(|c| c.arg));
    let x212: BoundLayout<MemoryReadLayout, _> = (x190.map(|c| c.data_0));
    let x213: BoundLayout<MemoryIOLayout, _> = (x212.map(|c| c.io));
    let x214: BoundLayout<MemoryArgLayout, _> = (x213.map(|c| c.old_txn));
    let x215: BoundLayout<MemoryArgLayout, _> = (x213.map(|c| c.new_txn));
    let x216: BoundLayout<CycleArgLayout, _> =
        (((x212.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x217: BoundLayout<ArgU8Layout3LayoutArray, _> =
        ((x189.map(|c| c._arguments_mem0_output)).map(|c| c.arg_u8));
    let x218: BoundLayout<MemoryWriteLayout, _> = ((x189.map(|c| c._0)).map(|c| c._0));
    let x219: BoundLayout<MemoryIOLayout, _> = (x218.map(|c| c.io));
    let x220: BoundLayout<MemoryArgLayout, _> = (x219.map(|c| c.old_txn));
    let x221: BoundLayout<MemoryArgLayout, _> = (x219.map(|c| c.new_txn));
    let x222: BoundLayout<CycleArgLayout, _> =
        (((x218.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x223: BoundLayout<NormalizeU32Layout, _> = (x189.map(|c| c.pc_add));
    let x224: BoundLayout<ArgU16Layout, _> = ((x223.map(|c| c.low16)).map(|c| c.arg));
    let x225: BoundLayout<ArgU16Layout, _> = ((x223.map(|c| c.high16)).map(|c| c.arg));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x226: BoundLayout<Mem1Layout, _> = (x5.map(|c| c.arm6));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x227: BoundLayout<MemStoreInputLayout, _> = (x226.map(|c| c.input));
    let x228: BoundLayout<DecodeInstLayout, _> = (x227.map(|c| c.decoded));
    let x229: BoundLayout<CycleArgLayout, _> = (x228.map(|c| c.arg));
    let x230: BoundLayout<AddrDecomposeLayout, _> = (x228.map(|c| c.pc_addr));
    let x231: BoundLayout<ArgU16Layout, _> =
        (((x230.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x232: BoundLayout<ArgU16Layout, _> = ((x230.map(|c| c.med14)).map(|c| c.arg));
    let x233: BoundLayout<MemoryReadLayout, _> = (x228.map(|c| c.load_inst));
    let x234: BoundLayout<MemoryIOLayout, _> = (x233.map(|c| c.io));
    let x235: BoundLayout<MemoryArgLayout, _> = (x234.map(|c| c.old_txn));
    let x236: BoundLayout<MemoryArgLayout, _> = (x234.map(|c| c.new_txn));
    let x237: BoundLayout<CycleArgLayout, _> =
        (((x233.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x238: BoundLayout<MemoryReadLayout, _> = ((x227.map(|c| c.rs1)).map(|c| c._super));
    let x239: BoundLayout<MemoryIOLayout, _> = (x238.map(|c| c.io));
    let x240: BoundLayout<MemoryArgLayout, _> = (x239.map(|c| c.old_txn));
    let x241: BoundLayout<MemoryArgLayout, _> = (x239.map(|c| c.new_txn));
    let x242: BoundLayout<CycleArgLayout, _> =
        (((x238.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x243: BoundLayout<MemoryReadLayout, _> = ((x227.map(|c| c.rs2)).map(|c| c._super));
    let x244: BoundLayout<MemoryIOLayout, _> = (x243.map(|c| c.io));
    let x245: BoundLayout<MemoryArgLayout, _> = (x244.map(|c| c.old_txn));
    let x246: BoundLayout<MemoryArgLayout, _> = (x244.map(|c| c.new_txn));
    let x247: BoundLayout<CycleArgLayout, _> =
        (((x243.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x248: BoundLayout<NormalizeU32Layout, _> = (x227.map(|c| c.addr_u32));
    let x249: BoundLayout<ArgU16Layout, _> = ((x248.map(|c| c.low16)).map(|c| c.arg));
    let x250: BoundLayout<ArgU16Layout, _> = ((x248.map(|c| c.high16)).map(|c| c.arg));
    let x251: BoundLayout<AddrDecomposeBitsLayout, _> = (x227.map(|c| c.addr));
    let x252: BoundLayout<ArgU16Layout, _> =
        (((x251.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x253: BoundLayout<ArgU16Layout, _> = ((x251.map(|c| c.med14)).map(|c| c.arg));
    let x254: BoundLayout<MemoryReadLayout, _> = (x227.map(|c| c.data_0));
    let x255: BoundLayout<MemoryIOLayout, _> = (x254.map(|c| c.io));
    let x256: BoundLayout<MemoryArgLayout, _> = (x255.map(|c| c.old_txn));
    let x257: BoundLayout<MemoryArgLayout, _> = (x255.map(|c| c.new_txn));
    let x258: BoundLayout<CycleArgLayout, _> =
        (((x254.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x259: BoundLayout<ArgU8Layout4LayoutArray, _> =
        ((x226.map(|c| c._arguments_mem1_output)).map(|c| c.arg_u8));
    let x260: BoundLayout<MemoryWriteLayout, _> = ((x226.map(|c| c._0)).map(|c| c._0));
    let x261: BoundLayout<MemoryIOLayout, _> = (x260.map(|c| c.io));
    let x262: BoundLayout<MemoryArgLayout, _> = (x261.map(|c| c.old_txn));
    let x263: BoundLayout<MemoryArgLayout, _> = (x261.map(|c| c.new_txn));
    let x264: BoundLayout<CycleArgLayout, _> =
        (((x260.map(|c| c._0)).map(|c| c._0)).map(|c| c.arg));
    let x265: BoundLayout<NormalizeU32Layout, _> = (x226.map(|c| c.pc_add));
    let x266: BoundLayout<ArgU16Layout, _> = ((x265.map(|c| c.low16)).map(|c| c.arg));
    let x267: BoundLayout<ArgU16Layout, _> = ((x265.map(|c| c.high16)).map(|c| c.arg));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x268: BoundLayout<Control0Layout, _> = (x5.map(|c| c.arm7));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x269: BoundLayout<CycleArgLayout, _> = (x268.map(|c| c.arg));
    let x270: BoundLayout<_Arguments_Control0_SuperLayout, _> =
        (x268.map(|c| c._arguments_control0__super));
    let x271: BoundLayout<MemoryArgLayout16LayoutArray, _> = (x270.map(|c| c.memory_arg));
    let x272: BoundLayout<CycleArgLayout8LayoutArray, _> = (x270.map(|c| c.cycle_arg));
    let x273: BoundLayout<ArgU16Layout16LayoutArray, _> = (x270.map(|c| c.arg_u16));
    let x274: BoundLayout<ArgU8Layout16LayoutArray, _> = (x270.map(|c| c.arg_u8));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x275: BoundLayout<ECall0Layout, _> = (x5.map(|c| c.arm8));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x276: BoundLayout<AddrDecomposeBitsLayout, _> = (x275.map(|c| c.pc_addr));
    let x277: BoundLayout<ArgU16Layout, _> =
        (((x276.map(|c| c.upper_diff)).map(|c| c.ret)).map(|c| c.arg));
    let x278: BoundLayout<ArgU16Layout, _> = ((x276.map(|c| c.med14)).map(|c| c.arg));
    let x279: BoundLayout<_Arguments_ECall0OutputLayout, _> =
        (x275.map(|c| c._arguments_e_call0_output));
    let x280: BoundLayout<MemoryArgLayout8LayoutArray, _> = (x279.map(|c| c.memory_arg));
    let x281: BoundLayout<CycleArgLayout4LayoutArray, _> = (x279.map(|c| c.cycle_arg));
    let x282: BoundLayout<ArgU16Layout2LayoutArray, _> = (x279.map(|c| c.arg_u16));
    let x283: BoundLayout<NormalizeU32Layout, _> = (x275.map(|c| c.add_pc));
    let x284: BoundLayout<ArgU16Layout, _> = ((x283.map(|c| c.low16)).map(|c| c.arg));
    let x285: BoundLayout<ArgU16Layout, _> = ((x283.map(|c| c.high16)).map(|c| c.arg));
    let x286: BoundLayout<CycleArgLayout, _> = (x275.map(|c| c.arg));
    // zirgen/dsl/passes/GenerateAccum.cpp:602
    let x287: BoundLayout<Poseidon0Layout, _> = (x5.map(|c| c.arm9));
    // zirgen/dsl/passes/GenerateAccum.cpp:276
    let x288: BoundLayout<_Arguments_Poseidon0StateLayout, _> =
        (x287.map(|c| c._arguments_poseidon0_state));
    let x289: BoundLayout<MemoryArgLayout16LayoutArray, _> = (x288.map(|c| c.memory_arg));
    let x290: BoundLayout<CycleArgLayout8LayoutArray, _> = (x288.map(|c| c.cycle_arg));
    let x291: BoundLayout<ArgU16Layout16LayoutArray, _> = (x288.map(|c| c.arg_u16));
    let x292: BoundLayout<ArgU8Layout2LayoutArray, _> = (x288.map(|c| c.arg_u8));
    let x293: BoundLayout<CycleArgLayout, _> = (x287.map(|c| c.arg));
    let x294: BoundLayout<CycleArgLayout, _> = ((x5.map(|c| c.arm10)).map(|c| c.arg));
    let x295: ComponentStruct;
    if is_true(((x6.map(|c| c[to_usize(0)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x296: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x19.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x297: ExtVal = (x296 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x298: ExtVal = (((x19.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x297)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x299: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x298);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x300: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x20.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x301: ExtVal = (x300 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x302: ExtVal = (((x20.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x301)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x303: ExtVal = (x297 * x301);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x304: ExtVal = (((x19.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x301);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x305: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x22.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x306: ExtVal = (x305 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x307: ExtVal = (((x22.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x306)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x308: ExtVal = ((x299 + x302) + x307);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x308);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x309: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x310: ExtVal = (((x309 * (x303 * x306)) - (x304 * x306))
            - ((x297 * ((x20.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x306));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x310 - (x303 * ((x22.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x311: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x23.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x312: ExtVal = (x311 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x313: ExtVal = (((x23.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x312)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x314: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x26.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x315: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x26.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x316: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x26.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x317: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x26.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x318: ExtVal = (((x314 + x315) + x316) + x317);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x319: ExtVal = (x318 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x320: ExtVal = (((x26.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x319)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x321: ExtVal = (x312 * x319);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x322: ExtVal = (((x23.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x319);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x323: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x27.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x324: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x27.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x325: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x27.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x326: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x27.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x327: ExtVal = (((x323 + x324) + x325) + x326);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x328: ExtVal = (x327 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x329: ExtVal = (((x27.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x328)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x330: ExtVal = (((x308 + x313) + x320) + x329);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x330);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x331: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x332: ExtVal = (((x331 * (x321 * x328)) - (x322 * x328))
            - ((x312 * ((x26.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x328));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x332 - (x321 * ((x27.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x333: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x28.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x334: ExtVal = (x333 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x335: ExtVal = (((x28.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x334)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x336: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x31.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x337: ExtVal = (x336 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x338: ExtVal = (((x31.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x337)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x339: ExtVal = (x334 * x337);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x340: ExtVal = (((x28.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x337);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x341: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x33.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x342: ExtVal = (x341 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x343: ExtVal = (((x33.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x342)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x344: ExtVal = (((x330 + x335) + x338) + x343);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x344);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x345: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x346: ExtVal = (((x345 * (x339 * x342)) - (x340 * x342))
            - ((x334 * ((x31.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x342));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x346 - (x339 * ((x33.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x347: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x34.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x348: ExtVal = (x347 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x349: ExtVal = (((x34.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x348)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x350: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x37.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x351: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x37.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x352: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x37.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x353: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x37.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x354: ExtVal = (((x350 + x351) + x352) + x353);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x355: ExtVal = (x354 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x356: ExtVal = (((x37.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x355)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x357: ExtVal = (x348 * x355);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x358: ExtVal = (((x34.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x355);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x359: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x38.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x360: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x38.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x361: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x38.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x362: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x38.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x363: ExtVal = (((x359 + x360) + x361) + x362);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x364: ExtVal = (x363 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x365: ExtVal = (((x38.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x364)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x366: ExtVal = (((x344 + x349) + x356) + x365);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x366);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x367: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x368: ExtVal = (((x367 * (x357 * x364)) - (x358 * x364))
            - ((x348 * ((x37.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x364));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x368 - (x357 * ((x38.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x369: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x39.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x370: ExtVal = (x369 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x371: ExtVal = (((x39.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x370)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x372: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x42.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x373: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x42.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x374: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x42.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x375: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x42.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x376: ExtVal = (((x372 + x373) + x374) + x375);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x377: ExtVal = (x376 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x378: ExtVal = (((x42.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x377)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x379: ExtVal = (x370 * x377);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x380: ExtVal = (((x39.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x377);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x381: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x43.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x382: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x43.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x383: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x43.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x384: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x43.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x385: ExtVal = (((x381 + x382) + x383) + x384);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x386: ExtVal = (x385 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x387: ExtVal = (((x43.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x386)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x388: ExtVal = (((x366 + x371) + x378) + x387);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x388);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x389: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x390: ExtVal = (((x389 * (x379 * x386)) - (x380 * x386))
            - ((x370 * ((x42.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x386));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x390 - (x379 * ((x43.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x391: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x44.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x392: ExtVal = (x391 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x393: ExtVal = (((x44.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x392)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x394: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x47.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x395: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x47.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x396: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x47.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x397: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x47.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x398: ExtVal = (((x394 + x395) + x396) + x397);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x399: ExtVal = (x398 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x400: ExtVal = (((x47.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x399)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x401: ExtVal = (x392 * x399);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x402: ExtVal = (((x44.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x399);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x403: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x48.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x404: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x48.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x405: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x48.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x406: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x48.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x407: ExtVal = (((x403 + x404) + x405) + x406);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x408: ExtVal = (x407 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x409: ExtVal = (((x48.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x408)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x410: ExtVal = (((x388 + x393) + x400) + x409);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x410);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x411: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x412: ExtVal = (((x411 * (x401 * x408)) - (x402 * x408))
            - ((x392 * ((x47.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x408));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x412 - (x401 * ((x48.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x413: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x49.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x414: ExtVal = (x413 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x415: ExtVal = (((x49.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x414)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x416: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x417: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x418: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x417.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x419: ExtVal = ((x410 + x415) + (x416.load(ctx, 0) * inv_0(x418)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x420: ExtVal = (x414 * x418);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x421: ExtVal = (((x49.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x418);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x422: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x423: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x424: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x423.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x425: ExtVal = (x419 + (x422.load(ctx, 0) * inv_0(x424)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x425);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x426: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x427: ExtVal =
            (((x426 * (x420 * x424)) - (x421 * x424)) - ((x414 * x416.load(ctx, 0)) * x424));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x427 - (x420 * x422.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x428: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x429: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x430: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x429.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x431: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x432: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x433: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x432.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x434: ExtVal =
            ((x425 + (x428.load(ctx, 0) * inv_0(x430)?)) + (x431.load(ctx, 0) * inv_0(x433)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x435: ExtVal = (x430 * x433);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x436: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x437: BoundLayout<Reg, _> =
            (((x50.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x438: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x437.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x439: ExtVal = (x434 + (x436.load(ctx, 0) * inv_0(x438)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x440: ExtVal = ((x428.load(ctx, 0) * x433) * x438);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x439);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x441: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x442: ExtVal = (((x441 * (x435 * x438)) - x440) - ((x430 * x431.load(ctx, 0)) * x438));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x442 - (x435 * x436.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x439);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x443: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x443, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(1)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x444: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x55.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x445: ExtVal = (x444 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x446: ExtVal = (((x55.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x445)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x447: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x446);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x448: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x56.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x449: ExtVal = (x448 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x450: ExtVal = (((x56.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x449)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x451: ExtVal = (x445 * x449);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x452: ExtVal = (((x55.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x449);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x453: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x58.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x454: ExtVal = (x453 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x455: ExtVal = (((x58.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x454)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x456: ExtVal = ((x447 + x450) + x455);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x456);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x457: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x458: ExtVal = (((x457 * (x451 * x454)) - (x452 * x454))
            - ((x445 * ((x56.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x454));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x458 - (x451 * ((x58.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x459: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x59.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x460: ExtVal = (x459 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x461: ExtVal = (((x59.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x460)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x462: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x62.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x463: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x62.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x464: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x62.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x465: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x62.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x466: ExtVal = (((x462 + x463) + x464) + x465);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x467: ExtVal = (x466 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x468: ExtVal = (((x62.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x467)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x469: ExtVal = (x460 * x467);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x470: ExtVal = (((x59.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x467);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x471: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x63.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x472: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x63.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x473: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x63.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x474: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x63.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x475: ExtVal = (((x471 + x472) + x473) + x474);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x476: ExtVal = (x475 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x477: ExtVal = (((x63.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x476)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x478: ExtVal = (((x456 + x461) + x468) + x477);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x478);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x479: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x480: ExtVal = (((x479 * (x469 * x476)) - (x470 * x476))
            - ((x460 * ((x62.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x476));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x480 - (x469 * ((x63.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x481: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x64.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x482: ExtVal = (x481 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x483: ExtVal = (((x64.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x482)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x484: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x67.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x485: ExtVal = (x484 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x486: ExtVal = (((x67.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x485)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x487: ExtVal = (x482 * x485);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x488: ExtVal = (((x64.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x485);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x489: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x69.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x490: ExtVal = (x489 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x491: ExtVal = (((x69.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x490)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x492: ExtVal = (((x478 + x483) + x486) + x491);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x492);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x493: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x494: ExtVal = (((x493 * (x487 * x490)) - (x488 * x490))
            - ((x482 * ((x67.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x490));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x494 - (x487 * ((x69.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x495: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x70.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x496: ExtVal = (x495 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x497: ExtVal = (((x70.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x496)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x498: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x73.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x499: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x73.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x500: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x73.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x501: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x73.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x502: ExtVal = (((x498 + x499) + x500) + x501);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x503: ExtVal = (x502 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x504: ExtVal = (((x73.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x503)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x505: ExtVal = (x496 * x503);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x506: ExtVal = (((x70.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x503);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x507: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x74.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x508: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x74.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x509: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x74.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x510: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x74.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x511: ExtVal = (((x507 + x508) + x509) + x510);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x512: ExtVal = (x511 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x513: ExtVal = (((x74.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x512)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x514: ExtVal = (((x492 + x497) + x504) + x513);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x514);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x515: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x516: ExtVal = (((x515 * (x505 * x512)) - (x506 * x512))
            - ((x496 * ((x73.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x512));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x516 - (x505 * ((x74.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x517: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x75.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x518: ExtVal = (x517 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x519: ExtVal = (((x75.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x518)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x520: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x78.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x521: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x78.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x522: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x78.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x523: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x78.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x524: ExtVal = (((x520 + x521) + x522) + x523);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x525: ExtVal = (x524 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x526: ExtVal = (((x78.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x525)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x527: ExtVal = (x518 * x525);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x528: ExtVal = (((x75.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x525);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x529: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x79.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x530: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x79.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x531: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x79.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x532: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x79.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x533: ExtVal = (((x529 + x530) + x531) + x532);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x534: ExtVal = (x533 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x535: ExtVal = (((x79.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x534)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x536: ExtVal = (((x514 + x519) + x526) + x535);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x536);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x537: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x538: ExtVal = (((x537 * (x527 * x534)) - (x528 * x534))
            - ((x518 * ((x78.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x534));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x538 - (x527 * ((x79.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x539: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x80.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x540: ExtVal = (x539 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x541: ExtVal = (((x80.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x540)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x542: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x83.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x543: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x83.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x544: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x83.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x545: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x83.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x546: ExtVal = (((x542 + x543) + x544) + x545);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x547: ExtVal = (x546 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x548: ExtVal = (((x83.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x547)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x549: ExtVal = (x540 * x547);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x550: ExtVal = (((x80.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x547);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x551: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x84.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x552: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x84.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x553: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x84.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x554: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x84.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x555: ExtVal = (((x551 + x552) + x553) + x554);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x556: ExtVal = (x555 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x557: ExtVal = (((x84.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x556)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x558: ExtVal = (((x536 + x541) + x548) + x557);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x558);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x559: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x560: ExtVal = (((x559 * (x549 * x556)) - (x550 * x556))
            - ((x540 * ((x83.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x556));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x560 - (x549 * ((x84.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x561: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x85.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x562: ExtVal = (x561 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x563: ExtVal = (((x85.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x562)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x564: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x565: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x566: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x565.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x567: ExtVal = ((x558 + x563) + (x564.load(ctx, 0) * inv_0(x566)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x568: ExtVal = (x562 * x566);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x569: ExtVal = (((x85.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x566);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x570: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x571: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x572: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x571.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x573: ExtVal = (x567 + (x570.load(ctx, 0) * inv_0(x572)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x573);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x574: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x575: ExtVal =
            (((x574 * (x568 * x572)) - (x569 * x572)) - ((x562 * x564.load(ctx, 0)) * x572));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x575 - (x568 * x570.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x576: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x577: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x578: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x577.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x579: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x580: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x581: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x580.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x582: ExtVal =
            ((x573 + (x576.load(ctx, 0) * inv_0(x578)?)) + (x579.load(ctx, 0) * inv_0(x581)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x583: ExtVal = (x578 * x581);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x584: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x585: BoundLayout<Reg, _> =
            (((x86.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x586: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x585.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x587: ExtVal = (x582 + (x584.load(ctx, 0) * inv_0(x586)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x588: ExtVal = ((x576.load(ctx, 0) * x581) * x586);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x587);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x589: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x590: ExtVal = (((x589 * (x583 * x586)) - x588) - ((x578 * x579.load(ctx, 0)) * x586));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x590 - (x583 * x584.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x587);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x591: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x591, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(2)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x592: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x90.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x593: ExtVal = (x592 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x594: ExtVal = (((x90.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x593)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x595: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x594);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x596: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x91.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x597: ExtVal = (x596 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x598: ExtVal = (((x91.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x597)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x599: ExtVal = (x593 * x597);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x600: ExtVal = (((x90.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x597);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x601: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x93.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x602: ExtVal = (x601 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x603: ExtVal = (((x93.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x602)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x604: ExtVal = ((x595 + x598) + x603);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x604);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x605: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x606: ExtVal = (((x605 * (x599 * x602)) - (x600 * x602))
            - ((x593 * ((x91.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x602));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x606 - (x599 * ((x93.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x607: ExtVal =
            (x9.load_ext::<ExtVal>(ctx, 0) * ((x94.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x608: ExtVal = (x607 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x609: ExtVal = (((x94.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x608)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x610: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x97.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x611: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x97.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x612: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x97.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x613: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x97.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x614: ExtVal = (((x610 + x611) + x612) + x613);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x615: ExtVal = (x614 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x616: ExtVal = (((x97.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x615)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x617: ExtVal = (x608 * x615);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x618: ExtVal = (((x94.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x615);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x619: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x98.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x620: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x98.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x621: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x98.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x622: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x98.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x623: ExtVal = (((x619 + x620) + x621) + x622);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x624: ExtVal = (x623 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x625: ExtVal = (((x98.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x624)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x626: ExtVal = (((x604 + x609) + x616) + x625);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x626);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x627: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x628: ExtVal = (((x627 * (x617 * x624)) - (x618 * x624))
            - ((x608 * ((x97.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x624));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x628 - (x617 * ((x98.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x629: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x99.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x630: ExtVal = (x629 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x631: ExtVal = (((x99.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x630)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x632: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x102.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x633: ExtVal = (x632 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x634: ExtVal =
            (((x102.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x633)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x635: ExtVal = (x630 * x633);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x636: ExtVal = (((x99.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x633);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x637: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x104.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x638: ExtVal = (x637 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x639: ExtVal =
            (((x104.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x638)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x640: ExtVal = (((x626 + x631) + x634) + x639);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x640);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x641: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x642: ExtVal = (((x641 * (x635 * x638)) - (x636 * x638))
            - ((x630 * ((x102.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x638));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x642 - (x635 * ((x104.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x643: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x105.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x644: ExtVal = (x643 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x645: ExtVal =
            (((x105.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x644)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x646: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x108.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x647: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x108.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x648: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x108.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x649: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x108.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x650: ExtVal = (((x646 + x647) + x648) + x649);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x651: ExtVal = (x650 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x652: ExtVal =
            (((x108.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x651)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x653: ExtVal = (x644 * x651);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x654: ExtVal = (((x105.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x651);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x655: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x109.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x656: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x109.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x657: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x109.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x658: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x109.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x659: ExtVal = (((x655 + x656) + x657) + x658);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x660: ExtVal = (x659 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x661: ExtVal =
            (((x109.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x660)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x662: ExtVal = (((x640 + x645) + x652) + x661);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x662);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x663: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x664: ExtVal = (((x663 * (x653 * x660)) - (x654 * x660))
            - ((x644 * ((x108.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x660));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x664 - (x653 * ((x109.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x665: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x110.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x666: ExtVal = (x665 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x667: ExtVal =
            (((x110.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x666)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x668: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x113.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x669: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x113.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x670: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x113.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x671: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x113.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x672: ExtVal = (((x668 + x669) + x670) + x671);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x673: ExtVal = (x672 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x674: ExtVal =
            (((x113.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x673)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x675: ExtVal = (x666 * x673);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x676: ExtVal = (((x110.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x673);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x677: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x114.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x678: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x114.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x679: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x114.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x680: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x114.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x681: ExtVal = (((x677 + x678) + x679) + x680);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x682: ExtVal = (x681 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x683: ExtVal =
            (((x114.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x682)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x684: ExtVal = (((x662 + x667) + x674) + x683);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x684);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x685: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x686: ExtVal = (((x685 * (x675 * x682)) - (x676 * x682))
            - ((x666 * ((x113.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x682));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x686 - (x675 * ((x114.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x687: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x115.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x688: ExtVal = (x687 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x689: ExtVal =
            (((x115.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x688)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x690: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x118.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x691: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x118.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x692: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x118.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x693: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x118.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x694: ExtVal = (((x690 + x691) + x692) + x693);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x695: ExtVal = (x694 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x696: ExtVal =
            (((x118.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x695)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x697: ExtVal = (x688 * x695);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x698: ExtVal = (((x115.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x695);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x699: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x119.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x700: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x119.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x701: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x119.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x702: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x119.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x703: ExtVal = (((x699 + x700) + x701) + x702);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x704: ExtVal = (x703 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x705: ExtVal =
            (((x119.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x704)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x706: ExtVal = (((x684 + x689) + x696) + x705);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x706);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x707: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x708: ExtVal = (((x707 * (x697 * x704)) - (x698 * x704))
            - ((x688 * ((x118.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x704));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x708 - (x697 * ((x119.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x709: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x120.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x710: ExtVal = (x709 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x711: ExtVal =
            (((x120.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x710)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x712: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x713: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x714: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x713.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x715: ExtVal = ((x706 + x711) + (x712.load(ctx, 0) * inv_0(x714)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x716: ExtVal = (x710 * x714);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x717: ExtVal = (((x120.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x714);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x718: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x719: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x720: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x719.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x721: ExtVal = (x715 + (x718.load(ctx, 0) * inv_0(x720)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x721);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x722: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x723: ExtVal =
            (((x722 * (x716 * x720)) - (x717 * x720)) - ((x710 * x712.load(ctx, 0)) * x720));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x723 - (x716 * x718.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x724: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x725: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x726: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x725.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x727: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x728: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x729: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x728.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x730: ExtVal =
            ((x721 + (x724.load(ctx, 0) * inv_0(x726)?)) + (x727.load(ctx, 0) * inv_0(x729)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x731: ExtVal = (x726 * x729);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x732: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x733: BoundLayout<Reg, _> =
            (((x121.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x734: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x733.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x735: ExtVal = (x730 + (x732.load(ctx, 0) * inv_0(x734)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x736: ExtVal = ((x724.load(ctx, 0) * x729) * x734);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x735);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x737: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x738: ExtVal = (((x737 * (x731 * x734)) - x736) - ((x726 * x727.load(ctx, 0)) * x734));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x738 - (x731 * x732.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x735);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x739: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x739, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(3)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x740: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x126.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x741: ExtVal = (x740 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x742: ExtVal =
            (((x126.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x741)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x743: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x742);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x744: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x128.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x745: ExtVal = (x744 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x746: ExtVal =
            (((x128.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x745)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x747: ExtVal = (x741 * x745);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x748: ExtVal = (((x126.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x745);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x749: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x129.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x750: ExtVal = (x749 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x751: ExtVal =
            (((x129.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x750)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x752: ExtVal = ((x743 + x746) + x751);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x752);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x753: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x754: ExtVal = (((x753 * (x747 * x750)) - (x748 * x750))
            - ((x741 * ((x128.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x750));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x754 - (x747 * ((x129.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x755: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x132.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x756: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x132.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x757: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x132.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x758: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x132.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x759: ExtVal = (((x755 + x756) + x757) + x758);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x760: ExtVal = (x759 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x761: ExtVal =
            (((x132.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x760)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x762: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x133.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x763: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x133.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x764: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x133.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x765: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x133.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x766: ExtVal = (((x762 + x763) + x764) + x765);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x767: ExtVal = (x766 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x768: ExtVal =
            (((x133.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x767)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x769: ExtVal = (x760 * x767);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x770: ExtVal = (((x132.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x767);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x771: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x134.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x772: ExtVal = (x771 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x773: ExtVal =
            (((x134.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x772)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x774: ExtVal = (((x752 + x761) + x768) + x773);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x774);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x775: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x776: ExtVal = (((x775 * (x769 * x772)) - (x770 * x772))
            - ((x760 * ((x133.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x772));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x776 - (x769 * ((x134.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x777: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x137.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x778: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x137.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x779: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x137.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x780: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x137.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x781: ExtVal = (((x777 + x778) + x779) + x780);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x782: ExtVal = (x781 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x783: ExtVal =
            (((x137.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x782)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x784: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x138.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x785: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x138.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x786: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x138.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x787: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x138.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x788: ExtVal = (((x784 + x785) + x786) + x787);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x789: ExtVal = (x788 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x790: ExtVal =
            (((x138.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x789)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x791: ExtVal = (x782 * x789);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x792: ExtVal = (((x137.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x789);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x793: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x139.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x794: ExtVal = (x793 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x795: ExtVal =
            (((x139.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x794)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x796: ExtVal = (((x774 + x783) + x790) + x795);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x796);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x797: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x798: ExtVal = (((x797 * (x791 * x794)) - (x792 * x794))
            - ((x782 * ((x138.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x794));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x798 - (x791 * ((x139.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x799: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x142.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x800: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x142.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x801: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x142.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x802: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x142.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x803: ExtVal = (((x799 + x800) + x801) + x802);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x804: ExtVal = (x803 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x805: ExtVal =
            (((x142.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x804)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x806: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x143.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x807: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x143.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x808: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x143.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x809: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x143.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x810: ExtVal = (((x806 + x807) + x808) + x809);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x811: ExtVal = (x810 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x812: ExtVal =
            (((x143.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x811)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x813: ExtVal = (x804 * x811);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x814: ExtVal = (((x142.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x811);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x815: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x144.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x816: ExtVal = (x815 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x817: ExtVal =
            (((x144.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x816)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x818: ExtVal = (((x796 + x805) + x812) + x817);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x818);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x819: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x820: ExtVal = (((x819 * (x813 * x816)) - (x814 * x816))
            - ((x804 * ((x143.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x816));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x820 - (x813 * ((x144.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x821: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x822: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x823: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x822.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x824: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x825: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x826: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x825.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x827: ExtVal =
            ((x818 + (x821.load(ctx, 0) * inv_0(x823)?)) + (x824.load(ctx, 0) * inv_0(x826)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x828: ExtVal = (x823 * x826);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x829: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x830: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x831: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x830.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x832: ExtVal = (x827 + (x829.load(ctx, 0) * inv_0(x831)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x833: ExtVal = ((x821.load(ctx, 0) * x826) * x831);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x832);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x834: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x835: ExtVal = (((x834 * (x828 * x831)) - x833) - ((x823 * x824.load(ctx, 0)) * x831));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x835 - (x828 * x829.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x836: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x837: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x838: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x837.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x839: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x840: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x841: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x840.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x842: ExtVal =
            ((x832 + (x836.load(ctx, 0) * inv_0(x838)?)) + (x839.load(ctx, 0) * inv_0(x841)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x843: ExtVal = (x838 * x841);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x844: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x845: BoundLayout<Reg, _> =
            (((x146.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x846: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x845.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x847: ExtVal = (x842 + (x844.load(ctx, 0) * inv_0(x846)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x848: ExtVal = ((x836.load(ctx, 0) * x841) * x846);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x847);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x849: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x850: ExtVal = (((x849 * (x843 * x846)) - x848) - ((x838 * x839.load(ctx, 0)) * x846));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x850 - (x843 * x844.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x851: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x852: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x853: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x852.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x854: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x855: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x856: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x855.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x857: ExtVal =
            ((x847 + (x851.load(ctx, 0) * inv_0(x853)?)) + (x854.load(ctx, 0) * inv_0(x856)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x858: ExtVal = (x853 * x856);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x859: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x860: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x861: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x860.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x862: ExtVal = (x857 + (x859.load(ctx, 0) * inv_0(x861)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x863: ExtVal = ((x851.load(ctx, 0) * x856) * x861);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x862);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x864: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x865: ExtVal = (((x864 * (x858 * x861)) - x863) - ((x853 * x854.load(ctx, 0)) * x861));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x865 - (x858 * x859.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x866: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x867: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x868: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x867.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x869: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x870: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x871: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x870.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x872: ExtVal =
            ((x862 + (x866.load(ctx, 0) * inv_0(x868)?)) + (x869.load(ctx, 0) * inv_0(x871)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x873: ExtVal = (x868 * x871);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x874: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x875: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x876: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x875.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x877: ExtVal = (x872 + (x874.load(ctx, 0) * inv_0(x876)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x878: ExtVal = ((x866.load(ctx, 0) * x871) * x876);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x877);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x879: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x880: ExtVal = (((x879 * (x873 * x876)) - x878) - ((x868 * x869.load(ctx, 0)) * x876));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x880 - (x873 * x874.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x881: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x882: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x883: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x882.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x884: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x885: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x886: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x885.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x887: ExtVal =
            ((x877 + (x881.load(ctx, 0) * inv_0(x883)?)) + (x884.load(ctx, 0) * inv_0(x886)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x888: ExtVal = (x883 * x886);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x889: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x890: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x891: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x890.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x892: ExtVal = (x887 + (x889.load(ctx, 0) * inv_0(x891)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x893: ExtVal = ((x881.load(ctx, 0) * x886) * x891);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(8)])).store_ext(ctx, x892);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x894: ExtVal = ((x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x895: ExtVal = (((x894 * (x888 * x891)) - x893) - ((x883 * x884.load(ctx, 0)) * x891));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x895 - (x888 * x889.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x896: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x897: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(9)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x898: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x897.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x899: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x900: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(10)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x901: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x900.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x902: ExtVal =
            ((x892 + (x896.load(ctx, 0) * inv_0(x898)?)) + (x899.load(ctx, 0) * inv_0(x901)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x903: ExtVal = (x898 * x901);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x904: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x905: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(11)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x906: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x905.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x907: ExtVal = (x902 + (x904.load(ctx, 0) * inv_0(x906)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x908: ExtVal = ((x896.load(ctx, 0) * x901) * x906);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(9)])).store_ext(ctx, x907);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x909: ExtVal = ((x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x910: ExtVal = (((x909 * (x903 * x906)) - x908) - ((x898 * x899.load(ctx, 0)) * x906));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x910 - (x903 * x904.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x911: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x912: BoundLayout<Reg, _> =
            (((x147.map(|c| c[to_usize(12)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x913: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x912.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x914: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x150.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x915: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x150.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x916: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x150.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x917: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x150.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x918: ExtVal = (((x914 + x915) + x916) + x917);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x919: ExtVal = (x918 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x920: ExtVal =
            (((x150.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x919)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x921: ExtVal = (x913 * x919);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x922: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x151.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x923: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x151.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x924: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x151.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x925: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x151.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x926: ExtVal = (((x922 + x923) + x924) + x925);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x927: ExtVal = (x926 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x928: ExtVal =
            (((x151.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x927)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x929: ExtVal = (((x907 + (x911.load(ctx, 0) * inv_0(x913)?)) + x920) + x928);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x930: ExtVal = ((x911.load(ctx, 0) * x919) * x927);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(10)])).store_ext(ctx, x929);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x931: ExtVal = ((x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x932: ExtVal = (((x931 * (x921 * x927)) - x930)
            - ((x913 * ((x150.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x927));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x932 - (x921 * ((x151.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x933: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x152.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x934: ExtVal = (x933 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x935: ExtVal =
            (((x152.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x934)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x936: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x154.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x937: ExtVal = (x936 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x938: ExtVal =
            (((x154.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x937)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x939: ExtVal = (x934 * x937);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x940: ExtVal = (((x152.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x937);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x941: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x155.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x942: ExtVal = (x941 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x943: ExtVal =
            (((x155.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x942)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x944: ExtVal = (((x929 + x935) + x938) + x943);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(11)])).store_ext(ctx, x944);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x945: ExtVal = ((x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x946: ExtVal = (((x945 * (x939 * x942)) - (x940 * x942))
            - ((x934 * ((x154.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x942));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x946 - (x939 * ((x155.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x944);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x947: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x947, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(4)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x948: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x159.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x949: ExtVal = (x948 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x950: ExtVal =
            (((x159.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x949)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x951: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x950);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x952: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x161.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x953: ExtVal = (x952 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x954: ExtVal =
            (((x161.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x953)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x955: ExtVal = (x949 * x953);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x956: ExtVal = (((x159.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x953);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x957: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x162.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x958: ExtVal = (x957 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x959: ExtVal =
            (((x162.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x958)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x960: ExtVal = ((x951 + x954) + x959);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x960);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x961: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x962: ExtVal = (((x961 * (x955 * x958)) - (x956 * x958))
            - ((x949 * ((x161.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x958));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x962 - (x955 * ((x162.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x963: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x165.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x964: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x165.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x965: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x165.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x966: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x165.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x967: ExtVal = (((x963 + x964) + x965) + x966);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x968: ExtVal = (x967 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x969: ExtVal =
            (((x165.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x968)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x970: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x166.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x971: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x166.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x972: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x166.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x973: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x166.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x974: ExtVal = (((x970 + x971) + x972) + x973);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x975: ExtVal = (x974 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x976: ExtVal =
            (((x166.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x975)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x977: ExtVal = (x968 * x975);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x978: ExtVal = (((x165.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x975);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x979: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x167.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x980: ExtVal = (x979 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x981: ExtVal =
            (((x167.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x980)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x982: ExtVal = (((x960 + x969) + x976) + x981);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x982);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x983: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x984: ExtVal = (((x983 * (x977 * x980)) - (x978 * x980))
            - ((x968 * ((x166.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x980));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x984 - (x977 * ((x167.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x985: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x170.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x986: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x170.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x987: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x170.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x988: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x170.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x989: ExtVal = (((x985 + x986) + x987) + x988);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x990: ExtVal = (x989 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x991: ExtVal =
            (((x170.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x990)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x992: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x171.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x993: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x171.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x994: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x171.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x995: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x171.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x996: ExtVal = (((x992 + x993) + x994) + x995);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x997: ExtVal = (x996 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x998: ExtVal =
            (((x171.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x997)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x999: ExtVal = (x990 * x997);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1000: ExtVal = (((x170.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x997);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1001: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x172.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1002: ExtVal = (x1001 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1003: ExtVal =
            (((x172.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1002)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1004: ExtVal = (((x982 + x991) + x998) + x1003);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x1004);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1005: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1006: ExtVal = (((x1005 * (x999 * x1002)) - (x1000 * x1002))
            - ((x990 * ((x171.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1002));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1006 - (x999 * ((x172.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1007: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x175.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1008: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x175.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1009: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x175.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1010: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x175.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1011: ExtVal = (((x1007 + x1008) + x1009) + x1010);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1012: ExtVal = (x1011 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1013: ExtVal =
            (((x175.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1012)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1014: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x176.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1015: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x176.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1016: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x176.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1017: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x176.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1018: ExtVal = (((x1014 + x1015) + x1016) + x1017);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1019: ExtVal = (x1018 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1020: ExtVal =
            (((x176.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1019)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1021: ExtVal = (x1012 * x1019);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1022: ExtVal = (((x175.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1019);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1023: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x177.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1024: ExtVal = (x1023 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1025: ExtVal =
            (((x177.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1024)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1026: ExtVal = (((x1004 + x1013) + x1020) + x1025);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x1026);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1027: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1028: ExtVal = (((x1027 * (x1021 * x1024)) - (x1022 * x1024))
            - ((x1012 * ((x176.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1024));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1028 - (x1021 * ((x177.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1029: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1030: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1031: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1030.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1032: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1033: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1034: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1033.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1035: ExtVal =
            ((x1026 + (x1029.load(ctx, 0) * inv_0(x1031)?)) + (x1032.load(ctx, 0) * inv_0(x1034)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1036: ExtVal = (x1031 * x1034);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1037: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1038: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1039: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1038.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1040: ExtVal = (x1035 + (x1037.load(ctx, 0) * inv_0(x1039)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1041: ExtVal = ((x1029.load(ctx, 0) * x1034) * x1039);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x1040);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1042: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1043: ExtVal =
            (((x1042 * (x1036 * x1039)) - x1041) - ((x1031 * x1032.load(ctx, 0)) * x1039));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1043 - (x1036 * x1037.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1044: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1045: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1046: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1045.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1047: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1048: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1049: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1048.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1050: ExtVal =
            ((x1040 + (x1044.load(ctx, 0) * inv_0(x1046)?)) + (x1047.load(ctx, 0) * inv_0(x1049)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1051: ExtVal = (x1046 * x1049);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1052: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1053: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1054: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1053.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1055: ExtVal = (x1050 + (x1052.load(ctx, 0) * inv_0(x1054)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1056: ExtVal = ((x1044.load(ctx, 0) * x1049) * x1054);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x1055);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1057: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1058: ExtVal =
            (((x1057 * (x1051 * x1054)) - x1056) - ((x1046 * x1047.load(ctx, 0)) * x1054));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1058 - (x1051 * x1052.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1059: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1060: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1061: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1060.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1062: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1063: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1064: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1063.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1065: ExtVal =
            ((x1055 + (x1059.load(ctx, 0) * inv_0(x1061)?)) + (x1062.load(ctx, 0) * inv_0(x1064)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1066: ExtVal = (x1061 * x1064);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1067: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1068: BoundLayout<Reg, _> =
            (((x179.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1069: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1068.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1070: ExtVal = (x1065 + (x1067.load(ctx, 0) * inv_0(x1069)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1071: ExtVal = ((x1059.load(ctx, 0) * x1064) * x1069);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x1070);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1072: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1073: ExtVal =
            (((x1072 * (x1066 * x1069)) - x1071) - ((x1061 * x1062.load(ctx, 0)) * x1069));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1073 - (x1066 * x1067.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1074: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1075: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1076: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1075.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1077: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1078: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1079: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1078.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1080: ExtVal =
            ((x1070 + (x1074.load(ctx, 0) * inv_0(x1076)?)) + (x1077.load(ctx, 0) * inv_0(x1079)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1081: ExtVal = (x1076 * x1079);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1082: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1083: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1084: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1083.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1085: ExtVal = (x1080 + (x1082.load(ctx, 0) * inv_0(x1084)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1086: ExtVal = ((x1074.load(ctx, 0) * x1079) * x1084);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x1085);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1087: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1088: ExtVal =
            (((x1087 * (x1081 * x1084)) - x1086) - ((x1076 * x1077.load(ctx, 0)) * x1084));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1088 - (x1081 * x1082.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1089: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1090: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1091: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1090.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1092: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1093: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1094: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1093.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1095: ExtVal =
            ((x1085 + (x1089.load(ctx, 0) * inv_0(x1091)?)) + (x1092.load(ctx, 0) * inv_0(x1094)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1096: ExtVal = (x1091 * x1094);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1097: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1098: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1099: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1098.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1100: ExtVal = (x1095 + (x1097.load(ctx, 0) * inv_0(x1099)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1101: ExtVal = ((x1089.load(ctx, 0) * x1094) * x1099);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(8)])).store_ext(ctx, x1100);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1102: ExtVal = ((x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1103: ExtVal =
            (((x1102 * (x1096 * x1099)) - x1101) - ((x1091 * x1092.load(ctx, 0)) * x1099));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1103 - (x1096 * x1097.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1104: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1105: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1106: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1105.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1107: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1108: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1109: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1108.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1110: ExtVal =
            ((x1100 + (x1104.load(ctx, 0) * inv_0(x1106)?)) + (x1107.load(ctx, 0) * inv_0(x1109)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1111: ExtVal = (x1106 * x1109);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1112: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1113: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1114: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1113.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1115: ExtVal = (x1110 + (x1112.load(ctx, 0) * inv_0(x1114)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1116: ExtVal = ((x1104.load(ctx, 0) * x1109) * x1114);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(9)])).store_ext(ctx, x1115);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1117: ExtVal = ((x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1118: ExtVal =
            (((x1117 * (x1111 * x1114)) - x1116) - ((x1106 * x1107.load(ctx, 0)) * x1114));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1118 - (x1111 * x1112.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1119: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1120: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(9)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1121: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1120.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1122: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1123: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(10)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1124: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1123.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1125: ExtVal =
            ((x1115 + (x1119.load(ctx, 0) * inv_0(x1121)?)) + (x1122.load(ctx, 0) * inv_0(x1124)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1126: ExtVal = (x1121 * x1124);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1127: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1128: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(11)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1129: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1128.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1130: ExtVal = (x1125 + (x1127.load(ctx, 0) * inv_0(x1129)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1131: ExtVal = ((x1119.load(ctx, 0) * x1124) * x1129);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(10)])).store_ext(ctx, x1130);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1132: ExtVal = ((x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1133: ExtVal =
            (((x1132 * (x1126 * x1129)) - x1131) - ((x1121 * x1122.load(ctx, 0)) * x1129));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1133 - (x1126 * x1127.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1134: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1135: BoundLayout<Reg, _> =
            (((x180.map(|c| c[to_usize(12)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1136: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1135.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1137: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x183.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1138: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x183.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1139: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x183.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1140: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x183.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1141: ExtVal = (((x1137 + x1138) + x1139) + x1140);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1142: ExtVal = (x1141 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1143: ExtVal =
            (((x183.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1142)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1144: ExtVal = (x1136 * x1142);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1145: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x184.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1146: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x184.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1147: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x184.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1148: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x184.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1149: ExtVal = (((x1145 + x1146) + x1147) + x1148);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1150: ExtVal = (x1149 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1151: ExtVal =
            (((x184.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1150)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1152: ExtVal = (((x1130 + (x1134.load(ctx, 0) * inv_0(x1136)?)) + x1143) + x1151);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1153: ExtVal = ((x1134.load(ctx, 0) * x1142) * x1150);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(11)])).store_ext(ctx, x1152);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1154: ExtVal = ((x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1155: ExtVal = (((x1154 * (x1144 * x1150)) - x1153)
            - ((x1136 * ((x183.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1150));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1155 - (x1144 * ((x184.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1156: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x185.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1157: ExtVal = (x1156 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1158: ExtVal =
            (((x185.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1157)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1159: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x187.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1160: ExtVal = (x1159 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1161: ExtVal =
            (((x187.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1160)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1162: ExtVal = (x1157 * x1160);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1163: ExtVal = (((x185.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1160);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1164: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x188.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1165: ExtVal = (x1164 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1166: ExtVal =
            (((x188.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1165)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1167: ExtVal = (((x1152 + x1158) + x1161) + x1166);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(12)])).store_ext(ctx, x1167);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1168: ExtVal = ((x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1169: ExtVal = (((x1168 * (x1162 * x1165)) - (x1163 * x1165))
            - ((x1157 * ((x187.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1165));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1169 - (x1162 * ((x188.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x1167);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x1170: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x1170, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(5)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1171: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x192.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1172: ExtVal = (x1171 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1173: ExtVal =
            (((x192.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1172)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1174: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x1173);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1175: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x194.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1176: ExtVal = (x1175 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1177: ExtVal =
            (((x194.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1176)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1178: ExtVal = (x1172 * x1176);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1179: ExtVal = (((x192.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1176);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1180: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x195.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1181: ExtVal = (x1180 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1182: ExtVal =
            (((x195.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1181)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1183: ExtVal = ((x1174 + x1177) + x1182);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x1183);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1184: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1185: ExtVal = (((x1184 * (x1178 * x1181)) - (x1179 * x1181))
            - ((x1172 * ((x194.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1181));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1185 - (x1178 * ((x195.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1186: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x198.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1187: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x198.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1188: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x198.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1189: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x198.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1190: ExtVal = (((x1186 + x1187) + x1188) + x1189);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1191: ExtVal = (x1190 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1192: ExtVal =
            (((x198.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1191)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1193: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x199.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1194: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x199.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1195: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x199.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1196: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x199.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1197: ExtVal = (((x1193 + x1194) + x1195) + x1196);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1198: ExtVal = (x1197 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1199: ExtVal =
            (((x199.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1198)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1200: ExtVal = (x1191 * x1198);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1201: ExtVal = (((x198.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1198);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1202: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x200.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1203: ExtVal = (x1202 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1204: ExtVal =
            (((x200.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1203)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1205: ExtVal = (((x1183 + x1192) + x1199) + x1204);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x1205);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1206: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1207: ExtVal = (((x1206 * (x1200 * x1203)) - (x1201 * x1203))
            - ((x1191 * ((x199.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1203));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1207 - (x1200 * ((x200.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1208: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x203.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1209: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x203.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1210: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x203.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1211: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x203.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1212: ExtVal = (((x1208 + x1209) + x1210) + x1211);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1213: ExtVal = (x1212 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1214: ExtVal =
            (((x203.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1213)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1215: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x204.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1216: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x204.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1217: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x204.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1218: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x204.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1219: ExtVal = (((x1215 + x1216) + x1217) + x1218);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1220: ExtVal = (x1219 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1221: ExtVal =
            (((x204.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1220)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1222: ExtVal = (x1213 * x1220);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1223: ExtVal = (((x203.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1220);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1224: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x205.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1225: ExtVal = (x1224 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1226: ExtVal =
            (((x205.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1225)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1227: ExtVal = (((x1205 + x1214) + x1221) + x1226);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x1227);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1228: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1229: ExtVal = (((x1228 * (x1222 * x1225)) - (x1223 * x1225))
            - ((x1213 * ((x204.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1225));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1229 - (x1222 * ((x205.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1230: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x207.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1231: ExtVal = (x1230 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1232: ExtVal =
            (((x207.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1231)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1233: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x208.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1234: ExtVal = (x1233 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1235: ExtVal =
            (((x208.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1234)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1236: ExtVal = (x1231 * x1234);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1237: ExtVal = (((x207.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1234);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1238: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x210.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1239: ExtVal = (x1238 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1240: ExtVal =
            (((x210.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1239)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1241: ExtVal = (((x1227 + x1232) + x1235) + x1240);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x1241);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1242: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1243: ExtVal = (((x1242 * (x1236 * x1239)) - (x1237 * x1239))
            - ((x1231 * ((x208.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1239));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1243 - (x1236 * ((x210.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1244: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x211.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1245: ExtVal = (x1244 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1246: ExtVal =
            (((x211.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1245)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1247: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x214.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1248: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x214.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1249: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x214.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1250: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x214.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1251: ExtVal = (((x1247 + x1248) + x1249) + x1250);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1252: ExtVal = (x1251 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1253: ExtVal =
            (((x214.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1252)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1254: ExtVal = (x1245 * x1252);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1255: ExtVal = (((x211.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1252);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1256: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x215.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1257: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x215.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1258: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x215.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1259: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x215.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1260: ExtVal = (((x1256 + x1257) + x1258) + x1259);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1261: ExtVal = (x1260 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1262: ExtVal =
            (((x215.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1261)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1263: ExtVal = (((x1241 + x1246) + x1253) + x1262);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x1263);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1264: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1265: ExtVal = (((x1264 * (x1254 * x1261)) - (x1255 * x1261))
            - ((x1245 * ((x214.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1261));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1265 - (x1254 * ((x215.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1266: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x216.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1267: ExtVal = (x1266 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1268: ExtVal =
            (((x216.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1267)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1269: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1270: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1271: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1270.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1272: ExtVal = ((x1263 + x1268) + (x1269.load(ctx, 0) * inv_0(x1271)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1273: ExtVal = (x1267 * x1271);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1274: ExtVal = (((x216.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1271);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1275: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1276: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1277: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1276.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1278: ExtVal = (x1272 + (x1275.load(ctx, 0) * inv_0(x1277)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x1278);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1279: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1280: ExtVal = (((x1279 * (x1273 * x1277)) - (x1274 * x1277))
            - ((x1267 * x1269.load(ctx, 0)) * x1277));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1280 - (x1273 * x1275.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1281: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1282: BoundLayout<Reg, _> =
            (((x217.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1283: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1282.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1284: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x220.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1285: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x220.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1286: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x220.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1287: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x220.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1288: ExtVal = (((x1284 + x1285) + x1286) + x1287);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1289: ExtVal = (x1288 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1290: ExtVal =
            (((x220.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1289)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1291: ExtVal = (x1283 * x1289);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1292: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x221.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1293: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x221.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1294: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x221.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1295: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x221.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1296: ExtVal = (((x1292 + x1293) + x1294) + x1295);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1297: ExtVal = (x1296 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1298: ExtVal =
            (((x221.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1297)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1299: ExtVal = (((x1278 + (x1281.load(ctx, 0) * inv_0(x1283)?)) + x1290) + x1298);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1300: ExtVal = ((x1281.load(ctx, 0) * x1289) * x1297);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x1299);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1301: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1302: ExtVal = (((x1301 * (x1291 * x1297)) - x1300)
            - ((x1283 * ((x220.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1297));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1302 - (x1291 * ((x221.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1303: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x222.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1304: ExtVal = (x1303 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1305: ExtVal =
            (((x222.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1304)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1306: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x224.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1307: ExtVal = (x1306 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1308: ExtVal =
            (((x224.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1307)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1309: ExtVal = (x1304 * x1307);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1310: ExtVal = (((x222.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1307);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1311: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x225.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1312: ExtVal = (x1311 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1313: ExtVal =
            (((x225.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1312)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1314: ExtVal = (((x1299 + x1305) + x1308) + x1313);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x1314);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1315: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1316: ExtVal = (((x1315 * (x1309 * x1312)) - (x1310 * x1312))
            - ((x1304 * ((x224.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1312));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1316 - (x1309 * ((x225.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(ctx, x1314);
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x1317: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x1317, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(6)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1318: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x229.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1319: ExtVal = (x1318 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1320: ExtVal =
            (((x229.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1319)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1321: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x1320);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1322: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x231.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1323: ExtVal = (x1322 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1324: ExtVal =
            (((x231.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1323)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1325: ExtVal = (x1319 * x1323);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1326: ExtVal = (((x229.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1323);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1327: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x232.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1328: ExtVal = (x1327 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1329: ExtVal =
            (((x232.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1328)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1330: ExtVal = ((x1321 + x1324) + x1329);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x1330);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1331: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1332: ExtVal = (((x1331 * (x1325 * x1328)) - (x1326 * x1328))
            - ((x1319 * ((x231.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1328));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1332 - (x1325 * ((x232.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1333: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x235.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1334: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x235.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1335: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x235.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1336: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x235.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1337: ExtVal = (((x1333 + x1334) + x1335) + x1336);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1338: ExtVal = (x1337 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1339: ExtVal =
            (((x235.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1338)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1340: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x236.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1341: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x236.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1342: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x236.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1343: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x236.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1344: ExtVal = (((x1340 + x1341) + x1342) + x1343);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1345: ExtVal = (x1344 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1346: ExtVal =
            (((x236.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1345)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1347: ExtVal = (x1338 * x1345);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1348: ExtVal = (((x235.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1345);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1349: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x237.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1350: ExtVal = (x1349 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1351: ExtVal =
            (((x237.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1350)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1352: ExtVal = (((x1330 + x1339) + x1346) + x1351);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x1352);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1353: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1354: ExtVal = (((x1353 * (x1347 * x1350)) - (x1348 * x1350))
            - ((x1338 * ((x236.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1350));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1354 - (x1347 * ((x237.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1355: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x240.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1356: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x240.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1357: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x240.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1358: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x240.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1359: ExtVal = (((x1355 + x1356) + x1357) + x1358);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1360: ExtVal = (x1359 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1361: ExtVal =
            (((x240.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1360)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1362: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x241.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1363: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x241.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1364: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x241.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1365: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x241.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1366: ExtVal = (((x1362 + x1363) + x1364) + x1365);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1367: ExtVal = (x1366 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1368: ExtVal =
            (((x241.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1367)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1369: ExtVal = (x1360 * x1367);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1370: ExtVal = (((x240.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1367);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1371: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x242.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1372: ExtVal = (x1371 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1373: ExtVal =
            (((x242.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1372)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1374: ExtVal = (((x1352 + x1361) + x1368) + x1373);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x1374);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1375: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1376: ExtVal = (((x1375 * (x1369 * x1372)) - (x1370 * x1372))
            - ((x1360 * ((x241.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1372));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1376 - (x1369 * ((x242.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1377: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x245.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1378: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x245.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1379: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x245.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1380: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x245.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1381: ExtVal = (((x1377 + x1378) + x1379) + x1380);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1382: ExtVal = (x1381 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1383: ExtVal =
            (((x245.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1382)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1384: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x246.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1385: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x246.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1386: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x246.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1387: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x246.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1388: ExtVal = (((x1384 + x1385) + x1386) + x1387);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1389: ExtVal = (x1388 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1390: ExtVal =
            (((x246.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1389)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1391: ExtVal = (x1382 * x1389);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1392: ExtVal = (((x245.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1389);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1393: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x247.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1394: ExtVal = (x1393 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1395: ExtVal =
            (((x247.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1394)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1396: ExtVal = (((x1374 + x1383) + x1390) + x1395);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x1396);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1397: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1398: ExtVal = (((x1397 * (x1391 * x1394)) - (x1392 * x1394))
            - ((x1382 * ((x246.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1394));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1398 - (x1391 * ((x247.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1399: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x249.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1400: ExtVal = (x1399 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1401: ExtVal =
            (((x249.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1400)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1402: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x250.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1403: ExtVal = (x1402 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1404: ExtVal =
            (((x250.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1403)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1405: ExtVal = (x1400 * x1403);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1406: ExtVal = (((x249.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1403);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1407: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x252.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1408: ExtVal = (x1407 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1409: ExtVal =
            (((x252.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1408)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1410: ExtVal = (((x1396 + x1401) + x1404) + x1409);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x1410);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1411: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1412: ExtVal = (((x1411 * (x1405 * x1408)) - (x1406 * x1408))
            - ((x1400 * ((x250.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1408));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1412 - (x1405 * ((x252.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1413: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x253.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1414: ExtVal = (x1413 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1415: ExtVal =
            (((x253.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1414)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1416: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x256.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1417: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x256.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1418: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x256.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1419: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x256.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1420: ExtVal = (((x1416 + x1417) + x1418) + x1419);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1421: ExtVal = (x1420 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1422: ExtVal =
            (((x256.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1421)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1423: ExtVal = (x1414 * x1421);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1424: ExtVal = (((x253.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1421);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1425: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x257.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1426: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x257.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1427: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x257.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1428: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x257.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1429: ExtVal = (((x1425 + x1426) + x1427) + x1428);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1430: ExtVal = (x1429 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1431: ExtVal =
            (((x257.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1430)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1432: ExtVal = (((x1410 + x1415) + x1422) + x1431);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x1432);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1433: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1434: ExtVal = (((x1433 * (x1423 * x1430)) - (x1424 * x1430))
            - ((x1414 * ((x256.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1430));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1434 - (x1423 * ((x257.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1435: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x258.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1436: ExtVal = (x1435 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1437: ExtVal =
            (((x258.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1436)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1438: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1439: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1440: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1439.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1441: ExtVal = ((x1432 + x1437) + (x1438.load(ctx, 0) * inv_0(x1440)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1442: ExtVal = (x1436 * x1440);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1443: ExtVal = (((x258.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1440);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1444: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1445: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1446: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1445.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1447: ExtVal = (x1441 + (x1444.load(ctx, 0) * inv_0(x1446)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x1447);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1448: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1449: ExtVal = (((x1448 * (x1442 * x1446)) - (x1443 * x1446))
            - ((x1436 * x1438.load(ctx, 0)) * x1446));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1449 - (x1442 * x1444.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1450: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1451: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1452: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1451.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1453: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1454: BoundLayout<Reg, _> =
            (((x259.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1455: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1454.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1456: ExtVal =
            ((x1447 + (x1450.load(ctx, 0) * inv_0(x1452)?)) + (x1453.load(ctx, 0) * inv_0(x1455)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1457: ExtVal = (x1452 * x1455);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1458: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x262.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1459: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x262.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1460: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x262.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1461: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x262.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1462: ExtVal = (((x1458 + x1459) + x1460) + x1461);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1463: ExtVal = (x1462 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1464: ExtVal =
            (((x262.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1463)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1465: ExtVal = (x1456 + x1464);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1466: ExtVal = ((x1450.load(ctx, 0) * x1455) * x1463);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x1465);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1467: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1468: ExtVal =
            (((x1467 * (x1457 * x1463)) - x1466) - ((x1452 * x1453.load(ctx, 0)) * x1463));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1468 - (x1457 * ((x262.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1469: ExtVal = (x11.load_ext::<ExtVal>(ctx, 0)
            * ((x263.map(|c| c.addr)).map(|c| c._super)).load(ctx, 0));
        let x1470: ExtVal = (x12.load_ext::<ExtVal>(ctx, 0)
            * ((x263.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        let x1471: ExtVal = (x13.load_ext::<ExtVal>(ctx, 0)
            * ((x263.map(|c| c.data_low)).map(|c| c._super)).load(ctx, 0));
        let x1472: ExtVal = (x14.load_ext::<ExtVal>(ctx, 0)
            * ((x263.map(|c| c.data_high)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1473: ExtVal = (((x1469 + x1470) + x1471) + x1472);
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1474: ExtVal = (x1473 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1475: ExtVal =
            (((x263.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1474)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1476: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x264.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1477: ExtVal = (x1476 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1478: ExtVal =
            (((x264.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1477)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1479: ExtVal = (x1474 * x1477);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1480: ExtVal = (((x263.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1477);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1481: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x266.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1482: ExtVal = (x1481 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1483: ExtVal =
            (((x266.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1482)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1484: ExtVal = (((x1465 + x1475) + x1478) + x1483);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(8)])).store_ext(ctx, x1484);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1485: ExtVal = ((x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1486: ExtVal = (((x1485 * (x1479 * x1482)) - (x1480 * x1482))
            - ((x1474 * ((x264.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1482));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1486 - (x1479 * ((x266.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1487: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x267.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1488: ExtVal = (x1487 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1489: ExtVal =
            (((x267.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1488)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(9)])).store_ext(ctx, (x1484 + x1489));
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1490: ExtVal = ((x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1491: ExtVal =
            ((x1490 * x1488) - ((x267.map(|c| c.count)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(x1491, "zirgen/dsl/passes/GenerateAccum.cpp:182");
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)]))
            .store_ext(ctx, (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x1492: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x1492, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(7)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1493: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x269.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1494: ExtVal = (x1493 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1495: ExtVal =
            (((x269.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1494)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1496: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x1495);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1497: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1498: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(0)])).map(|c| c.addr)).map(|c| c._super));
        let x1499: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1500: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1498.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1499.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1501: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(0)])).map(|c| c.data_low)).map(|c| c._super));
        let x1502: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(0)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1503: ExtVal = ((x1500 + (x13.load_ext::<ExtVal>(ctx, 0) * x1501.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1502.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1504: ExtVal = (x1503 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1505: ExtVal = (x1494 * x1504);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1506: ExtVal = (((x269.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1504);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1507: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1508: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(1)])).map(|c| c.addr)).map(|c| c._super));
        let x1509: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1510: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1508.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1509.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1511: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(1)])).map(|c| c.data_low)).map(|c| c._super));
        let x1512: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(1)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1513: ExtVal = ((x1510 + (x13.load_ext::<ExtVal>(ctx, 0) * x1511.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1512.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1514: ExtVal = (x1513 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1515: ExtVal =
            ((x1496 + (x1497.load(ctx, 0) * inv_0(x1504)?)) + (x1507.load(ctx, 0) * inv_0(x1514)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x1515);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1516: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1517: ExtVal = (((x1516 * (x1505 * x1514)) - (x1506 * x1514))
            - ((x1494 * x1497.load(ctx, 0)) * x1514));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1517 - (x1505 * x1507.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1518: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1519: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(2)])).map(|c| c.addr)).map(|c| c._super));
        let x1520: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1521: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1519.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1520.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1522: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(2)])).map(|c| c.data_low)).map(|c| c._super));
        let x1523: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(2)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1524: ExtVal = ((x1521 + (x13.load_ext::<ExtVal>(ctx, 0) * x1522.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1523.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1525: ExtVal = (x1524 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1526: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1527: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(3)])).map(|c| c.addr)).map(|c| c._super));
        let x1528: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1529: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1527.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1528.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1530: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(3)])).map(|c| c.data_low)).map(|c| c._super));
        let x1531: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(3)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1532: ExtVal = ((x1529 + (x13.load_ext::<ExtVal>(ctx, 0) * x1530.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1531.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1533: ExtVal = (x1532 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1534: ExtVal =
            ((x1515 + (x1518.load(ctx, 0) * inv_0(x1525)?)) + (x1526.load(ctx, 0) * inv_0(x1533)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1535: ExtVal = (x1525 * x1533);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1536: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1537: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(4)])).map(|c| c.addr)).map(|c| c._super));
        let x1538: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(4)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1539: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1537.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1538.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1540: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(4)])).map(|c| c.data_low)).map(|c| c._super));
        let x1541: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(4)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1542: ExtVal = ((x1539 + (x13.load_ext::<ExtVal>(ctx, 0) * x1540.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1541.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1543: ExtVal = (x1542 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1544: ExtVal = (x1534 + (x1536.load(ctx, 0) * inv_0(x1543)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1545: ExtVal = ((x1518.load(ctx, 0) * x1533) * x1543);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x1544);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1546: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1547: ExtVal =
            (((x1546 * (x1535 * x1543)) - x1545) - ((x1525 * x1526.load(ctx, 0)) * x1543));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1547 - (x1535 * x1536.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1548: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1549: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(5)])).map(|c| c.addr)).map(|c| c._super));
        let x1550: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(5)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1551: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1549.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1550.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1552: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(5)])).map(|c| c.data_low)).map(|c| c._super));
        let x1553: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(5)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1554: ExtVal = ((x1551 + (x13.load_ext::<ExtVal>(ctx, 0) * x1552.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1553.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1555: ExtVal = (x1554 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1556: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1557: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(6)])).map(|c| c.addr)).map(|c| c._super));
        let x1558: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(6)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1559: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1557.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1558.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1560: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(6)])).map(|c| c.data_low)).map(|c| c._super));
        let x1561: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(6)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1562: ExtVal = ((x1559 + (x13.load_ext::<ExtVal>(ctx, 0) * x1560.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1561.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1563: ExtVal = (x1562 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1564: ExtVal =
            ((x1544 + (x1548.load(ctx, 0) * inv_0(x1555)?)) + (x1556.load(ctx, 0) * inv_0(x1563)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1565: ExtVal = (x1555 * x1563);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1566: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1567: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(7)])).map(|c| c.addr)).map(|c| c._super));
        let x1568: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(7)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1569: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1567.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1568.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1570: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(7)])).map(|c| c.data_low)).map(|c| c._super));
        let x1571: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(7)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1572: ExtVal = ((x1569 + (x13.load_ext::<ExtVal>(ctx, 0) * x1570.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1571.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1573: ExtVal = (x1572 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1574: ExtVal = (x1564 + (x1566.load(ctx, 0) * inv_0(x1573)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1575: ExtVal = ((x1548.load(ctx, 0) * x1563) * x1573);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x1574);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1576: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1577: ExtVal =
            (((x1576 * (x1565 * x1573)) - x1575) - ((x1555 * x1556.load(ctx, 0)) * x1573));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1577 - (x1565 * x1566.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1578: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1579: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(8)])).map(|c| c.addr)).map(|c| c._super));
        let x1580: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(8)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1581: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1579.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1580.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1582: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(8)])).map(|c| c.data_low)).map(|c| c._super));
        let x1583: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(8)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1584: ExtVal = ((x1581 + (x13.load_ext::<ExtVal>(ctx, 0) * x1582.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1583.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1585: ExtVal = (x1584 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1586: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1587: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(9)])).map(|c| c.addr)).map(|c| c._super));
        let x1588: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(9)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1589: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1587.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1588.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1590: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(9)])).map(|c| c.data_low)).map(|c| c._super));
        let x1591: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(9)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1592: ExtVal = ((x1589 + (x13.load_ext::<ExtVal>(ctx, 0) * x1590.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1591.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1593: ExtVal = (x1592 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1594: ExtVal =
            ((x1574 + (x1578.load(ctx, 0) * inv_0(x1585)?)) + (x1586.load(ctx, 0) * inv_0(x1593)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1595: ExtVal = (x1585 * x1593);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1596: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1597: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(10)])).map(|c| c.addr)).map(|c| c._super));
        let x1598: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(10)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1599: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1597.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1598.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1600: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(10)])).map(|c| c.data_low)).map(|c| c._super));
        let x1601: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(10)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1602: ExtVal = ((x1599 + (x13.load_ext::<ExtVal>(ctx, 0) * x1600.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1601.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1603: ExtVal = (x1602 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1604: ExtVal = (x1594 + (x1596.load(ctx, 0) * inv_0(x1603)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1605: ExtVal = ((x1578.load(ctx, 0) * x1593) * x1603);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x1604);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1606: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1607: ExtVal =
            (((x1606 * (x1595 * x1603)) - x1605) - ((x1585 * x1586.load(ctx, 0)) * x1603));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1607 - (x1595 * x1596.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1608: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1609: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(11)])).map(|c| c.addr)).map(|c| c._super));
        let x1610: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(11)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1611: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1609.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1610.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1612: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(11)])).map(|c| c.data_low)).map(|c| c._super));
        let x1613: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(11)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1614: ExtVal = ((x1611 + (x13.load_ext::<ExtVal>(ctx, 0) * x1612.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1613.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1615: ExtVal = (x1614 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1616: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1617: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(12)])).map(|c| c.addr)).map(|c| c._super));
        let x1618: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(12)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1619: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1617.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1618.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1620: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(12)])).map(|c| c.data_low)).map(|c| c._super));
        let x1621: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(12)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1622: ExtVal = ((x1619 + (x13.load_ext::<ExtVal>(ctx, 0) * x1620.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1621.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1623: ExtVal = (x1622 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1624: ExtVal =
            ((x1604 + (x1608.load(ctx, 0) * inv_0(x1615)?)) + (x1616.load(ctx, 0) * inv_0(x1623)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1625: ExtVal = (x1615 * x1623);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1626: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(13)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1627: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(13)])).map(|c| c.addr)).map(|c| c._super));
        let x1628: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(13)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1629: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1627.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1628.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1630: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(13)])).map(|c| c.data_low)).map(|c| c._super));
        let x1631: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(13)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1632: ExtVal = ((x1629 + (x13.load_ext::<ExtVal>(ctx, 0) * x1630.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1631.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1633: ExtVal = (x1632 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1634: ExtVal = (x1624 + (x1626.load(ctx, 0) * inv_0(x1633)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1635: ExtVal = ((x1608.load(ctx, 0) * x1623) * x1633);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x1634);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1636: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1637: ExtVal =
            (((x1636 * (x1625 * x1633)) - x1635) - ((x1615 * x1616.load(ctx, 0)) * x1633));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1637 - (x1625 * x1626.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1638: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(14)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1639: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(14)])).map(|c| c.addr)).map(|c| c._super));
        let x1640: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(14)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1641: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1639.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1640.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1642: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(14)])).map(|c| c.data_low)).map(|c| c._super));
        let x1643: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(14)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1644: ExtVal = ((x1641 + (x13.load_ext::<ExtVal>(ctx, 0) * x1642.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1643.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1645: ExtVal = (x1644 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1646: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(15)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1647: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(15)])).map(|c| c.addr)).map(|c| c._super));
        let x1648: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(15)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1649: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1647.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1648.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1650: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(15)])).map(|c| c.data_low)).map(|c| c._super));
        let x1651: BoundLayout<Reg, _> =
            (((x271.map(|c| c[to_usize(15)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1652: ExtVal = ((x1649 + (x13.load_ext::<ExtVal>(ctx, 0) * x1650.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1651.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1653: ExtVal = (x1652 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1654: ExtVal =
            ((x1634 + (x1638.load(ctx, 0) * inv_0(x1645)?)) + (x1646.load(ctx, 0) * inv_0(x1653)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1655: ExtVal = (x1645 * x1653);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1656: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1657: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1658: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1657.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1659: ExtVal = (x1654 + (x1656.load(ctx, 0) * inv_0(x1658)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1660: ExtVal = ((x1638.load(ctx, 0) * x1653) * x1658);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x1659);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1661: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1662: ExtVal =
            (((x1661 * (x1655 * x1658)) - x1660) - ((x1645 * x1646.load(ctx, 0)) * x1658));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1662 - (x1655 * x1656.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1663: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1664: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1665: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1664.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1666: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1667: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1668: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1667.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1669: ExtVal =
            ((x1659 + (x1663.load(ctx, 0) * inv_0(x1665)?)) + (x1666.load(ctx, 0) * inv_0(x1668)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1670: ExtVal = (x1665 * x1668);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1671: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1672: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1673: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1672.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1674: ExtVal = (x1669 + (x1671.load(ctx, 0) * inv_0(x1673)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1675: ExtVal = ((x1663.load(ctx, 0) * x1668) * x1673);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x1674);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1676: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1677: ExtVal =
            (((x1676 * (x1670 * x1673)) - x1675) - ((x1665 * x1666.load(ctx, 0)) * x1673));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1677 - (x1670 * x1671.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1678: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1679: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(4)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1680: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1679.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1681: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1682: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(5)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1683: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1682.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1684: ExtVal =
            ((x1674 + (x1678.load(ctx, 0) * inv_0(x1680)?)) + (x1681.load(ctx, 0) * inv_0(x1683)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1685: ExtVal = (x1680 * x1683);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1686: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1687: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(6)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1688: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1687.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1689: ExtVal = (x1684 + (x1686.load(ctx, 0) * inv_0(x1688)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1690: ExtVal = ((x1678.load(ctx, 0) * x1683) * x1688);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x1689);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1691: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1692: ExtVal =
            (((x1691 * (x1685 * x1688)) - x1690) - ((x1680 * x1681.load(ctx, 0)) * x1688));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1692 - (x1685 * x1686.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1693: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1694: BoundLayout<Reg, _> =
            (((x272.map(|c| c[to_usize(7)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1695: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1694.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1696: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1697: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1698: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1697.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1699: ExtVal =
            ((x1689 + (x1693.load(ctx, 0) * inv_0(x1695)?)) + (x1696.load(ctx, 0) * inv_0(x1698)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1700: ExtVal = (x1695 * x1698);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1701: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1702: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1703: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1702.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1704: ExtVal = (x1699 + (x1701.load(ctx, 0) * inv_0(x1703)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1705: ExtVal = ((x1693.load(ctx, 0) * x1698) * x1703);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(8)])).store_ext(ctx, x1704);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1706: ExtVal = ((x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1707: ExtVal =
            (((x1706 * (x1700 * x1703)) - x1705) - ((x1695 * x1696.load(ctx, 0)) * x1703));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1707 - (x1700 * x1701.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1708: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1709: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1710: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1709.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1711: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1712: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1713: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1712.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1714: ExtVal =
            ((x1704 + (x1708.load(ctx, 0) * inv_0(x1710)?)) + (x1711.load(ctx, 0) * inv_0(x1713)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1715: ExtVal = (x1710 * x1713);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1716: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1717: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1718: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1717.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1719: ExtVal = (x1714 + (x1716.load(ctx, 0) * inv_0(x1718)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1720: ExtVal = ((x1708.load(ctx, 0) * x1713) * x1718);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(9)])).store_ext(ctx, x1719);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1721: ExtVal = ((x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1722: ExtVal =
            (((x1721 * (x1715 * x1718)) - x1720) - ((x1710 * x1711.load(ctx, 0)) * x1718));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1722 - (x1715 * x1716.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1723: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1724: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1725: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1724.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1726: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1727: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1728: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1727.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1729: ExtVal =
            ((x1719 + (x1723.load(ctx, 0) * inv_0(x1725)?)) + (x1726.load(ctx, 0) * inv_0(x1728)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1730: ExtVal = (x1725 * x1728);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1731: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1732: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1733: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1732.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1734: ExtVal = (x1729 + (x1731.load(ctx, 0) * inv_0(x1733)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1735: ExtVal = ((x1723.load(ctx, 0) * x1728) * x1733);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(10)])).store_ext(ctx, x1734);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1736: ExtVal = ((x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1737: ExtVal =
            (((x1736 * (x1730 * x1733)) - x1735) - ((x1725 * x1726.load(ctx, 0)) * x1733));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1737 - (x1730 * x1731.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1738: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1739: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1740: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1739.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1741: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1742: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(9)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1743: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1742.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1744: ExtVal =
            ((x1734 + (x1738.load(ctx, 0) * inv_0(x1740)?)) + (x1741.load(ctx, 0) * inv_0(x1743)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1745: ExtVal = (x1740 * x1743);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1746: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1747: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(10)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1748: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1747.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1749: ExtVal = (x1744 + (x1746.load(ctx, 0) * inv_0(x1748)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1750: ExtVal = ((x1738.load(ctx, 0) * x1743) * x1748);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(11)])).store_ext(ctx, x1749);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1751: ExtVal = ((x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1752: ExtVal =
            (((x1751 * (x1745 * x1748)) - x1750) - ((x1740 * x1741.load(ctx, 0)) * x1748));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1752 - (x1745 * x1746.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1753: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1754: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(11)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1755: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1754.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1756: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1757: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(12)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1758: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1757.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1759: ExtVal =
            ((x1749 + (x1753.load(ctx, 0) * inv_0(x1755)?)) + (x1756.load(ctx, 0) * inv_0(x1758)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1760: ExtVal = (x1755 * x1758);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1761: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(13)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1762: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(13)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1763: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1762.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1764: ExtVal = (x1759 + (x1761.load(ctx, 0) * inv_0(x1763)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1765: ExtVal = ((x1753.load(ctx, 0) * x1758) * x1763);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(12)])).store_ext(ctx, x1764);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1766: ExtVal = ((x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1767: ExtVal =
            (((x1766 * (x1760 * x1763)) - x1765) - ((x1755 * x1756.load(ctx, 0)) * x1763));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1767 - (x1760 * x1761.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1768: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(14)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1769: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(14)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1770: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1769.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1771: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(15)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1772: BoundLayout<Reg, _> =
            (((x273.map(|c| c[to_usize(15)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1773: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1772.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1774: ExtVal =
            ((x1764 + (x1768.load(ctx, 0) * inv_0(x1770)?)) + (x1771.load(ctx, 0) * inv_0(x1773)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1775: ExtVal = (x1770 * x1773);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1776: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1777: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1778: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1777.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1779: ExtVal = (x1774 + (x1776.load(ctx, 0) * inv_0(x1778)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1780: ExtVal = ((x1768.load(ctx, 0) * x1773) * x1778);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(13)])).store_ext(ctx, x1779);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1781: ExtVal = ((x8.map(|c| c[to_usize(13)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1782: ExtVal =
            (((x1781 * (x1775 * x1778)) - x1780) - ((x1770 * x1771.load(ctx, 0)) * x1778));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1782 - (x1775 * x1776.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1783: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1784: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1785: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1784.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1786: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1787: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1788: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1787.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1789: ExtVal =
            ((x1779 + (x1783.load(ctx, 0) * inv_0(x1785)?)) + (x1786.load(ctx, 0) * inv_0(x1788)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1790: ExtVal = (x1785 * x1788);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1791: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1792: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1793: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1792.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1794: ExtVal = (x1789 + (x1791.load(ctx, 0) * inv_0(x1793)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1795: ExtVal = ((x1783.load(ctx, 0) * x1788) * x1793);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(14)])).store_ext(ctx, x1794);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1796: ExtVal = ((x8.map(|c| c[to_usize(14)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(13)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1797: ExtVal =
            (((x1796 * (x1790 * x1793)) - x1795) - ((x1785 * x1786.load(ctx, 0)) * x1793));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1797 - (x1790 * x1791.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1798: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1799: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1800: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1799.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1801: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1802: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1803: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1802.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1804: ExtVal =
            ((x1794 + (x1798.load(ctx, 0) * inv_0(x1800)?)) + (x1801.load(ctx, 0) * inv_0(x1803)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1805: ExtVal = (x1800 * x1803);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1806: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1807: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1808: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1807.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1809: ExtVal = (x1804 + (x1806.load(ctx, 0) * inv_0(x1808)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1810: ExtVal = ((x1798.load(ctx, 0) * x1803) * x1808);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(15)])).store_ext(ctx, x1809);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1811: ExtVal = ((x8.map(|c| c[to_usize(15)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(14)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1812: ExtVal =
            (((x1811 * (x1805 * x1808)) - x1810) - ((x1800 * x1801.load(ctx, 0)) * x1808));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1812 - (x1805 * x1806.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1813: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1814: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1815: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1814.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1816: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1817: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1818: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1817.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1819: ExtVal =
            ((x1809 + (x1813.load(ctx, 0) * inv_0(x1815)?)) + (x1816.load(ctx, 0) * inv_0(x1818)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1820: ExtVal = (x1815 * x1818);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1821: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1822: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(9)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1823: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1822.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1824: ExtVal = (x1819 + (x1821.load(ctx, 0) * inv_0(x1823)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1825: ExtVal = ((x1813.load(ctx, 0) * x1818) * x1823);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(16)])).store_ext(ctx, x1824);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1826: ExtVal = ((x8.map(|c| c[to_usize(16)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(15)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1827: ExtVal =
            (((x1826 * (x1820 * x1823)) - x1825) - ((x1815 * x1816.load(ctx, 0)) * x1823));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1827 - (x1820 * x1821.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1828: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1829: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(10)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1830: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1829.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1831: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1832: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(11)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1833: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1832.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1834: ExtVal =
            ((x1824 + (x1828.load(ctx, 0) * inv_0(x1830)?)) + (x1831.load(ctx, 0) * inv_0(x1833)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1835: ExtVal = (x1830 * x1833);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1836: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1837: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(12)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1838: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1837.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1839: ExtVal = (x1834 + (x1836.load(ctx, 0) * inv_0(x1838)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1840: ExtVal = ((x1828.load(ctx, 0) * x1833) * x1838);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(17)])).store_ext(ctx, x1839);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1841: ExtVal = ((x8.map(|c| c[to_usize(17)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(16)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1842: ExtVal =
            (((x1841 * (x1835 * x1838)) - x1840) - ((x1830 * x1831.load(ctx, 0)) * x1838));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1842 - (x1835 * x1836.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1843: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(13)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1844: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(13)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1845: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1844.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1846: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(14)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1847: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(14)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1848: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1847.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1849: ExtVal =
            ((x1839 + (x1843.load(ctx, 0) * inv_0(x1845)?)) + (x1846.load(ctx, 0) * inv_0(x1848)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1850: ExtVal = (x1845 * x1848);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1851: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(15)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1852: BoundLayout<Reg, _> =
            (((x274.map(|c| c[to_usize(15)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1853: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x1852.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1854: ExtVal = ((x1843.load(ctx, 0) * x1848) * x1853);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(18)]))
            .store_ext(ctx, (x1849 + (x1851.load(ctx, 0) * inv_0(x1853)?)));
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1855: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(17)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1856: ExtVal =
            (((x1855 * (x1850 * x1853)) - x1854) - ((x1845 * x1846.load(ctx, 0)) * x1853));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1856 - (x1850 * x1851.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(8)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1857: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x277.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1858: ExtVal = (x1857 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1859: ExtVal =
            (((x277.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1858)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1860: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x1859);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1861: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x278.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1862: ExtVal = (x1861 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1863: ExtVal =
            (((x278.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1862)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1864: ExtVal = (x1858 * x1862);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1865: ExtVal = (((x277.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * x1862);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1866: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1867: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(0)])).map(|c| c.addr)).map(|c| c._super));
        let x1868: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1869: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1867.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1868.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1870: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(0)])).map(|c| c.data_low)).map(|c| c._super));
        let x1871: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(0)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1872: ExtVal = ((x1869 + (x13.load_ext::<ExtVal>(ctx, 0) * x1870.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1871.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1873: ExtVal = (x1872 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1874: ExtVal = ((x1860 + x1863) + (x1866.load(ctx, 0) * inv_0(x1873)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x1874);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1875: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1876: ExtVal = (((x1875 * (x1864 * x1873)) - (x1865 * x1873))
            - ((x1858 * ((x278.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1873));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1876 - (x1864 * x1866.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1877: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1878: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(1)])).map(|c| c.addr)).map(|c| c._super));
        let x1879: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1880: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1878.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1879.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1881: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(1)])).map(|c| c.data_low)).map(|c| c._super));
        let x1882: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(1)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1883: ExtVal = ((x1880 + (x13.load_ext::<ExtVal>(ctx, 0) * x1881.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1882.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1884: ExtVal = (x1883 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1885: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1886: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(2)])).map(|c| c.addr)).map(|c| c._super));
        let x1887: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1888: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1886.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1887.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1889: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(2)])).map(|c| c.data_low)).map(|c| c._super));
        let x1890: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(2)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1891: ExtVal = ((x1888 + (x13.load_ext::<ExtVal>(ctx, 0) * x1889.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1890.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1892: ExtVal = (x1891 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1893: ExtVal =
            ((x1874 + (x1877.load(ctx, 0) * inv_0(x1884)?)) + (x1885.load(ctx, 0) * inv_0(x1892)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1894: ExtVal = (x1884 * x1892);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1895: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1896: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(3)])).map(|c| c.addr)).map(|c| c._super));
        let x1897: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1898: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1896.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1897.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1899: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(3)])).map(|c| c.data_low)).map(|c| c._super));
        let x1900: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(3)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1901: ExtVal = ((x1898 + (x13.load_ext::<ExtVal>(ctx, 0) * x1899.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1900.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1902: ExtVal = (x1901 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1903: ExtVal = (x1893 + (x1895.load(ctx, 0) * inv_0(x1902)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1904: ExtVal = ((x1877.load(ctx, 0) * x1892) * x1902);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x1903);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1905: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1906: ExtVal =
            (((x1905 * (x1894 * x1902)) - x1904) - ((x1884 * x1885.load(ctx, 0)) * x1902));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1906 - (x1894 * x1895.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1907: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1908: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(4)])).map(|c| c.addr)).map(|c| c._super));
        let x1909: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(4)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1910: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1908.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1909.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1911: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(4)])).map(|c| c.data_low)).map(|c| c._super));
        let x1912: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(4)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1913: ExtVal = ((x1910 + (x13.load_ext::<ExtVal>(ctx, 0) * x1911.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1912.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1914: ExtVal = (x1913 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1915: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1916: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(5)])).map(|c| c.addr)).map(|c| c._super));
        let x1917: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(5)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1918: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1916.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1917.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1919: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(5)])).map(|c| c.data_low)).map(|c| c._super));
        let x1920: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(5)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1921: ExtVal = ((x1918 + (x13.load_ext::<ExtVal>(ctx, 0) * x1919.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1920.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1922: ExtVal = (x1921 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1923: ExtVal =
            ((x1903 + (x1907.load(ctx, 0) * inv_0(x1914)?)) + (x1915.load(ctx, 0) * inv_0(x1922)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1924: ExtVal = (x1914 * x1922);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1925: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1926: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(6)])).map(|c| c.addr)).map(|c| c._super));
        let x1927: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(6)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1928: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1926.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1927.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1929: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(6)])).map(|c| c.data_low)).map(|c| c._super));
        let x1930: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(6)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1931: ExtVal = ((x1928 + (x13.load_ext::<ExtVal>(ctx, 0) * x1929.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1930.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1932: ExtVal = (x1931 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1933: ExtVal = (x1923 + (x1925.load(ctx, 0) * inv_0(x1932)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1934: ExtVal = ((x1907.load(ctx, 0) * x1922) * x1932);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x1933);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1935: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1936: ExtVal =
            (((x1935 * (x1924 * x1932)) - x1934) - ((x1914 * x1915.load(ctx, 0)) * x1932));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1936 - (x1924 * x1925.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1937: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1938: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(7)])).map(|c| c.addr)).map(|c| c._super));
        let x1939: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(7)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1940: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1938.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1939.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1941: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(7)])).map(|c| c.data_low)).map(|c| c._super));
        let x1942: BoundLayout<Reg, _> =
            (((x280.map(|c| c[to_usize(7)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1943: ExtVal = ((x1940 + (x13.load_ext::<ExtVal>(ctx, 0) * x1941.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1942.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1944: ExtVal = (x1943 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1945: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1946: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1947: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1946.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1948: ExtVal =
            ((x1933 + (x1937.load(ctx, 0) * inv_0(x1944)?)) + (x1945.load(ctx, 0) * inv_0(x1947)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1949: ExtVal = (x1944 * x1947);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1950: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1951: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1952: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1951.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1953: ExtVal = (x1948 + (x1950.load(ctx, 0) * inv_0(x1952)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1954: ExtVal = ((x1937.load(ctx, 0) * x1947) * x1952);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x1953);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1955: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1956: ExtVal =
            (((x1955 * (x1949 * x1952)) - x1954) - ((x1944 * x1945.load(ctx, 0)) * x1952));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1956 - (x1949 * x1950.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1957: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1958: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1959: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1958.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1960: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1961: BoundLayout<Reg, _> =
            (((x281.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1962: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x1961.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1963: ExtVal =
            ((x1953 + (x1957.load(ctx, 0) * inv_0(x1959)?)) + (x1960.load(ctx, 0) * inv_0(x1962)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1964: ExtVal = (x1959 * x1962);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1965: BoundLayout<Reg, _> =
            (((x282.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1966: BoundLayout<Reg, _> =
            (((x282.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1967: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1966.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1968: ExtVal = (x1963 + (x1965.load(ctx, 0) * inv_0(x1967)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1969: ExtVal = ((x1957.load(ctx, 0) * x1962) * x1967);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x1968);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1970: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1971: ExtVal =
            (((x1970 * (x1964 * x1967)) - x1969) - ((x1959 * x1960.load(ctx, 0)) * x1967));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1971 - (x1964 * x1965.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1972: BoundLayout<Reg, _> =
            (((x282.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1973: BoundLayout<Reg, _> =
            (((x282.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1974: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x1973.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1975: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x284.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1976: ExtVal = (x1975 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1977: ExtVal =
            (((x284.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1976)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x1978: ExtVal = (x1974 * x1976);
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1979: ExtVal = (x9.load_ext::<ExtVal>(ctx, 0)
            * ((x285.map(|c| c.val)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1980: ExtVal = (x1979 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1981: ExtVal =
            (((x285.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1980)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x1982: ExtVal = (((x1968 + (x1972.load(ctx, 0) * inv_0(x1974)?)) + x1977) + x1981);
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x1983: ExtVal = ((x1972.load(ctx, 0) * x1976) * x1980);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x1982);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1984: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1985: ExtVal = (((x1984 * (x1978 * x1980)) - x1983)
            - ((x1974 * ((x284.map(|c| c.count)).map(|c| c._super)).load(ctx, 0)) * x1980));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x1985 - (x1978 * ((x285.map(|c| c.count)).map(|c| c._super)).load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x1986: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x286.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1987: ExtVal = (x1986 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x1988: ExtVal =
            (((x286.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x1987)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, (x1982 + x1988));
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x1989: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x1990: ExtVal =
            ((x1989 * x1987) - ((x286.map(|c| c.count)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(x1990, "zirgen/dsl/passes/GenerateAccum.cpp:182");
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)]))
            .store_ext(ctx, (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x1991: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x1991, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(9)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x1992: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1993: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(0)])).map(|c| c.addr)).map(|c| c._super));
        let x1994: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1995: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x1993.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x1994.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x1996: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(0)])).map(|c| c.data_low)).map(|c| c._super));
        let x1997: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(0)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x1998: ExtVal = ((x1995 + (x13.load_ext::<ExtVal>(ctx, 0) * x1996.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x1997.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x1999: ExtVal = (x1998 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2000: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1)
            + (x1992.load(ctx, 0) * inv_0(x1999)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2001: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2002: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(1)])).map(|c| c.addr)).map(|c| c._super));
        let x2003: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2004: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2002.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2003.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2005: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(1)])).map(|c| c.data_low)).map(|c| c._super));
        let x2006: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(1)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2007: ExtVal = ((x2004 + (x13.load_ext::<ExtVal>(ctx, 0) * x2005.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2006.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2008: ExtVal = (x2007 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2009: ExtVal = (x1999 * x2008);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2010: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2011: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(2)])).map(|c| c.addr)).map(|c| c._super));
        let x2012: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2013: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2011.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2012.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2014: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(2)])).map(|c| c.data_low)).map(|c| c._super));
        let x2015: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(2)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2016: ExtVal = ((x2013 + (x13.load_ext::<ExtVal>(ctx, 0) * x2014.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2015.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2017: ExtVal = (x2016 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2018: ExtVal =
            ((x2000 + (x2001.load(ctx, 0) * inv_0(x2008)?)) + (x2010.load(ctx, 0) * inv_0(x2017)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2019: ExtVal = ((x1992.load(ctx, 0) * x2008) * x2017);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x2018);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2020: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2021: ExtVal =
            (((x2020 * (x2009 * x2017)) - x2019) - ((x1999 * x2001.load(ctx, 0)) * x2017));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2021 - (x2009 * x2010.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2022: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2023: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(3)])).map(|c| c.addr)).map(|c| c._super));
        let x2024: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2025: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2023.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2024.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2026: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(3)])).map(|c| c.data_low)).map(|c| c._super));
        let x2027: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(3)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2028: ExtVal = ((x2025 + (x13.load_ext::<ExtVal>(ctx, 0) * x2026.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2027.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2029: ExtVal = (x2028 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2030: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2031: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(4)])).map(|c| c.addr)).map(|c| c._super));
        let x2032: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(4)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2033: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2031.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2032.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2034: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(4)])).map(|c| c.data_low)).map(|c| c._super));
        let x2035: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(4)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2036: ExtVal = ((x2033 + (x13.load_ext::<ExtVal>(ctx, 0) * x2034.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2035.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2037: ExtVal = (x2036 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2038: ExtVal =
            ((x2018 + (x2022.load(ctx, 0) * inv_0(x2029)?)) + (x2030.load(ctx, 0) * inv_0(x2037)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2039: ExtVal = (x2029 * x2037);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2040: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2041: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(5)])).map(|c| c.addr)).map(|c| c._super));
        let x2042: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(5)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2043: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2041.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2042.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2044: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(5)])).map(|c| c.data_low)).map(|c| c._super));
        let x2045: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(5)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2046: ExtVal = ((x2043 + (x13.load_ext::<ExtVal>(ctx, 0) * x2044.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2045.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2047: ExtVal = (x2046 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2048: ExtVal = (x2038 + (x2040.load(ctx, 0) * inv_0(x2047)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2049: ExtVal = ((x2022.load(ctx, 0) * x2037) * x2047);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(1)])).store_ext(ctx, x2048);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2050: ExtVal = ((x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2051: ExtVal =
            (((x2050 * (x2039 * x2047)) - x2049) - ((x2029 * x2030.load(ctx, 0)) * x2047));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2051 - (x2039 * x2040.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2052: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2053: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(6)])).map(|c| c.addr)).map(|c| c._super));
        let x2054: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(6)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2055: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2053.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2054.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2056: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(6)])).map(|c| c.data_low)).map(|c| c._super));
        let x2057: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(6)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2058: ExtVal = ((x2055 + (x13.load_ext::<ExtVal>(ctx, 0) * x2056.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2057.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2059: ExtVal = (x2058 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2060: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2061: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(7)])).map(|c| c.addr)).map(|c| c._super));
        let x2062: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(7)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2063: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2061.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2062.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2064: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(7)])).map(|c| c.data_low)).map(|c| c._super));
        let x2065: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(7)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2066: ExtVal = ((x2063 + (x13.load_ext::<ExtVal>(ctx, 0) * x2064.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2065.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2067: ExtVal = (x2066 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2068: ExtVal =
            ((x2048 + (x2052.load(ctx, 0) * inv_0(x2059)?)) + (x2060.load(ctx, 0) * inv_0(x2067)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2069: ExtVal = (x2059 * x2067);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2070: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2071: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(8)])).map(|c| c.addr)).map(|c| c._super));
        let x2072: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(8)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2073: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2071.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2072.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2074: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(8)])).map(|c| c.data_low)).map(|c| c._super));
        let x2075: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(8)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2076: ExtVal = ((x2073 + (x13.load_ext::<ExtVal>(ctx, 0) * x2074.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2075.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2077: ExtVal = (x2076 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2078: ExtVal = (x2068 + (x2070.load(ctx, 0) * inv_0(x2077)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2079: ExtVal = ((x2052.load(ctx, 0) * x2067) * x2077);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(2)])).store_ext(ctx, x2078);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2080: ExtVal = ((x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(1)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2081: ExtVal =
            (((x2080 * (x2069 * x2077)) - x2079) - ((x2059 * x2060.load(ctx, 0)) * x2077));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2081 - (x2069 * x2070.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2082: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2083: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(9)])).map(|c| c.addr)).map(|c| c._super));
        let x2084: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(9)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2085: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2083.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2084.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2086: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(9)])).map(|c| c.data_low)).map(|c| c._super));
        let x2087: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(9)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2088: ExtVal = ((x2085 + (x13.load_ext::<ExtVal>(ctx, 0) * x2086.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2087.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2089: ExtVal = (x2088 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2090: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2091: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(10)])).map(|c| c.addr)).map(|c| c._super));
        let x2092: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(10)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2093: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2091.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2092.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2094: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(10)])).map(|c| c.data_low)).map(|c| c._super));
        let x2095: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(10)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2096: ExtVal = ((x2093 + (x13.load_ext::<ExtVal>(ctx, 0) * x2094.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2095.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2097: ExtVal = (x2096 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2098: ExtVal =
            ((x2078 + (x2082.load(ctx, 0) * inv_0(x2089)?)) + (x2090.load(ctx, 0) * inv_0(x2097)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2099: ExtVal = (x2089 * x2097);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2100: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2101: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(11)])).map(|c| c.addr)).map(|c| c._super));
        let x2102: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(11)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2103: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2101.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2102.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2104: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(11)])).map(|c| c.data_low)).map(|c| c._super));
        let x2105: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(11)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2106: ExtVal = ((x2103 + (x13.load_ext::<ExtVal>(ctx, 0) * x2104.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2105.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2107: ExtVal = (x2106 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2108: ExtVal = (x2098 + (x2100.load(ctx, 0) * inv_0(x2107)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2109: ExtVal = ((x2082.load(ctx, 0) * x2097) * x2107);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(3)])).store_ext(ctx, x2108);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2110: ExtVal = ((x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(2)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2111: ExtVal =
            (((x2110 * (x2099 * x2107)) - x2109) - ((x2089 * x2090.load(ctx, 0)) * x2107));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2111 - (x2099 * x2100.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2112: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2113: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(12)])).map(|c| c.addr)).map(|c| c._super));
        let x2114: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(12)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2115: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2113.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2114.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2116: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(12)])).map(|c| c.data_low)).map(|c| c._super));
        let x2117: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(12)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2118: ExtVal = ((x2115 + (x13.load_ext::<ExtVal>(ctx, 0) * x2116.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2117.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2119: ExtVal = (x2118 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2120: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(13)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2121: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(13)])).map(|c| c.addr)).map(|c| c._super));
        let x2122: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(13)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2123: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2121.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2122.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2124: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(13)])).map(|c| c.data_low)).map(|c| c._super));
        let x2125: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(13)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2126: ExtVal = ((x2123 + (x13.load_ext::<ExtVal>(ctx, 0) * x2124.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2125.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2127: ExtVal = (x2126 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2128: ExtVal =
            ((x2108 + (x2112.load(ctx, 0) * inv_0(x2119)?)) + (x2120.load(ctx, 0) * inv_0(x2127)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2129: ExtVal = (x2119 * x2127);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2130: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(14)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2131: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(14)])).map(|c| c.addr)).map(|c| c._super));
        let x2132: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(14)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2133: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2131.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2132.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2134: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(14)])).map(|c| c.data_low)).map(|c| c._super));
        let x2135: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(14)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2136: ExtVal = ((x2133 + (x13.load_ext::<ExtVal>(ctx, 0) * x2134.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2135.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2137: ExtVal = (x2136 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2138: ExtVal = (x2128 + (x2130.load(ctx, 0) * inv_0(x2137)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2139: ExtVal = ((x2112.load(ctx, 0) * x2127) * x2137);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(4)])).store_ext(ctx, x2138);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2140: ExtVal = ((x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(3)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2141: ExtVal =
            (((x2140 * (x2129 * x2137)) - x2139) - ((x2119 * x2120.load(ctx, 0)) * x2137));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2141 - (x2129 * x2130.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2142: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(15)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2143: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(15)])).map(|c| c.addr)).map(|c| c._super));
        let x2144: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(15)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2145: ExtVal = ((x11.load_ext::<ExtVal>(ctx, 0) * x2143.load(ctx, 0))
            + (x12.load_ext::<ExtVal>(ctx, 0) * x2144.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2146: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(15)])).map(|c| c.data_low)).map(|c| c._super));
        let x2147: BoundLayout<Reg, _> =
            (((x289.map(|c| c[to_usize(15)])).map(|c| c.data_high)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:157
        let x2148: ExtVal = ((x2145 + (x13.load_ext::<ExtVal>(ctx, 0) * x2146.load(ctx, 0)))
            + (x14.load_ext::<ExtVal>(ctx, 0) * x2147.load(ctx, 0)));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2149: ExtVal = (x2148 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2150: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2151: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(0)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2152: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2151.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2153: ExtVal =
            ((x2138 + (x2142.load(ctx, 0) * inv_0(x2149)?)) + (x2150.load(ctx, 0) * inv_0(x2152)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2154: ExtVal = (x2149 * x2152);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2155: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2156: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(1)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2157: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2156.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2158: ExtVal = (x2153 + (x2155.load(ctx, 0) * inv_0(x2157)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2159: ExtVal = ((x2142.load(ctx, 0) * x2152) * x2157);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(5)])).store_ext(ctx, x2158);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2160: ExtVal = ((x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(4)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2161: ExtVal =
            (((x2160 * (x2154 * x2157)) - x2159) - ((x2149 * x2150.load(ctx, 0)) * x2157));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2161 - (x2154 * x2155.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2162: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2163: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(2)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2164: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2163.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2165: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2166: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(3)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2167: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2166.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2168: ExtVal =
            ((x2158 + (x2162.load(ctx, 0) * inv_0(x2164)?)) + (x2165.load(ctx, 0) * inv_0(x2167)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2169: ExtVal = (x2164 * x2167);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2170: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2171: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(4)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2172: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2171.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2173: ExtVal = (x2168 + (x2170.load(ctx, 0) * inv_0(x2172)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2174: ExtVal = ((x2162.load(ctx, 0) * x2167) * x2172);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(6)])).store_ext(ctx, x2173);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2175: ExtVal = ((x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(5)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2176: ExtVal =
            (((x2175 * (x2169 * x2172)) - x2174) - ((x2164 * x2165.load(ctx, 0)) * x2172));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2176 - (x2169 * x2170.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2177: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2178: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(5)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2179: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2178.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2180: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2181: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(6)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2182: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2181.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2183: ExtVal =
            ((x2173 + (x2177.load(ctx, 0) * inv_0(x2179)?)) + (x2180.load(ctx, 0) * inv_0(x2182)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2184: ExtVal = (x2179 * x2182);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2185: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2186: BoundLayout<Reg, _> =
            (((x290.map(|c| c[to_usize(7)])).map(|c| c.cycle)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2187: ExtVal = ((x15.load_ext::<ExtVal>(ctx, 0) * x2186.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2188: ExtVal = (x2183 + (x2185.load(ctx, 0) * inv_0(x2187)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2189: ExtVal = ((x2177.load(ctx, 0) * x2182) * x2187);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(7)])).store_ext(ctx, x2188);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2190: ExtVal = ((x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(6)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2191: ExtVal =
            (((x2190 * (x2184 * x2187)) - x2189) - ((x2179 * x2180.load(ctx, 0)) * x2187));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2191 - (x2184 * x2185.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2192: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2193: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2194: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2193.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2195: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2196: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2197: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2196.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2198: ExtVal =
            ((x2188 + (x2192.load(ctx, 0) * inv_0(x2194)?)) + (x2195.load(ctx, 0) * inv_0(x2197)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2199: ExtVal = (x2194 * x2197);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2200: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(2)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2201: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(2)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2202: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2201.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2203: ExtVal = (x2198 + (x2200.load(ctx, 0) * inv_0(x2202)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2204: ExtVal = ((x2192.load(ctx, 0) * x2197) * x2202);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(8)])).store_ext(ctx, x2203);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2205: ExtVal = ((x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(7)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2206: ExtVal =
            (((x2205 * (x2199 * x2202)) - x2204) - ((x2194 * x2195.load(ctx, 0)) * x2202));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2206 - (x2199 * x2200.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2207: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(3)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2208: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(3)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2209: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2208.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2210: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(4)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2211: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(4)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2212: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2211.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2213: ExtVal =
            ((x2203 + (x2207.load(ctx, 0) * inv_0(x2209)?)) + (x2210.load(ctx, 0) * inv_0(x2212)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2214: ExtVal = (x2209 * x2212);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2215: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(5)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2216: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(5)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2217: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2216.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2218: ExtVal = (x2213 + (x2215.load(ctx, 0) * inv_0(x2217)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2219: ExtVal = ((x2207.load(ctx, 0) * x2212) * x2217);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(9)])).store_ext(ctx, x2218);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2220: ExtVal = ((x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(8)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2221: ExtVal =
            (((x2220 * (x2214 * x2217)) - x2219) - ((x2209 * x2210.load(ctx, 0)) * x2217));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2221 - (x2214 * x2215.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2222: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(6)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2223: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(6)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2224: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2223.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2225: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(7)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2226: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(7)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2227: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2226.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2228: ExtVal =
            ((x2218 + (x2222.load(ctx, 0) * inv_0(x2224)?)) + (x2225.load(ctx, 0) * inv_0(x2227)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2229: ExtVal = (x2224 * x2227);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2230: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(8)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2231: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(8)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2232: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2231.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2233: ExtVal = (x2228 + (x2230.load(ctx, 0) * inv_0(x2232)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2234: ExtVal = ((x2222.load(ctx, 0) * x2227) * x2232);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(10)])).store_ext(ctx, x2233);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2235: ExtVal = ((x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(9)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2236: ExtVal =
            (((x2235 * (x2229 * x2232)) - x2234) - ((x2224 * x2225.load(ctx, 0)) * x2232));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2236 - (x2229 * x2230.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2237: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(9)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2238: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(9)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2239: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2238.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2240: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(10)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2241: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(10)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2242: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2241.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2243: ExtVal =
            ((x2233 + (x2237.load(ctx, 0) * inv_0(x2239)?)) + (x2240.load(ctx, 0) * inv_0(x2242)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2244: ExtVal = (x2239 * x2242);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2245: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(11)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2246: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(11)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2247: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2246.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2248: ExtVal = (x2243 + (x2245.load(ctx, 0) * inv_0(x2247)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2249: ExtVal = ((x2237.load(ctx, 0) * x2242) * x2247);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(11)])).store_ext(ctx, x2248);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2250: ExtVal = ((x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(10)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2251: ExtVal =
            (((x2250 * (x2244 * x2247)) - x2249) - ((x2239 * x2240.load(ctx, 0)) * x2247));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2251 - (x2244 * x2245.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2252: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(12)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2253: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(12)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2254: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2253.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2255: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(13)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2256: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(13)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2257: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2256.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2258: ExtVal =
            ((x2248 + (x2252.load(ctx, 0) * inv_0(x2254)?)) + (x2255.load(ctx, 0) * inv_0(x2257)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2259: ExtVal = (x2254 * x2257);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2260: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(14)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2261: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(14)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2262: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2261.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2263: ExtVal = (x2258 + (x2260.load(ctx, 0) * inv_0(x2262)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2264: ExtVal = ((x2252.load(ctx, 0) * x2257) * x2262);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(12)])).store_ext(ctx, x2263);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2265: ExtVal = ((x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(11)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2266: ExtVal =
            (((x2265 * (x2259 * x2262)) - x2264) - ((x2254 * x2255.load(ctx, 0)) * x2262));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2266 - (x2259 * x2260.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2267: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(15)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2268: BoundLayout<Reg, _> =
            (((x291.map(|c| c[to_usize(15)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2269: ExtVal =
            ((x9.load_ext::<ExtVal>(ctx, 0) * x2268.load(ctx, 0)) + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2270: BoundLayout<Reg, _> =
            (((x292.map(|c| c[to_usize(0)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2271: BoundLayout<Reg, _> =
            (((x292.map(|c| c[to_usize(0)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2272: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x2271.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2273: ExtVal =
            ((x2263 + (x2267.load(ctx, 0) * inv_0(x2269)?)) + (x2270.load(ctx, 0) * inv_0(x2272)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:217
        let x2274: ExtVal = (x2269 * x2272);
        // zirgen/dsl/passes/GenerateAccum.cpp:234
        let x2275: BoundLayout<Reg, _> =
            (((x292.map(|c| c[to_usize(1)])).map(|c| c.count)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:144
        let x2276: BoundLayout<Reg, _> =
            (((x292.map(|c| c[to_usize(1)])).map(|c| c.val)).map(|c| c._super));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2277: ExtVal = ((x123.load_ext::<ExtVal>(ctx, 0) * x2276.load(ctx, 0))
            + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2278: ExtVal = (x2273 + (x2275.load(ctx, 0) * inv_0(x2277)?));
        // zirgen/dsl/passes/GenerateAccum.cpp:223
        let x2279: ExtVal = ((x2267.load(ctx, 0) * x2272) * x2277);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(13)])).store_ext(ctx, x2278);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2280: ExtVal = ((x8.map(|c| c[to_usize(13)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(12)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2281: ExtVal =
            (((x2280 * (x2274 * x2277)) - x2279) - ((x2269 * x2270.load(ctx, 0)) * x2277));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(
            (x2281 - (x2274 * x2275.load(ctx, 0))),
            "zirgen/dsl/passes/GenerateAccum.cpp:182"
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x2282: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x293.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2283: ExtVal = (x2282 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x2284: ExtVal =
            (((x293.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x2283)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(14)])).store_ext(ctx, (x2278 + x2284));
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2285: ExtVal = ((x8.map(|c| c[to_usize(14)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(13)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2286: ExtVal =
            ((x2285 * x2283) - ((x293.map(|c| c.count)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(x2286, "zirgen/dsl/passes/GenerateAccum.cpp:182");
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)])).store_ext(
            ctx,
            (x8.map(|c| c[to_usize(14)])).load_ext::<ExtVal>(ctx, 0),
        );
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x2287: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(14)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x2287, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else if is_true(((x6.map(|c| c[to_usize(10)])).map(|c| c._super)).load(ctx, 0)) {
        // zirgen/dsl/passes/GenerateAccum.cpp:146
        let x2288: ExtVal = (x15.load_ext::<ExtVal>(ctx, 0)
            * ((x294.map(|c| c.cycle)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:238
        let x2289: ExtVal = (x2288 + x16.load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:240
        let x2290: ExtVal =
            (((x294.map(|c| c.count)).map(|c| c._super)).load(ctx, 0) * inv_0(x2289)?);
        // zirgen/dsl/passes/GenerateAccum.cpp:241
        let x2291: ExtVal =
            ((x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1) + x2290);
        // zirgen/dsl/passes/GenerateAccum.cpp:189
        (x8.map(|c| c[to_usize(0)])).store_ext(ctx, x2291);
        // zirgen/dsl/passes/GenerateAccum.cpp:177
        let x2292: ExtVal = ((x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(18)])).load_unchecked_ext::<ExtVal>(ctx, 1));
        // zirgen/dsl/passes/GenerateAccum.cpp:180
        let x2293: ExtVal =
            ((x2292 * x2289) - ((x294.map(|c| c.count)).map(|c| c._super)).load(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:182
        eqz!(x2293, "zirgen/dsl/passes/GenerateAccum.cpp:182");
        // zirgen/dsl/passes/GenerateAccum.cpp:122
        (x8.map(|c| c[to_usize(18)]))
            .store_ext(ctx, (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:124
        let x2294: ExtVal = ((x8.map(|c| c[to_usize(18)])).load_ext::<ExtVal>(ctx, 0)
            - (x8.map(|c| c[to_usize(0)])).load_ext::<ExtVal>(ctx, 0));
        // zirgen/dsl/passes/GenerateAccum.cpp:125
        eqz!(x2294, "zirgen/dsl/passes/GenerateAccum.cpp:125");
        x295 = x51;
    } else {
        bail!("Reached unreachable mux arm")
    }
    return Ok(x51);
}
pub fn step_top_accum<'a>(
    ctx: &'a ExecContext,
    accum0: BufferRow<Val>,
    data1: BufferRow<Val>,
    mix2: BufferRow<Val>,
) -> Result<()> {
    // zirgen/dsl/passes/GenerateAccum.cpp:526
    let x3: BoundLayout<TopLayout, _> = bind_layout!(LAYOUT_TOP, data1);
    let x4: BoundLayout<LayoutAccumLayout, _> = bind_layout!(LAYOUT_TOP_ACCUM, accum0);
    let x5: ComponentStruct = exec_top_accum(ctx, x3, x4, mix2)?;
    return Ok(());
}
