// Copyright 2025 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
// http://opensource.org/licenses/MIT>, at your option. This file may not be
// copied, modified, or distributed except according to those terms.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0 OR MIT

#include <stdint.h>
#include <sys/errno.h>

#include "rv32im/base/constants.h"

inline void die() {
  asm("unimp\n");
}

// Implement machine mode ECALLS

inline void terminate(uint32_t val) {
  register uintptr_t a0 asm("a0") = val;
  register uintptr_t a7 asm("a7") = 0;
  asm volatile("ecall\n"
               :                  // no outputs
               : "r"(a0), "r"(a7) // inputs
               :                  // no clobbers
  );
}

inline void sys_bigint2(uint32_t* entry,
                        const uint32_t* a = nullptr,
                        const uint32_t* b = nullptr,
                        const uint32_t* c = nullptr,
                        const uint32_t* d = nullptr) {
  uint32_t* nondetProg = entry + 4;
  uint32_t* verifyProg = nondetProg + entry[0];
  uint32_t* consts = verifyProg + entry[1];
  uint32_t tmpSpace = entry[3] * 4;

  asm volatile("li a7, 5\n"
               "li t0, 1\n"
               "mv t1, %0\n"
               "mv t2, %1\n"
               "mv t3, %2\n"
               "sub sp, sp, %3\n"
               "mv a0, %4\n"
               "mv a1, %5\n"
               "mv a2, %6\n"
               "mv a3, %7\n"
               "mv a4, %8\n"
               "ecall\n"
               "add sp, sp, %3\n"
               : // outputs
               : "r"(nondetProg),
                 "r"(verifyProg),
                 "r"(consts),
                 "r"(tmpSpace),
                 "r"(entry),
                 "r"(a),
                 "r"(b),
                 "r"(c),
                 "r"(d)                                                               // inputs
               : "t0", "t1", "t2", "t3", "a0", "a1", "a2", "a3", "a4", "a7", "memory" // clobbers
  );
}

uint32_t code[] = {
0x00000130, 0x00000079, 0x00000010, 0x00000040, 0x63626962, 0x00000001, 0x00000000, 0x00000019,
0x00000006, 0x0000002b, 0x00000001, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000001, 0x00000000, 0x00000020, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000100, 0x00000000, 0x00000001, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000020, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc020, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x003f8040, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x005f4060, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x005f415f, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc020, 0x00000000, 0x00000000, 0x00000000,
0x000001ff, 0x00000000, 0x0000003f, 0x00000000, 0x003f8040, 0x00000000, 0x00000000, 0x00000000,
0x000001ff, 0x00000000, 0x0000003f, 0x00000000, 0x009ec19f, 0x00000000, 0x00000000, 0x00000000,
0x000001ff, 0x00000000, 0x00000020, 0x00000000, 0x000001fe, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000041, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000060, 0x00000000, 0x001fc020, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x009ec19f, 0x00000000, 0x003f8040, 0x00000000,
0x00000000, 0x00000000, 0x00000022, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc11f, 0x00000000, 0x00000000, 0x00000000,
0x00000100, 0x00000000, 0x0000003f, 0x00000000, 0x001fc21e, 0x00000000, 0x00000000, 0x00000000,
0x00000100, 0x00000000, 0x0000003f, 0x00000000, 0x001fc21e, 0x00000000, 0x000000ff, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc21e, 0x00000000, 0x000001fe, 0x00000000,
0x00000000, 0x00000000, 0x00000021, 0x00000000, 0x000000ff, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc020, 0x00000000, 0x001fc020, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc11f, 0x00000000, 0x001fc020, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x001fc11f, 0x00000000, 0x001fc11f, 0x00000000,
0x00000000, 0x00000000, 0x0000003f, 0x00000000, 0x003f813f, 0x00000000, 0x001fc11f, 0x00000000,
0x00000000, 0x00000000, 0x00000001, 0x00000000, 0xfffffc2f, 0xfffffffe, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000002, 0x00000100,
0x00010012, 0x00000400, 0x00050022, 0x00000100, 0x00000033, 0x0000000b, 0x00020033, 0x0000000b,
0x0003004a, 0x00000300, 0x00050058, 0x00000500, 0x00060068, 0x00000500, 0x00070078, 0x00000200,
0x0001008a, 0x00000100, 0x00090098, 0x00000900, 0x000a00a8, 0x00000800, 0x000400b8, 0x00000400,
0x000c003e, 0x00000100, 0x000800cc, 0x00000000, 0x000e00da, 0x00000d00, 0x000f003b, 0x00000100,
0x0004004a, 0x00001000, 0x00110058, 0x00001100, 0x000b00e9, 0x00001200, 0x001300fc, 0x00000100,
0x0010004a, 0x00001000, 0x00150108, 0x00000100, 0x00160118, 0x00000100, 0x00170129, 0x00000300,
0x00180139, 0x00000300, 0x0019014c, 0x00000100, 0x0019003b, 0x00000100, 0x0010004a, 0x00001b00,
0x00090159, 0x00001c00, 0x001d0168, 0x00000100, 0x001e0179, 0x00000400, 0x0010004a, 0x00000300,
0x001f0188, 0x00002000, 0x0021014c, 0x00000100, 0x0021003b, 0x00000100, 0x00000034, 0x00001b0c,
0x00020034, 0x0000230c, 0x000b00c4, 0x00000e02, 0x00090034, 0x00001002, 0x000600f4, 0x00001402,
0x00030144, 0x00001a02, 0x00000144, 0x00002202, 0x11a2000f, 0x11a2000e, 0x11a2000d, 0x11a2000c,
0x13a2000b, 0x012b0001, 0x022b0000, 0x012b0001, 0x032b0000, 0x037c0000, 0x24000004, 0x25000004,
0x21000004, 0x24000003, 0x25000003, 0x21000003, 0x24000002, 0x25000002, 0x21000002, 0x24000001,
0x25000001, 0x21000001, 0x24000000, 0x25000000, 0x26000000, 0x11a20008, 0x11a20007, 0x12a20006,
0x01bc0002, 0x03bc0001, 0x11c2000a, 0x12c20009, 0x01cb0003, 0x03cb0002, 0x012b0001, 0x022b0000,
0x012b0001, 0x032b0000, 0x037c0000, 0x015c0002, 0x025c0001, 0x015c0002, 0x035c0001, 0x24000004,
0x25000004, 0x21000004, 0x24000003, 0x25000003, 0x21000003, 0x24000002, 0x25000002, 0x21000002,
0x24000001, 0x25000001, 0x21000001, 0x24000000, 0x25000000, 0x26000000, 0x11a20005, 0x11a20004,
0x12a20003, 0x01bc0002, 0x03bc0001, 0x0162000a, 0x02620009, 0x0162000a, 0x03620009, 0x01cb0001,
0x03cb0000, 0x11ac0001, 0x13ac0000, 0x015c0002, 0x035c0001, 0x24000003, 0x25000003, 0x21000003,
0x24000002, 0x25000002, 0x21000002, 0x24000001, 0x25000001, 0x21000001, 0x24000000, 0x25000000,
0x26000000, 0x11a20002, 0x11a20001, 0x12a20000, 0x01bc0002, 0x03bc0001, 0x0162000a, 0x02620009,
0x016b0001, 0x036b0000, 0x01a2000a, 0x02a20009, 0x01ac0001, 0x03ac0000, 0x01ab0003, 0x03ab0002,
0x11ac0003, 0x13ac0002, 0x017c0002, 0x037c0001, 0x017c0002, 0x027c0001, 0x017c0002, 0x037c0001,
0x24000003, 0x25000003, 0x21000003, 0x24000002, 0x25000002, 0x21000002, 0x24000001, 0x25000001,
0x21000001, 0x24000000, 0x25000000, 0x26000000, 0x20000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0xfffffc2f, 0xfffffffe, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
};

uint32_t point_g[] = {
    0x16F81798,
    0x59F2815B,
    0x2DCE28D9,
    0x029BFCDB,
    0xCE870B07,
    0x55A06295,
    0xF9DCBBAC,
    0x79BE667E,

    0xFB10D4B8,
    0x9C47D08F,
    0xA6855419,
    0xFD17B448,
    0x0E1108A8,
    0x5DA4FBFC,
    0x26A3C465,
    0x483ADA77,
};

uint32_t point_g2_correct[] = {
    0x5C709EE5,
    0xABAC09B9,
    0x8CEF3CA7,
    0x5C778E4B,
    0x95C07CD8,
    0x3045406E,
    0x41ED7D6D,
    0xC6047F94,

    0x50CFE52A,
    0x236431A9,
    0x3266D0E1,
    0xF7F63265,
    0x466CEAEE,
    0xA3C58419,
    0xA63DC339,
    0x1AE168FE,
};

extern "C" void start() {
  uint32_t point_g2[16];
  sys_bigint2(code, point_g, point_g2);
  for (size_t i = 0; i < 16; i++) {
    if (point_g2[i] != point_g2_correct[i]) {
      die();
    }
  }

  terminate(0);
}
