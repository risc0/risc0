name: CI

on:
  merge_group:
  pull_request:
    branches: [main, "release-*"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RISC0_RUST_TOOLCHAIN_VERSION: 1.85.0
  RISC0_CPP_TOOLCHAIN_VERSION: 2024.01.05

defaults:
  run:
    # This ensures `-eo pipefail`, which is important for catching errors
    shell: bash

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      bento: ${{ steps.filter.outputs.bento }}
      browser: ${{ steps.filter.outputs.browser }}
      check-external: ${{ steps.filter.outputs.check-external }}
      check-semver: ${{ steps.filter.outputs.check-semver }}
      check-template: ${{ steps.filter.outputs.check-template }}
      doc: ${{ steps.filter.outputs.doc }}
      examples: ${{ steps.filter.outputs.examples }}
      risc0: ${{ steps.filter.outputs.risc0 }}
      test: ${{ steps.filter.outputs.test }}
      test-crates: ${{ steps.filter.outputs.test-crates }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - uses: actions/checkout@v4
      - uses: risc0/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: filter
        with:
          filters: |
            base: &base
              - .github/actions/**
              - .github/workflows/main.yml
              - Cargo.toml
              - rust-toolchain.toml
              - Cargo.lock
              - rzup/**
            bento:
              - *base
              - bonsai/sdk/**
              - risc0/**
              - bento/**
            browser:
              - *base
              - examples/browser-verify/**
              - risc0/**
              - xtask/**
            check-external:
              - *base
              - external/**
              - risc0/**
            check-semver:
              - *base
              - risc0/**
              - bonsai/sdk/**
              - xtask/src/semver_checks.rs
              - semver-baselines.lock
            check-template:
              - *base
              - risc0/**
              - templates/**
            doc:
              - *base
              - bonsai/sdk/**
              - risc0/**
            examples:
              - *base
              - examples/**
              - risc0/**
            risc0:
              - *base
              - risc0/**
            test:
              - *base
              - bonsai/sdk/**
              - compact_proof/**
              - external/**
              - risc0/**
            test-crates:
              - *base
              - risc0/**
            web:
              - web/**

  # see: https://github.com/orgs/community/discussions/26822
  main-status-check:
    if: always()
    needs:
      # - bento-run
      - bento-test
      - browser
      - check
      - check-external
      - check-semver
      - check-template
      - clippy
      - doc
      - docs-rs
      - examples
      - extra
      - docker
      # - test-crates
      - test
      - web
    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1

  check:
    runs-on: [self-hosted, cluster, Linux, cpu]
    steps:
      - uses: actions/checkout@v4
        with:
          # Full history is required by license-check.py
          fetch-depth: 0
      - uses: ./.github/actions/rustup
      - name: Install cargo-sort
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-sort
          version: "1.0"
      - name: Install cargo-rdme
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-rdme
          version: "1.4.3"
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: cargo fmt --all --check
      - run: cargo fmt --all --check --manifest-path bento/Cargo.toml
      - run: cargo fmt --all --check --manifest-path benchmarks/Cargo.toml
      - run: cargo fmt --all --check --manifest-path examples/Cargo.toml
      - run: cargo fmt --all --check --manifest-path tools/crates-validator/Cargo.toml
      - run: cargo sort --workspace --grouped --check
      - run: cargo sort --workspace --grouped --check bento
      - run: cargo sort --workspace --grouped --check benchmarks
      - run: cargo sort --workspace --grouped --check examples
      - run: cargo sort --workspace --grouped --check tools/crates-validator
      - name: cargo rdme in bonsai/sdk
        run: cargo rdme -c
        working-directory: bonsai/sdk
      - name: cargo rdme in risc0/zkvm
        run: cargo rdme -c
        working-directory: risc0/zkvm
      - name: cargo rdme in risc0/groth16
        run: cargo rdme -c
        working-directory: risc0/groth16
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: python license-check.py
      - name: check for "D0 NOT MERGE" comments
        run: |
          [ "$(grep -re 'DO[_ ]\?NOT[_ ]\?MERGE' $(git ls-tree --full-tree --name-only -r HEAD) | tee /dev/fd/2 | wc -l)" -eq "0" ]
      - name: Compare circom hashes to golden values
        run: bash ./.github/scripts/circom_stable.sh

  clippy:
    if: needs.changes.outputs.risc0 == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, "${{ matrix.os }}", "${{ matrix.arch }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
            feature: default
          - os: Linux
            arch: X64
            feature: cuda
          - os: macOS
            arch: ARM64
            feature: default
    env:
      FEATURE: ${{ matrix.feature }}
      RISC0_SKIP_BUILD: 1
      RISC0_SKIP_BUILD_KERNELS: 1
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - name: "root: cargo clippy"
        run: cargo clippy -F $FEATURE -F unstable --all-targets
      - name: "bento: cargo clippy"
        run: cargo clippy -F $FEATURE --all-targets
        working-directory: bento
      - name: "benchmarks: cargo clippy"
        run: cargo clippy -F $FEATURE --all-targets
        working-directory: benchmarks
      - name: "examples: cargo clippy"
        run: cargo clippy -F $FEATURE --all-targets
        working-directory: examples

  test:
    if: needs.changes.outputs.test == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, "${{ matrix.os }}", "${{ matrix.arch }}", "${{ matrix.device }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
            feature: cuda
            device: nvidia_rtx_4000_ada
            nvcc_arch: sm_89
            test_command: cargo test
            partition: 1
          - os: macOS
            arch: ARM64
            feature: default
            device: apple_m2_pro
            test_command: cargo nextest run --partition hash:1/2
            partition: 1
          - os: macOS
            arch: ARM64
            feature: default
            device: apple_m2_pro
            test_command: cargo nextest run --partition hash:2/2
            partition: 2
    env:
      FEATURE: ${{ matrix.feature }}
      NVCC_APPEND_FLAGS: -arch=${{ matrix.nvcc_arch }}
      RISC0_BUILD_LOCKED: 1
      RUST_BACKTRACE: full
      # SCCACHE_RECACHE: 1
    steps:
      - uses: actions/checkout@v4
      - if: matrix.feature == 'cuda'
        uses: ./.github/actions/cuda
      - if: matrix.feature == 'cuda'
        run: nvidia-smi
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - name: Login to Docker Hub
        if: >
          matrix.os == 'Linux' &&
          github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_CI_USER }}
          password: ${{ secrets.DOCKERHUB_CI_PAT }}
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest
          version: "0.9.96"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force gdb $RISC0_CPP_TOOLCHAIN_VERSION
      - name: Install gdb dependencies
        run: brew install zstd gettext lz4 mpfr gmp
        if: matrix.os == 'macOS'
      - name: test workspace
        run: ${{ matrix.test_command }} --release -F $FEATURE -F prove -F redis -F unstable --workspace --timings --exclude doc-test
      - uses: actions/upload-artifact@v4
        with:
          name: cargo-timings-${{ matrix.os }}-${{ matrix.device }}-${{ matrix.partition }}
          path: target/cargo-timings/
          retention-days: 5
      - run: sccache --show-stats

  extra:
    if: needs.changes.outputs.test == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, "${{ matrix.os }}", "${{ matrix.arch }}", "${{ matrix.device }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
            feature: cuda
            device: nvidia_rtx_4000_ada
            nvcc_arch: sm_89
            test_command: cargo test
          - os: macOS
            arch: ARM64
            feature: default
            device: apple_m2_pro
            test_command: cargo nextest run
    env:
      FEATURE: ${{ matrix.feature }}
      NVCC_APPEND_FLAGS: -arch=${{ matrix.nvcc_arch }}
      RISC0_BUILD_LOCKED: 1
      RUST_BACKTRACE: full
      # SCCACHE_RECACHE: 1
    steps:
      - uses: actions/checkout@v4
      - if: matrix.feature == 'cuda'
        uses: ./.github/actions/cuda
      - if: matrix.feature == 'cuda'
        run: nvidia-smi
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest
          version: "0.9.96"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - name: test risc0-r0vm
        run: ${{ matrix.test_command }} --release -p risc0-r0vm -F $FEATURE
      - name: test risc0-r0vm (disable-dev-mode)
        run: ${{ matrix.test_command }} --release -p risc0-r0vm -F $FEATURE -F disable-dev-mode
      - run: ${{ matrix.test_command }} --release -p cargo-risczero -F experimental
      - name: run fibonacci benchmark
        run: cargo run --release --locked -F $FEATURE -- fibonacci
        working-directory: benchmarks
      - name: run datasheet generator (smoke test)
        run: cargo run --release --locked -F $FEATURE -F prove --example datasheet -- --json tmp/datasheet.json lift
      - name: run datasheet generator (CUDA full)
        if: matrix.feature == 'cuda'
        run: cargo run --release --locked -F $FEATURE -F prove --example datasheet
      - name: check benches
        run: cargo check -F $FEATURE --benches --workspace --exclude doc-test
      - run: cargo check -p risc0-build
      - run: cargo check -p risc0-circuit-rv32im -F $FEATURE
      - run: cargo check -p risc0-core
      - run: cargo check -p risc0-sys -F $FEATURE
      - run: cargo check -p risc0-zkp -F $FEATURE
      - run: cargo check -p risc0-zkvm -F $FEATURE
      - run: cargo check -p bonsai-sdk --all-features
      - run: sccache --show-stats

  examples:
    if: needs.changes.outputs.examples == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, "${{ matrix.os }}", "${{ matrix.arch }}", "${{ matrix.device }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
            feature: cuda
            device: nvidia_rtx_4000_ada
            nvcc_arch: sm_89
            test_command: cargo test
          - os: macOS
            arch: ARM64
            feature: default
            device: apple_m2_pro
            test_command: cargo nextest run
    env:
      CARGO_BUILD_JOBS: 32
      FEATURE: ${{ matrix.feature }}
      NVCC_APPEND_FLAGS: -arch=${{ matrix.nvcc_arch }}
      RISC0_BUILD_LOCKED: 1
      RISC0_EXECUTOR: ipc
      RISC0_PROVER: ipc
      RISC0_SERVER_PATH: ${{ github.workspace }}/target/release/r0vm
      RUST_BACKTRACE: full
      # SCCACHE_RECACHE: 1
    steps:
      - uses: actions/checkout@v4
      - if: matrix.feature == 'cuda'
        uses: ./.github/actions/cuda
      - if: matrix.feature == 'cuda'
        run: nvidia-smi
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest
          version: "0.9.96"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo build --release -p risc0-r0vm -F $FEATURE
      - name: test in dev mode
        run: RISC0_DEV_MODE=1 ${{ matrix.test_command }} --release --locked -F $FEATURE --workspace --exclude prover-example
        working-directory: examples
      - name: test prover example
        run: ${{ matrix.test_command }} --release --locked -F $FEATURE -p prover-example
        working-directory: examples
      - run: cargo run --locked -F $FEATURE
        env:
          RISC0_PPROF_OUT: ${{ github.workspace }}/fibonacci.pb
        working-directory: examples/profiling
      - run: sccache --show-stats

  test-crates:
    if: false # needs.changes.outputs.test-crates == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, Linux, cpu]
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          path: 'risc0'
      - uses: actions/checkout@v4
        with:
          repository: risc0/RustCrypto-crypto-bigint
          path: 'RustCrypto-crypto-bigint'
      - uses: ./risc0/.github/actions/rustup
      - uses: ./risc0/.github/actions/sccache
      - name: Install risczero toolchain
        run: |
          cargo run --bin cargo-risczero --no-default-features -- risczero install --version $RISC0_TOOLCHAIN_VERSION
          cargo install --force --path risc0/cargo-risczero -F experimental
        working-directory: risc0
      - name: run cargo risczero test
        working-directory: ${{ github.workspace }}/RustCrypto-crypto-bigint
        run: cargo risczero test
      - run: sccache --show-stats

  doc:
    if: needs.changes.outputs.doc == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, macOS, cpu]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo doc --no-deps --exclude=risc0-zkvm-methods --workspace
      - run: cargo doc --no-deps --manifest-path bento/Cargo.toml --workspace
      - run: sccache --show-stats

  # Run as a separate job because we need to install a different set of tools.
  # In particular, it uses nightly Rust and _does not_ install cargo risczero.
  docs-rs:
    if: needs.changes.outputs.doc == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, macOS, cpu]
    env:
      RUSTDOCFLAGS: "--cfg docsrs -D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
        with:
          # Building with docs.rs config requires the nightly toolchain.
          toolchain: nightly-2024-11-26
      - uses: ./.github/actions/sccache
      - run: cargo +nightly-2024-11-26 doc -p risc0-zkvm -Fclient,prove,getrandom,std --no-deps
      - run: cargo +nightly-2024-11-26 doc -p risc0-zkp -Fprove,std --no-deps
      - run: cargo +nightly-2024-11-26 doc -p cargo-risczero -Fdocker,r0vm --no-deps
      - run: cargo +nightly-2024-11-26 doc -p risc0-binfmt -p risc0-core -p risc0-groth16 -p risc0-zkvm-platform --all-features  --no-deps
      - run: sccache --show-stats

  check-external:
    if: needs.changes.outputs.check-external == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, macOS, cpu]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - run: cargo check
        working-directory: external/substrate
      - run: sccache --show-stats

  check-semver:
    if: needs.changes.outputs.check-semver == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, cpu, "${{ matrix.os }}", "${{ matrix.arch }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
          - os: macOS
            arch: ARM64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - name: run SemVer checks
        run: cargo run --bin xtask --no-default-features -- semver-checks --locked $UPDATE
        env:
            # Pass `--update` on release branches to ensure the release-branch semver-checks are
            # always testing against the latest crates.io versions.
            UPDATE: ${{ startsWith(github.head_ref || github.ref_name, 'release-') && '--update' || '' }}
      - run: sccache --show-stats

  check-template:
    if: needs.changes.outputs.check-template == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, cpu, "${{ matrix.os }}", "${{ matrix.arch }}"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            arch: X64
          - os: macOS
            arch: ARM64
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - run: cargo install --force --path risc0/cargo-risczero --locked
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: |
          cargo risczero new \
            --path $(pwd) \
            --dest ${{ runner.temp }} \
            --guest-name test_method \
            template-test
        shell: bash
      - run: cargo run --release --manifest-path ${{ runner.temp }}/template-test/Cargo.toml
      - run: ${{ runner.temp }}/template-test/target/release/host
      - run: |
          cargo risczero new \
            --path $(pwd) \
            --dest ${{ runner.temp }} \
            --guest-name test_method \
            --no-std \
            template-test-no-std
        shell: bash
      - run: cargo run --release --manifest-path ${{ runner.temp }}/template-test-no-std/Cargo.toml
      - run: sccache --show-stats

  browser:
    if: needs.changes.outputs.browser == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, Linux, X64, cpu]
    env:
      RISC0_BUILD_LOCKED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: browser-actions/setup-firefox@v1
      - run: firefox --version
      - uses: ./.github/actions/rustup
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: ./.github/actions/sccache
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: wasm-pack
          version: "0.13.1"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo run --bin xtask -- gen-receipt
      - run: |
          npm install
          npm test -- --firefox
        working-directory: examples/browser-verify
      - run: sccache --show-stats

  docker:
    if: needs.changes.outputs.test == 'true'
    needs: changes
    runs-on: [self-hosted, cluster, Linux, X64, cpu, docker]
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - run: git lfs pull
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - name: Login to Docker Hub
        if: github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_CI_USER }}
          password: ${{ secrets.DOCKERHUB_CI_PAT }}
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo test -p risc0-build -F docker
      - run: cargo test -p risc0-groth16 -F prove --release
      - run: cargo test -p risc0-zkvm -F docker -F prove -- docker
        env:
          RISC0_USE_DOCKER: "1"
      - run: sccache --show-stats

  web:
    if: needs.changes.outputs.web == 'true'
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 🍞 Setup Bun
        uses: risc0/setup-bun@v1.2.1
        with:
          bun-version: 1.1.34
      - run: bun install
        working-directory: web
      - run: bun run ci
        working-directory: web
      - run: bun run typecheck
        working-directory: web
      - run: bun run test
        working-directory: web

  bento-test:
    if: needs.changes.outputs.bento == 'true'
    needs: changes
    runs-on: [ self-hosted, cluster, Linux, X64, cpu ]
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
    env:
      RUST_BACKTRACE: full
      RISC0_DEV_MODE: true
      DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest
          version: "0.9.96"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - name: Install sqlx-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: sqlx-cli
          version: '=0.8.2'
          locked: true
          args: --no-default-features
          features: postgres
      - run: sqlx migrate run --source bento/crates/taskdb/migrations/
      - run: cargo test --manifest-path bento/Cargo.toml --locked --workspace --all-targets -- --ignored
      - run: sccache --show-stats

  bento-run:
    if: false # needs.changes.outputs.bento == 'true'
    needs: changes
    runs-on: [ self-hosted, cluster, Linux, X64, cuda, g6e.xlarge, bench ]
    env:
      FEATURE: cuda
      RISC0_BUILD_LOCKED: 1
      RISC0_EXECUTOR: ipc
      RISC0_PROVER: ipc
      RISC0_SERVER_PATH: ${{ github.workspace }}/target/release/r0vm
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/cuda
      - uses: ./.github/actions/rustup
      - uses: ./.github/actions/sccache
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest
          version: "0.9.96"
      - run: cargo run --bin rzup -- --verbose install --force rust $RISC0_RUST_TOOLCHAIN_VERSION
      - run: cargo run --bin rzup -- --verbose install --force cpp $RISC0_CPP_TOOLCHAIN_VERSION
      - run: cargo build --release -p risc0-r0vm -F $FEATURE
      - uses: aws-actions/configure-aws-credentials@v4
        if: github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        id: aws-creds
        with:
          aws-region: 'us-west-2'
          role-to-assume: 'arn:aws:iam::083632199359:role/gha_oidc_risc0_cache_public_access'
          output-credentials: true
      - name: create ci creds file
        if: github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        run: |
          echo "[default]" > bento/dockerfiles/ci-cache-creds.txt
          echo "aws_access_key_id=${{ steps.aws-creds.outputs.aws-access-key-id }}" >> bento/dockerfiles/ci-cache-creds.txt && \
          echo "aws_secret_access_key=${{ steps.aws-creds.outputs.aws-secret-access-key }}" >> bento/dockerfiles/ci-cache-creds.txt && \
          echo "aws_session_token=${{ steps.aws-creds.outputs.aws-session-token }}" >> bento/dockerfiles/ci-cache-creds.txt
      - uses: docker/login-action@v3
        if: github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        with:
          username: ${{ secrets.DOCKERHUB_CI_USER }}
          password: ${{ secrets.DOCKERHUB_CI_PAT }}
      - uses: docker/setup-buildx-action@v3
      - run: COMPOSE_BAKE=true docker compose --env-file bento/dockerfiles/sample.env -f compose.yml up -d
      - run: RUST_LOG=info cargo run --manifest-path bento/Cargo.toml --bin bento_cli -- -c 32 -s
